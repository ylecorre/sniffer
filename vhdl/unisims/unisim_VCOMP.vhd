--**************************************************************
--  Copyright (c) 2011 Xilinx, Inc.  All rights reserved.
--  File Name    : unisim_VCOMP.vhd
--  Library      : unisim
--  Release      : 11.1
--  Entity Count : 208
--  Generated by : gencomp.pl
--**************************************************************

library IEEE;
use IEEE.STD_LOGIC_1164.all;
package VCOMPONENTS is
attribute BOX_TYPE : string;


-- synopsys translate_off

-----------------------------------------
-----------   FPGA Globals --------------
-----------------------------------------
signal GSR : std_logic := '0';
signal GTS : std_logic := '0';
signal GWE : std_logic;
signal PLL_LOCKG : std_logic := 'H';
signal PROGB_GLBL : std_logic;
signal CCLKO_GLBL : std_logic;

-----------------------------------------
-----------   CPLD Globals --------------
-----------------------------------------
signal PRLD : std_logic := '0';

-----------------------------------------
-----------   JTAG Globals --------------
-----------------------------------------
signal JTAG_TDO_GLBL  : std_logic;
signal JTAG_TDI_GLBL  : std_logic;
signal JTAG_TMS_GLBL  : std_logic;
signal JTAG_TCK_GLBL  : std_logic;
signal JTAG_TRST_GLBL : std_logic;

signal JTAG_CAPTURE_GLBL : std_logic;
signal JTAG_RESET_GLBL : std_logic;
signal JTAG_SHIFT_GLBL : std_logic;
signal JTAG_UPDATE_GLBL : std_logic;
signal JTAG_RUNTEST_GLBL : std_logic;

signal JTAG_SEL1_GLBL : std_logic := '0';
signal JTAG_SEL2_GLBL : std_logic := '0';
signal JTAG_SEL3_GLBL : std_logic := '0';
signal JTAG_SEL4_GLBL : std_logic := '0';

signal JTAG_USER_TDO1_GLBL : std_logic := 'Z';
signal JTAG_USER_TDO2_GLBL : std_logic := 'Z';
signal JTAG_USER_TDO3_GLBL : std_logic := 'Z';
signal JTAG_USER_TDO4_GLBL : std_logic := 'Z';

-- synopsys translate_on

-- START COMPONENT
----- component AND2B1L -----
component AND2B1L
  generic (
     IS_SRI_INVERTED : std_ulogic := '0'
  );
  port (
     O : out std_ulogic;
     DI : in std_ulogic;
     SRI : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  AND2B1L : component is "PRIMITIVE";

----- component AUTOBUF -----
component AUTOBUF
  generic (
     BUFFER_TYPE : string := "AUTO"
  );
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  AUTOBUF : component is "PRIMITIVE";

----- component BIBUF -----
component BIBUF
  port (
     IO : inout std_ulogic;
     PAD : inout std_ulogic
  );
end component;
attribute BOX_TYPE of
  BIBUF : component is "PRIMITIVE";

----- component BITSLICE_CONTROL -----
component BITSLICE_CONTROL
  generic (
     CTRL_CLK : string := "EXTERNAL";
     DIV_MODE : string := "DIV2";
     EN_CLK_TO_EXT_NORTH : string := "DISABLE";
     EN_CLK_TO_EXT_SOUTH : string := "DISABLE";
     EN_DYN_ODLY_MODE : string := "FALSE";
     EN_OTHER_NCLK : string := "FALSE";
     EN_OTHER_PCLK : string := "FALSE";
     IDLY_VT_TRACK : string := "TRUE";
     INV_RXCLK : string := "FALSE";
     ODLY_VT_TRACK : string := "TRUE";
     QDLY_VT_TRACK : string := "TRUE";
     READ_IDLE_COUNT : std_logic_vector(5 downto 0) := "00" & X"0";
     REFCLK_SRC : string := "PLLCLK";
     ROUNDING_FACTOR : integer := 16;
     RXGATE_EXTEND : string := "FALSE";
     RX_CLK_PHASE_N : string := "SHIFT_0";
     RX_CLK_PHASE_P : string := "SHIFT_0";
     RX_GATING : string := "DISABLE";
     SELF_CALIBRATE : string := "ENABLE";
     SERIAL_MODE : string := "FALSE";
     TX_GATING : string := "DISABLE"
  );
  port (
     BISC_START_OUT : out std_ulogic;
     BISC_STOP_OUT : out std_ulogic;
     CLK_TO_EXT_NORTH : out std_ulogic;
     CLK_TO_EXT_SOUTH : out std_ulogic;
     DLY_RDY : out std_ulogic;
     DYN_DCI : out std_logic_vector(6 downto 0);
     NCLK_NIBBLE_OUT : out std_ulogic;
     PCLK_NIBBLE_OUT : out std_ulogic;
     RIU_RD_DATA : out std_logic_vector(15 downto 0);
     RIU_VALID : out std_ulogic;
     RX_BIT_CTRL_OUT0 : out std_logic_vector(23 downto 0);
     RX_BIT_CTRL_OUT1 : out std_logic_vector(23 downto 0);
     RX_BIT_CTRL_OUT2 : out std_logic_vector(23 downto 0);
     RX_BIT_CTRL_OUT3 : out std_logic_vector(23 downto 0);
     RX_BIT_CTRL_OUT4 : out std_logic_vector(23 downto 0);
     RX_BIT_CTRL_OUT5 : out std_logic_vector(23 downto 0);
     RX_BIT_CTRL_OUT6 : out std_logic_vector(23 downto 0);
     TX_BIT_CTRL_OUT0 : out std_logic_vector(26 downto 0);
     TX_BIT_CTRL_OUT1 : out std_logic_vector(26 downto 0);
     TX_BIT_CTRL_OUT2 : out std_logic_vector(26 downto 0);
     TX_BIT_CTRL_OUT3 : out std_logic_vector(26 downto 0);
     TX_BIT_CTRL_OUT4 : out std_logic_vector(26 downto 0);
     TX_BIT_CTRL_OUT5 : out std_logic_vector(26 downto 0);
     TX_BIT_CTRL_OUT6 : out std_logic_vector(26 downto 0);
     TX_BIT_CTRL_OUT_TRI : out std_logic_vector(34 downto 0);
     VTC_RDY : out std_ulogic;
     BISC_START_IN : in std_ulogic;
     BISC_STOP_IN : in std_ulogic;
     CLK_FROM_EXT : in std_ulogic;
     EN_VTC : in std_ulogic;
     NCLK_NIBBLE_IN : in std_ulogic;
     PCLK_NIBBLE_IN : in std_ulogic;
     PHY_RDCS0 : in std_logic_vector(3 downto 0);
     PHY_RDCS1 : in std_logic_vector(3 downto 0);
     PHY_RDEN : in std_logic_vector(3 downto 0);
     PHY_WRCS0 : in std_logic_vector(3 downto 0);
     PHY_WRCS1 : in std_logic_vector(3 downto 0);
     PLL_CLK : in std_ulogic;
     REFCLK : in std_ulogic;
     RIU_ADDR : in std_logic_vector(5 downto 0);
     RIU_CLK : in std_ulogic;
     RIU_NIBBLE_SEL : in std_ulogic;
     RIU_WR_DATA : in std_logic_vector(15 downto 0);
     RIU_WR_EN : in std_ulogic;
     RST : in std_ulogic;
     RX_BIT_CTRL_IN0 : in std_logic_vector(34 downto 0);
     RX_BIT_CTRL_IN1 : in std_logic_vector(34 downto 0);
     RX_BIT_CTRL_IN2 : in std_logic_vector(34 downto 0);
     RX_BIT_CTRL_IN3 : in std_logic_vector(34 downto 0);
     RX_BIT_CTRL_IN4 : in std_logic_vector(34 downto 0);
     RX_BIT_CTRL_IN5 : in std_logic_vector(34 downto 0);
     RX_BIT_CTRL_IN6 : in std_logic_vector(34 downto 0);
     TBYTE_IN : in std_logic_vector(3 downto 0);
     TX_BIT_CTRL_IN0 : in std_logic_vector(29 downto 0);
     TX_BIT_CTRL_IN1 : in std_logic_vector(29 downto 0);
     TX_BIT_CTRL_IN2 : in std_logic_vector(29 downto 0);
     TX_BIT_CTRL_IN3 : in std_logic_vector(29 downto 0);
     TX_BIT_CTRL_IN4 : in std_logic_vector(29 downto 0);
     TX_BIT_CTRL_IN5 : in std_logic_vector(29 downto 0);
     TX_BIT_CTRL_IN6 : in std_logic_vector(29 downto 0);
     TX_BIT_CTRL_IN_TRI : in std_logic_vector(10 downto 0)
  );
end component;
attribute BOX_TYPE of
  BITSLICE_CONTROL : component is "PRIMITIVE";

----- component BSCANE2 -----
component BSCANE2
  generic (
     DISABLE_JTAG : string := "FALSE";
     JTAG_CHAIN : integer := 1
  );
  port (
     CAPTURE : out std_ulogic := 'H';
     DRCK : out std_ulogic := 'H';
     RESET : out std_ulogic := 'H';
     RUNTEST : out std_ulogic := 'L';
     SEL : out std_ulogic := 'L';
     SHIFT : out std_ulogic := 'L';
     TCK : out std_ulogic := 'L';
     TDI : out std_ulogic := 'L';
     TMS : out std_ulogic := 'L';
     UPDATE : out std_ulogic := 'L';
     TDO : in std_ulogic := 'X'
  );
end component;
attribute BOX_TYPE of
  BSCANE2 : component is "PRIMITIVE";

----- component BUF -----
component BUF
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  BUF : component is "PRIMITIVE";

----- component BUFCE_LEAF -----
component BUFCE_LEAF
  generic (
     CE_TYPE : string := "SYNC";
     IS_CE_INVERTED : std_ulogic := '0';
     IS_I_INVERTED : std_ulogic := '0'
  );
  port (
     O : out std_ulogic;
     CE : in std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  BUFCE_LEAF : component is "PRIMITIVE";

----- component BUFCE_ROW -----
component BUFCE_ROW
  generic (
     CE_TYPE : string := "SYNC";
     IS_CE_INVERTED : std_ulogic := '0';
     IS_I_INVERTED : std_ulogic := '0'
  );
  port (
     O : out std_ulogic;
     CE : in std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  BUFCE_ROW : component is "PRIMITIVE";

----- component BUFG -----
component BUFG
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  BUFG : component is "PRIMITIVE";

----- component BUFGCE -----
component BUFGCE
  generic (
     CE_TYPE : string := "SYNC";
     IS_CE_INVERTED : std_ulogic := '0';
     IS_I_INVERTED : std_ulogic := '0'
  );
  port (
     O : out std_ulogic;
     CE : in std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  BUFGCE : component is "PRIMITIVE";

----- component BUFGCE_DIV -----
component BUFGCE_DIV
  generic (
     BUFGCE_DIVIDE : integer := 1;
     IS_CE_INVERTED : std_ulogic := '0';
     IS_CLR_INVERTED : std_ulogic := '0';
     IS_I_INVERTED : std_ulogic := '0'
  );
  port (
     O : out std_ulogic;
     CE : in std_ulogic;
     CLR : in std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  BUFGCE_DIV : component is "PRIMITIVE";

----- component BUFGCTRL -----
component BUFGCTRL
  generic (
     INIT_OUT : integer := 0;
     IS_CE0_INVERTED : std_ulogic := '0';
     IS_CE1_INVERTED : std_ulogic := '0';
     IS_I0_INVERTED : std_ulogic := '0';
     IS_I1_INVERTED : std_ulogic := '0';
     IS_IGNORE0_INVERTED : std_ulogic := '0';
     IS_IGNORE1_INVERTED : std_ulogic := '0';
     IS_S0_INVERTED : std_ulogic := '0';
     IS_S1_INVERTED : std_ulogic := '0';
     PRESELECT_I0 : boolean := false;
     PRESELECT_I1 : boolean := false
  );
  port (
     O : out std_ulogic;
     CE0 : in std_ulogic;
     CE1 : in std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     IGNORE0 : in std_ulogic;
     IGNORE1 : in std_ulogic;
     S0 : in std_ulogic;
     S1 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  BUFGCTRL : component is "PRIMITIVE";

----- component BUFGP -----
component BUFGP
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  BUFGP : component is "PRIMITIVE";

----- component BUFG_GT -----
component BUFG_GT
  generic (
     IS_CLR_INVERTED : std_ulogic := '0'
  );
  port (
     O : out std_ulogic;
     CE : in std_ulogic;
     CEMASK : in std_ulogic;
     CLR : in std_ulogic;
     CLRMASK : in std_ulogic;
     DIV : in std_logic_vector(2 downto 0);
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  BUFG_GT : component is "PRIMITIVE";

----- component BUFH -----
component BUFH
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  BUFH : component is "PRIMITIVE";

----- component BUFHCE -----
component BUFHCE
  generic (
     CE_TYPE : string := "SYNC";
     INIT_OUT : integer := 0;
     IS_CE_INVERTED : std_ulogic := '0'
  );
  port (
     O : out std_ulogic;
     CE : in std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  BUFHCE : component is "PRIMITIVE";

----- component BUFIO -----
component BUFIO
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  BUFIO : component is "PRIMITIVE";

----- component BUFMR -----
component BUFMR
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  BUFMR : component is "PRIMITIVE";

----- component BUFMRCE -----
component BUFMRCE
  generic (
     CE_TYPE : string := "SYNC";
     INIT_OUT : integer := 0;
     IS_CE_INVERTED : std_ulogic := '0'
  );
  port (
     O : out std_ulogic;
     CE : in std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  BUFMRCE : component is "PRIMITIVE";

----- component BUFR -----
component BUFR
  generic (
     BUFR_DIVIDE : string := "BYPASS";
     SIM_DEVICE : string := "VIRTEX4"
  );
  port (
     O : out std_ulogic;
     CE : in std_ulogic;
     CLR : in std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  BUFR : component is "PRIMITIVE";

----- component CAPTUREE2 -----
component CAPTUREE2
  generic (
     ONESHOT : string := "TRUE"
  );
  port (
     CAP : in std_ulogic;
     CLK : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  CAPTUREE2 : component is "PRIMITIVE";

----- component CARRY4 -----
component CARRY4
  port (
     CO : out std_logic_vector(3 downto 0);
     O : out std_logic_vector(3 downto 0);
     CI : in std_ulogic;
     CYINIT : in std_ulogic;
     DI : in std_logic_vector(3 downto 0);
     S : in std_logic_vector(3 downto 0)
  );
end component;
attribute BOX_TYPE of
  CARRY4 : component is "PRIMITIVE";

----- component CARRY8 -----
component CARRY8
  generic (
     CARRY_TYPE : string := "SINGLE_CY8"
  );
  port (
     CO : out std_logic_vector(7 downto 0);
     O : out std_logic_vector(7 downto 0);
     CI : in std_ulogic := '0';
     CI_TOP : in std_ulogic := '0';
     DI : in std_logic_vector(7 downto 0) := (others => '0');
     S : in std_logic_vector(7 downto 0) := (others => '0')
  );
end component;
attribute BOX_TYPE of
  CARRY8 : component is "PRIMITIVE";

----- component CFGLUT5 -----
component CFGLUT5
  generic (
     INIT : bit_vector := X"00000000";
     IS_CLK_INVERTED : std_ulogic := '0'
  );
  port (
     CDO : out STD_ULOGIC;
     O5 : out STD_ULOGIC;
     O6 : out STD_ULOGIC;
     CDI : in STD_ULOGIC;
     CE : in STD_ULOGIC;
     CLK : in STD_ULOGIC;
     I0 : in STD_ULOGIC;
     I1 : in STD_ULOGIC;
     I2 : in STD_ULOGIC;
     I3 : in STD_ULOGIC;
     I4 : in STD_ULOGIC
  );
end component;
attribute BOX_TYPE of
  CFGLUT5 : component is "PRIMITIVE";

----- component CMAC -----
component CMAC
  generic (
     CTL_PTP_TRANSPCLK_MODE : string := "FALSE";
     CTL_RX_CHECK_ACK : string := "TRUE";
     CTL_RX_CHECK_PREAMBLE : string := "FALSE";
     CTL_RX_CHECK_SFD : string := "FALSE";
     CTL_RX_DELETE_FCS : string := "TRUE";
     CTL_RX_ETYPE_GCP : std_logic_vector(15 downto 0) := X"8808";
     CTL_RX_ETYPE_GPP : std_logic_vector(15 downto 0) := X"8808";
     CTL_RX_ETYPE_PCP : std_logic_vector(15 downto 0) := X"8808";
     CTL_RX_ETYPE_PPP : std_logic_vector(15 downto 0) := X"8808";
     CTL_RX_FORWARD_CONTROL : string := "FALSE";
     CTL_RX_IGNORE_FCS : string := "FALSE";
     CTL_RX_MAX_PACKET_LEN : std_logic_vector(14 downto 0) := "101" & X"580";
     CTL_RX_MIN_PACKET_LEN : std_logic_vector(7 downto 0) := X"40";
     CTL_RX_OPCODE_GPP : std_logic_vector(15 downto 0) := X"0001";
     CTL_RX_OPCODE_MAX_GCP : std_logic_vector(15 downto 0) := X"FFFF";
     CTL_RX_OPCODE_MAX_PCP : std_logic_vector(15 downto 0) := X"FFFF";
     CTL_RX_OPCODE_MIN_GCP : std_logic_vector(15 downto 0) := X"0000";
     CTL_RX_OPCODE_MIN_PCP : std_logic_vector(15 downto 0) := X"0000";
     CTL_RX_OPCODE_PPP : std_logic_vector(15 downto 0) := X"0001";
     CTL_RX_PAUSE_DA_MCAST : std_logic_vector(47 downto 0) := X"0180C2000001";
     CTL_RX_PAUSE_DA_UCAST : std_logic_vector(47 downto 0) := X"000000000000";
     CTL_RX_PAUSE_SA : std_logic_vector(47 downto 0) := X"000000000000";
     CTL_RX_PROCESS_LFI : string := "FALSE";
     CTL_RX_VL_LENGTH_MINUS1 : std_logic_vector(15 downto 0) := X"3FFF";
     CTL_RX_VL_MARKER_ID0 : std_logic_vector(63 downto 0) := X"C16821003E97DE00";
     CTL_RX_VL_MARKER_ID1 : std_logic_vector(63 downto 0) := X"9D718E00628E7100";
     CTL_RX_VL_MARKER_ID10 : std_logic_vector(63 downto 0) := X"FD6C990002936600";
     CTL_RX_VL_MARKER_ID11 : std_logic_vector(63 downto 0) := X"B9915500466EAA00";
     CTL_RX_VL_MARKER_ID12 : std_logic_vector(63 downto 0) := X"5CB9B200A3464D00";
     CTL_RX_VL_MARKER_ID13 : std_logic_vector(63 downto 0) := X"1AF8BD00E5074200";
     CTL_RX_VL_MARKER_ID14 : std_logic_vector(63 downto 0) := X"83C7CA007C383500";
     CTL_RX_VL_MARKER_ID15 : std_logic_vector(63 downto 0) := X"3536CD00CAC93200";
     CTL_RX_VL_MARKER_ID16 : std_logic_vector(63 downto 0) := X"C4314C003BCEB300";
     CTL_RX_VL_MARKER_ID17 : std_logic_vector(63 downto 0) := X"ADD6B70052294800";
     CTL_RX_VL_MARKER_ID18 : std_logic_vector(63 downto 0) := X"5F662A00A099D500";
     CTL_RX_VL_MARKER_ID19 : std_logic_vector(63 downto 0) := X"C0F0E5003F0F1A00";
     CTL_RX_VL_MARKER_ID2 : std_logic_vector(63 downto 0) := X"594BE800A6B41700";
     CTL_RX_VL_MARKER_ID3 : std_logic_vector(63 downto 0) := X"4D957B00B26A8400";
     CTL_RX_VL_MARKER_ID4 : std_logic_vector(63 downto 0) := X"F50709000AF8F600";
     CTL_RX_VL_MARKER_ID5 : std_logic_vector(63 downto 0) := X"DD14C20022EB3D00";
     CTL_RX_VL_MARKER_ID6 : std_logic_vector(63 downto 0) := X"9A4A260065B5D900";
     CTL_RX_VL_MARKER_ID7 : std_logic_vector(63 downto 0) := X"7B45660084BA9900";
     CTL_RX_VL_MARKER_ID8 : std_logic_vector(63 downto 0) := X"A02476005FDB8900";
     CTL_RX_VL_MARKER_ID9 : std_logic_vector(63 downto 0) := X"68C9FB0097360400";
     CTL_TEST_MODE_PIN_CHAR : string := "FALSE";
     CTL_TX_DA_GPP : std_logic_vector(47 downto 0) := X"0180C2000001";
     CTL_TX_DA_PPP : std_logic_vector(47 downto 0) := X"0180C2000001";
     CTL_TX_ETHERTYPE_GPP : std_logic_vector(15 downto 0) := X"8808";
     CTL_TX_ETHERTYPE_PPP : std_logic_vector(15 downto 0) := X"8808";
     CTL_TX_FCS_INS_ENABLE : string := "TRUE";
     CTL_TX_IGNORE_FCS : string := "FALSE";
     CTL_TX_OPCODE_GPP : std_logic_vector(15 downto 0) := X"0001";
     CTL_TX_OPCODE_PPP : std_logic_vector(15 downto 0) := X"0001";
     CTL_TX_PTP_1STEP_ENABLE : string := "FALSE";
     CTL_TX_PTP_LATENCY_ADJUST : std_logic_vector(10 downto 0) := "000" & X"C1";
     CTL_TX_SA_GPP : std_logic_vector(47 downto 0) := X"000000000000";
     CTL_TX_SA_PPP : std_logic_vector(47 downto 0) := X"000000000000";
     CTL_TX_VL_LENGTH_MINUS1 : std_logic_vector(15 downto 0) := X"3FFF";
     CTL_TX_VL_MARKER_ID0 : std_logic_vector(63 downto 0) := X"C16821003E97DE00";
     CTL_TX_VL_MARKER_ID1 : std_logic_vector(63 downto 0) := X"9D718E00628E7100";
     CTL_TX_VL_MARKER_ID10 : std_logic_vector(63 downto 0) := X"FD6C990002936600";
     CTL_TX_VL_MARKER_ID11 : std_logic_vector(63 downto 0) := X"B9915500466EAA00";
     CTL_TX_VL_MARKER_ID12 : std_logic_vector(63 downto 0) := X"5CB9B200A3464D00";
     CTL_TX_VL_MARKER_ID13 : std_logic_vector(63 downto 0) := X"1AF8BD00E5074200";
     CTL_TX_VL_MARKER_ID14 : std_logic_vector(63 downto 0) := X"83C7CA007C383500";
     CTL_TX_VL_MARKER_ID15 : std_logic_vector(63 downto 0) := X"3536CD00CAC93200";
     CTL_TX_VL_MARKER_ID16 : std_logic_vector(63 downto 0) := X"C4314C003BCEB300";
     CTL_TX_VL_MARKER_ID17 : std_logic_vector(63 downto 0) := X"ADD6B70052294800";
     CTL_TX_VL_MARKER_ID18 : std_logic_vector(63 downto 0) := X"5F662A00A099D500";
     CTL_TX_VL_MARKER_ID19 : std_logic_vector(63 downto 0) := X"C0F0E5003F0F1A00";
     CTL_TX_VL_MARKER_ID2 : std_logic_vector(63 downto 0) := X"594BE800A6B41700";
     CTL_TX_VL_MARKER_ID3 : std_logic_vector(63 downto 0) := X"4D957B00B26A8400";
     CTL_TX_VL_MARKER_ID4 : std_logic_vector(63 downto 0) := X"F50709000AF8F600";
     CTL_TX_VL_MARKER_ID5 : std_logic_vector(63 downto 0) := X"DD14C20022EB3D00";
     CTL_TX_VL_MARKER_ID6 : std_logic_vector(63 downto 0) := X"9A4A260065B5D900";
     CTL_TX_VL_MARKER_ID7 : std_logic_vector(63 downto 0) := X"7B45660084BA9900";
     CTL_TX_VL_MARKER_ID8 : std_logic_vector(63 downto 0) := X"A02476005FDB8900";
     CTL_TX_VL_MARKER_ID9 : std_logic_vector(63 downto 0) := X"68C9FB0097360400";
     TEST_MODE_PIN_CHAR : string := "FALSE"
  );
  port (
     DRP_DO : out std_logic_vector(15 downto 0);
     DRP_RDY : out std_ulogic;
     RX_DATAOUT0 : out std_logic_vector(127 downto 0);
     RX_DATAOUT1 : out std_logic_vector(127 downto 0);
     RX_DATAOUT2 : out std_logic_vector(127 downto 0);
     RX_DATAOUT3 : out std_logic_vector(127 downto 0);
     RX_ENAOUT0 : out std_ulogic;
     RX_ENAOUT1 : out std_ulogic;
     RX_ENAOUT2 : out std_ulogic;
     RX_ENAOUT3 : out std_ulogic;
     RX_EOPOUT0 : out std_ulogic;
     RX_EOPOUT1 : out std_ulogic;
     RX_EOPOUT2 : out std_ulogic;
     RX_EOPOUT3 : out std_ulogic;
     RX_ERROUT0 : out std_ulogic;
     RX_ERROUT1 : out std_ulogic;
     RX_ERROUT2 : out std_ulogic;
     RX_ERROUT3 : out std_ulogic;
     RX_LANE_ALIGNER_FILL_0 : out std_logic_vector(6 downto 0);
     RX_LANE_ALIGNER_FILL_1 : out std_logic_vector(6 downto 0);
     RX_LANE_ALIGNER_FILL_10 : out std_logic_vector(6 downto 0);
     RX_LANE_ALIGNER_FILL_11 : out std_logic_vector(6 downto 0);
     RX_LANE_ALIGNER_FILL_12 : out std_logic_vector(6 downto 0);
     RX_LANE_ALIGNER_FILL_13 : out std_logic_vector(6 downto 0);
     RX_LANE_ALIGNER_FILL_14 : out std_logic_vector(6 downto 0);
     RX_LANE_ALIGNER_FILL_15 : out std_logic_vector(6 downto 0);
     RX_LANE_ALIGNER_FILL_16 : out std_logic_vector(6 downto 0);
     RX_LANE_ALIGNER_FILL_17 : out std_logic_vector(6 downto 0);
     RX_LANE_ALIGNER_FILL_18 : out std_logic_vector(6 downto 0);
     RX_LANE_ALIGNER_FILL_19 : out std_logic_vector(6 downto 0);
     RX_LANE_ALIGNER_FILL_2 : out std_logic_vector(6 downto 0);
     RX_LANE_ALIGNER_FILL_3 : out std_logic_vector(6 downto 0);
     RX_LANE_ALIGNER_FILL_4 : out std_logic_vector(6 downto 0);
     RX_LANE_ALIGNER_FILL_5 : out std_logic_vector(6 downto 0);
     RX_LANE_ALIGNER_FILL_6 : out std_logic_vector(6 downto 0);
     RX_LANE_ALIGNER_FILL_7 : out std_logic_vector(6 downto 0);
     RX_LANE_ALIGNER_FILL_8 : out std_logic_vector(6 downto 0);
     RX_LANE_ALIGNER_FILL_9 : out std_logic_vector(6 downto 0);
     RX_MTYOUT0 : out std_logic_vector(3 downto 0);
     RX_MTYOUT1 : out std_logic_vector(3 downto 0);
     RX_MTYOUT2 : out std_logic_vector(3 downto 0);
     RX_MTYOUT3 : out std_logic_vector(3 downto 0);
     RX_PTP_PCSLANE_OUT : out std_logic_vector(4 downto 0);
     RX_PTP_TSTAMP_OUT : out std_logic_vector(79 downto 0);
     RX_SOPOUT0 : out std_ulogic;
     RX_SOPOUT1 : out std_ulogic;
     RX_SOPOUT2 : out std_ulogic;
     RX_SOPOUT3 : out std_ulogic;
     STAT_RX_ALIGNED : out std_ulogic;
     STAT_RX_ALIGNED_ERR : out std_ulogic;
     STAT_RX_BAD_CODE : out std_logic_vector(6 downto 0);
     STAT_RX_BAD_FCS : out std_logic_vector(3 downto 0);
     STAT_RX_BAD_PREAMBLE : out std_ulogic;
     STAT_RX_BAD_SFD : out std_ulogic;
     STAT_RX_BIP_ERR_0 : out std_ulogic;
     STAT_RX_BIP_ERR_1 : out std_ulogic;
     STAT_RX_BIP_ERR_10 : out std_ulogic;
     STAT_RX_BIP_ERR_11 : out std_ulogic;
     STAT_RX_BIP_ERR_12 : out std_ulogic;
     STAT_RX_BIP_ERR_13 : out std_ulogic;
     STAT_RX_BIP_ERR_14 : out std_ulogic;
     STAT_RX_BIP_ERR_15 : out std_ulogic;
     STAT_RX_BIP_ERR_16 : out std_ulogic;
     STAT_RX_BIP_ERR_17 : out std_ulogic;
     STAT_RX_BIP_ERR_18 : out std_ulogic;
     STAT_RX_BIP_ERR_19 : out std_ulogic;
     STAT_RX_BIP_ERR_2 : out std_ulogic;
     STAT_RX_BIP_ERR_3 : out std_ulogic;
     STAT_RX_BIP_ERR_4 : out std_ulogic;
     STAT_RX_BIP_ERR_5 : out std_ulogic;
     STAT_RX_BIP_ERR_6 : out std_ulogic;
     STAT_RX_BIP_ERR_7 : out std_ulogic;
     STAT_RX_BIP_ERR_8 : out std_ulogic;
     STAT_RX_BIP_ERR_9 : out std_ulogic;
     STAT_RX_BLOCK_LOCK : out std_logic_vector(19 downto 0);
     STAT_RX_BROADCAST : out std_ulogic;
     STAT_RX_FRAGMENT : out std_logic_vector(3 downto 0);
     STAT_RX_FRAMING_ERR_0 : out std_logic_vector(3 downto 0);
     STAT_RX_FRAMING_ERR_1 : out std_logic_vector(3 downto 0);
     STAT_RX_FRAMING_ERR_10 : out std_logic_vector(3 downto 0);
     STAT_RX_FRAMING_ERR_11 : out std_logic_vector(3 downto 0);
     STAT_RX_FRAMING_ERR_12 : out std_logic_vector(3 downto 0);
     STAT_RX_FRAMING_ERR_13 : out std_logic_vector(3 downto 0);
     STAT_RX_FRAMING_ERR_14 : out std_logic_vector(3 downto 0);
     STAT_RX_FRAMING_ERR_15 : out std_logic_vector(3 downto 0);
     STAT_RX_FRAMING_ERR_16 : out std_logic_vector(3 downto 0);
     STAT_RX_FRAMING_ERR_17 : out std_logic_vector(3 downto 0);
     STAT_RX_FRAMING_ERR_18 : out std_logic_vector(3 downto 0);
     STAT_RX_FRAMING_ERR_19 : out std_logic_vector(3 downto 0);
     STAT_RX_FRAMING_ERR_2 : out std_logic_vector(3 downto 0);
     STAT_RX_FRAMING_ERR_3 : out std_logic_vector(3 downto 0);
     STAT_RX_FRAMING_ERR_4 : out std_logic_vector(3 downto 0);
     STAT_RX_FRAMING_ERR_5 : out std_logic_vector(3 downto 0);
     STAT_RX_FRAMING_ERR_6 : out std_logic_vector(3 downto 0);
     STAT_RX_FRAMING_ERR_7 : out std_logic_vector(3 downto 0);
     STAT_RX_FRAMING_ERR_8 : out std_logic_vector(3 downto 0);
     STAT_RX_FRAMING_ERR_9 : out std_logic_vector(3 downto 0);
     STAT_RX_FRAMING_ERR_VALID_0 : out std_ulogic;
     STAT_RX_FRAMING_ERR_VALID_1 : out std_ulogic;
     STAT_RX_FRAMING_ERR_VALID_10 : out std_ulogic;
     STAT_RX_FRAMING_ERR_VALID_11 : out std_ulogic;
     STAT_RX_FRAMING_ERR_VALID_12 : out std_ulogic;
     STAT_RX_FRAMING_ERR_VALID_13 : out std_ulogic;
     STAT_RX_FRAMING_ERR_VALID_14 : out std_ulogic;
     STAT_RX_FRAMING_ERR_VALID_15 : out std_ulogic;
     STAT_RX_FRAMING_ERR_VALID_16 : out std_ulogic;
     STAT_RX_FRAMING_ERR_VALID_17 : out std_ulogic;
     STAT_RX_FRAMING_ERR_VALID_18 : out std_ulogic;
     STAT_RX_FRAMING_ERR_VALID_19 : out std_ulogic;
     STAT_RX_FRAMING_ERR_VALID_2 : out std_ulogic;
     STAT_RX_FRAMING_ERR_VALID_3 : out std_ulogic;
     STAT_RX_FRAMING_ERR_VALID_4 : out std_ulogic;
     STAT_RX_FRAMING_ERR_VALID_5 : out std_ulogic;
     STAT_RX_FRAMING_ERR_VALID_6 : out std_ulogic;
     STAT_RX_FRAMING_ERR_VALID_7 : out std_ulogic;
     STAT_RX_FRAMING_ERR_VALID_8 : out std_ulogic;
     STAT_RX_FRAMING_ERR_VALID_9 : out std_ulogic;
     STAT_RX_GOT_SIGNAL_OS : out std_ulogic;
     STAT_RX_HI_BER : out std_ulogic;
     STAT_RX_INRANGEERR : out std_ulogic;
     STAT_RX_INTERNAL_LOCAL_FAULT : out std_ulogic;
     STAT_RX_JABBER : out std_ulogic;
     STAT_RX_LANE0_VLM_BIP7 : out std_logic_vector(7 downto 0);
     STAT_RX_LANE0_VLM_BIP7_VALID : out std_ulogic;
     STAT_RX_LOCAL_FAULT : out std_ulogic;
     STAT_RX_MF_ERR : out std_logic_vector(19 downto 0);
     STAT_RX_MF_LEN_ERR : out std_logic_vector(19 downto 0);
     STAT_RX_MF_REPEAT_ERR : out std_logic_vector(19 downto 0);
     STAT_RX_MISALIGNED : out std_ulogic;
     STAT_RX_MULTICAST : out std_ulogic;
     STAT_RX_OVERSIZE : out std_ulogic;
     STAT_RX_PACKET_1024_1518_BYTES : out std_ulogic;
     STAT_RX_PACKET_128_255_BYTES : out std_ulogic;
     STAT_RX_PACKET_1519_1522_BYTES : out std_ulogic;
     STAT_RX_PACKET_1523_1548_BYTES : out std_ulogic;
     STAT_RX_PACKET_1549_2047_BYTES : out std_ulogic;
     STAT_RX_PACKET_2048_4095_BYTES : out std_ulogic;
     STAT_RX_PACKET_256_511_BYTES : out std_ulogic;
     STAT_RX_PACKET_4096_8191_BYTES : out std_ulogic;
     STAT_RX_PACKET_512_1023_BYTES : out std_ulogic;
     STAT_RX_PACKET_64_BYTES : out std_ulogic;
     STAT_RX_PACKET_65_127_BYTES : out std_ulogic;
     STAT_RX_PACKET_8192_9215_BYTES : out std_ulogic;
     STAT_RX_PACKET_BAD_FCS : out std_ulogic;
     STAT_RX_PACKET_LARGE : out std_ulogic;
     STAT_RX_PACKET_SMALL : out std_logic_vector(3 downto 0);
     STAT_RX_PAUSE : out std_ulogic;
     STAT_RX_PAUSE_QUANTA0 : out std_logic_vector(15 downto 0);
     STAT_RX_PAUSE_QUANTA1 : out std_logic_vector(15 downto 0);
     STAT_RX_PAUSE_QUANTA2 : out std_logic_vector(15 downto 0);
     STAT_RX_PAUSE_QUANTA3 : out std_logic_vector(15 downto 0);
     STAT_RX_PAUSE_QUANTA4 : out std_logic_vector(15 downto 0);
     STAT_RX_PAUSE_QUANTA5 : out std_logic_vector(15 downto 0);
     STAT_RX_PAUSE_QUANTA6 : out std_logic_vector(15 downto 0);
     STAT_RX_PAUSE_QUANTA7 : out std_logic_vector(15 downto 0);
     STAT_RX_PAUSE_QUANTA8 : out std_logic_vector(15 downto 0);
     STAT_RX_PAUSE_REQ : out std_logic_vector(8 downto 0);
     STAT_RX_PAUSE_VALID : out std_logic_vector(8 downto 0);
     STAT_RX_RECEIVED_LOCAL_FAULT : out std_ulogic;
     STAT_RX_REMOTE_FAULT : out std_ulogic;
     STAT_RX_STATUS : out std_ulogic;
     STAT_RX_STOMPED_FCS : out std_logic_vector(3 downto 0);
     STAT_RX_SYNCED : out std_logic_vector(19 downto 0);
     STAT_RX_SYNCED_ERR : out std_logic_vector(19 downto 0);
     STAT_RX_TEST_PATTERN_MISMATCH : out std_logic_vector(2 downto 0);
     STAT_RX_TOOLONG : out std_ulogic;
     STAT_RX_TOTAL_BYTES : out std_logic_vector(7 downto 0);
     STAT_RX_TOTAL_GOOD_BYTES : out std_logic_vector(13 downto 0);
     STAT_RX_TOTAL_GOOD_PACKETS : out std_ulogic;
     STAT_RX_TOTAL_PACKETS : out std_logic_vector(3 downto 0);
     STAT_RX_TRUNCATED : out std_ulogic;
     STAT_RX_UNDERSIZE : out std_logic_vector(3 downto 0);
     STAT_RX_UNICAST : out std_ulogic;
     STAT_RX_USER_PAUSE : out std_ulogic;
     STAT_RX_VLAN : out std_ulogic;
     STAT_RX_VL_DEMUXED : out std_logic_vector(19 downto 0);
     STAT_RX_VL_NUMBER_0 : out std_logic_vector(4 downto 0);
     STAT_RX_VL_NUMBER_1 : out std_logic_vector(4 downto 0);
     STAT_RX_VL_NUMBER_10 : out std_logic_vector(4 downto 0);
     STAT_RX_VL_NUMBER_11 : out std_logic_vector(4 downto 0);
     STAT_RX_VL_NUMBER_12 : out std_logic_vector(4 downto 0);
     STAT_RX_VL_NUMBER_13 : out std_logic_vector(4 downto 0);
     STAT_RX_VL_NUMBER_14 : out std_logic_vector(4 downto 0);
     STAT_RX_VL_NUMBER_15 : out std_logic_vector(4 downto 0);
     STAT_RX_VL_NUMBER_16 : out std_logic_vector(4 downto 0);
     STAT_RX_VL_NUMBER_17 : out std_logic_vector(4 downto 0);
     STAT_RX_VL_NUMBER_18 : out std_logic_vector(4 downto 0);
     STAT_RX_VL_NUMBER_19 : out std_logic_vector(4 downto 0);
     STAT_RX_VL_NUMBER_2 : out std_logic_vector(4 downto 0);
     STAT_RX_VL_NUMBER_3 : out std_logic_vector(4 downto 0);
     STAT_RX_VL_NUMBER_4 : out std_logic_vector(4 downto 0);
     STAT_RX_VL_NUMBER_5 : out std_logic_vector(4 downto 0);
     STAT_RX_VL_NUMBER_6 : out std_logic_vector(4 downto 0);
     STAT_RX_VL_NUMBER_7 : out std_logic_vector(4 downto 0);
     STAT_RX_VL_NUMBER_8 : out std_logic_vector(4 downto 0);
     STAT_RX_VL_NUMBER_9 : out std_logic_vector(4 downto 0);
     STAT_TX_BAD_FCS : out std_ulogic;
     STAT_TX_BROADCAST : out std_ulogic;
     STAT_TX_FRAME_ERROR : out std_ulogic;
     STAT_TX_LOCAL_FAULT : out std_ulogic;
     STAT_TX_MULTICAST : out std_ulogic;
     STAT_TX_PACKET_1024_1518_BYTES : out std_ulogic;
     STAT_TX_PACKET_128_255_BYTES : out std_ulogic;
     STAT_TX_PACKET_1519_1522_BYTES : out std_ulogic;
     STAT_TX_PACKET_1523_1548_BYTES : out std_ulogic;
     STAT_TX_PACKET_1549_2047_BYTES : out std_ulogic;
     STAT_TX_PACKET_2048_4095_BYTES : out std_ulogic;
     STAT_TX_PACKET_256_511_BYTES : out std_ulogic;
     STAT_TX_PACKET_4096_8191_BYTES : out std_ulogic;
     STAT_TX_PACKET_512_1023_BYTES : out std_ulogic;
     STAT_TX_PACKET_64_BYTES : out std_ulogic;
     STAT_TX_PACKET_65_127_BYTES : out std_ulogic;
     STAT_TX_PACKET_8192_9215_BYTES : out std_ulogic;
     STAT_TX_PACKET_LARGE : out std_ulogic;
     STAT_TX_PACKET_SMALL : out std_ulogic;
     STAT_TX_PAUSE : out std_ulogic;
     STAT_TX_PAUSE_VALID : out std_logic_vector(8 downto 0);
     STAT_TX_PTP_FIFO_READ_ERROR : out std_ulogic;
     STAT_TX_PTP_FIFO_WRITE_ERROR : out std_ulogic;
     STAT_TX_TOTAL_BYTES : out std_logic_vector(6 downto 0);
     STAT_TX_TOTAL_GOOD_BYTES : out std_logic_vector(13 downto 0);
     STAT_TX_TOTAL_GOOD_PACKETS : out std_ulogic;
     STAT_TX_TOTAL_PACKETS : out std_ulogic;
     STAT_TX_UNICAST : out std_ulogic;
     STAT_TX_USER_PAUSE : out std_ulogic;
     STAT_TX_VLAN : out std_ulogic;
     TX_OVFOUT : out std_ulogic;
     TX_PTP_PCSLANE_OUT : out std_logic_vector(4 downto 0);
     TX_PTP_TSTAMP_OUT : out std_logic_vector(79 downto 0);
     TX_PTP_TSTAMP_TAG_OUT : out std_logic_vector(15 downto 0);
     TX_PTP_TSTAMP_VALID_OUT : out std_ulogic;
     TX_RDYOUT : out std_ulogic;
     TX_SERDES_ALT_DATA0 : out std_logic_vector(15 downto 0);
     TX_SERDES_ALT_DATA1 : out std_logic_vector(15 downto 0);
     TX_SERDES_ALT_DATA2 : out std_logic_vector(15 downto 0);
     TX_SERDES_ALT_DATA3 : out std_logic_vector(15 downto 0);
     TX_SERDES_DATA0 : out std_logic_vector(63 downto 0);
     TX_SERDES_DATA1 : out std_logic_vector(63 downto 0);
     TX_SERDES_DATA2 : out std_logic_vector(63 downto 0);
     TX_SERDES_DATA3 : out std_logic_vector(63 downto 0);
     TX_SERDES_DATA4 : out std_logic_vector(31 downto 0);
     TX_SERDES_DATA5 : out std_logic_vector(31 downto 0);
     TX_SERDES_DATA6 : out std_logic_vector(31 downto 0);
     TX_SERDES_DATA7 : out std_logic_vector(31 downto 0);
     TX_SERDES_DATA8 : out std_logic_vector(31 downto 0);
     TX_SERDES_DATA9 : out std_logic_vector(31 downto 0);
     TX_UNFOUT : out std_ulogic;
     CTL_CAUI4_MODE : in std_ulogic;
     CTL_RX_CHECK_ETYPE_GCP : in std_ulogic;
     CTL_RX_CHECK_ETYPE_GPP : in std_ulogic;
     CTL_RX_CHECK_ETYPE_PCP : in std_ulogic;
     CTL_RX_CHECK_ETYPE_PPP : in std_ulogic;
     CTL_RX_CHECK_MCAST_GCP : in std_ulogic;
     CTL_RX_CHECK_MCAST_GPP : in std_ulogic;
     CTL_RX_CHECK_MCAST_PCP : in std_ulogic;
     CTL_RX_CHECK_MCAST_PPP : in std_ulogic;
     CTL_RX_CHECK_OPCODE_GCP : in std_ulogic;
     CTL_RX_CHECK_OPCODE_GPP : in std_ulogic;
     CTL_RX_CHECK_OPCODE_PCP : in std_ulogic;
     CTL_RX_CHECK_OPCODE_PPP : in std_ulogic;
     CTL_RX_CHECK_SA_GCP : in std_ulogic;
     CTL_RX_CHECK_SA_GPP : in std_ulogic;
     CTL_RX_CHECK_SA_PCP : in std_ulogic;
     CTL_RX_CHECK_SA_PPP : in std_ulogic;
     CTL_RX_CHECK_UCAST_GCP : in std_ulogic;
     CTL_RX_CHECK_UCAST_GPP : in std_ulogic;
     CTL_RX_CHECK_UCAST_PCP : in std_ulogic;
     CTL_RX_CHECK_UCAST_PPP : in std_ulogic;
     CTL_RX_ENABLE : in std_ulogic;
     CTL_RX_ENABLE_GCP : in std_ulogic;
     CTL_RX_ENABLE_GPP : in std_ulogic;
     CTL_RX_ENABLE_PCP : in std_ulogic;
     CTL_RX_ENABLE_PPP : in std_ulogic;
     CTL_RX_FORCE_RESYNC : in std_ulogic;
     CTL_RX_PAUSE_ACK : in std_logic_vector(8 downto 0);
     CTL_RX_PAUSE_ENABLE : in std_logic_vector(8 downto 0);
     CTL_RX_SYSTEMTIMERIN : in std_logic_vector(79 downto 0);
     CTL_RX_TEST_PATTERN : in std_ulogic;
     CTL_TX_ENABLE : in std_ulogic;
     CTL_TX_LANE0_VLM_BIP7_OVERRIDE : in std_ulogic;
     CTL_TX_LANE0_VLM_BIP7_OVERRIDE_VALUE : in std_logic_vector(7 downto 0);
     CTL_TX_PAUSE_ENABLE : in std_logic_vector(8 downto 0);
     CTL_TX_PAUSE_QUANTA0 : in std_logic_vector(15 downto 0);
     CTL_TX_PAUSE_QUANTA1 : in std_logic_vector(15 downto 0);
     CTL_TX_PAUSE_QUANTA2 : in std_logic_vector(15 downto 0);
     CTL_TX_PAUSE_QUANTA3 : in std_logic_vector(15 downto 0);
     CTL_TX_PAUSE_QUANTA4 : in std_logic_vector(15 downto 0);
     CTL_TX_PAUSE_QUANTA5 : in std_logic_vector(15 downto 0);
     CTL_TX_PAUSE_QUANTA6 : in std_logic_vector(15 downto 0);
     CTL_TX_PAUSE_QUANTA7 : in std_logic_vector(15 downto 0);
     CTL_TX_PAUSE_QUANTA8 : in std_logic_vector(15 downto 0);
     CTL_TX_PAUSE_REFRESH_TIMER0 : in std_logic_vector(15 downto 0);
     CTL_TX_PAUSE_REFRESH_TIMER1 : in std_logic_vector(15 downto 0);
     CTL_TX_PAUSE_REFRESH_TIMER2 : in std_logic_vector(15 downto 0);
     CTL_TX_PAUSE_REFRESH_TIMER3 : in std_logic_vector(15 downto 0);
     CTL_TX_PAUSE_REFRESH_TIMER4 : in std_logic_vector(15 downto 0);
     CTL_TX_PAUSE_REFRESH_TIMER5 : in std_logic_vector(15 downto 0);
     CTL_TX_PAUSE_REFRESH_TIMER6 : in std_logic_vector(15 downto 0);
     CTL_TX_PAUSE_REFRESH_TIMER7 : in std_logic_vector(15 downto 0);
     CTL_TX_PAUSE_REFRESH_TIMER8 : in std_logic_vector(15 downto 0);
     CTL_TX_PAUSE_REQ : in std_logic_vector(8 downto 0);
     CTL_TX_PTP_VLANE_ADJUST_MODE : in std_ulogic;
     CTL_TX_RESEND_PAUSE : in std_ulogic;
     CTL_TX_SEND_IDLE : in std_ulogic;
     CTL_TX_SEND_RFI : in std_ulogic;
     CTL_TX_SYSTEMTIMERIN : in std_logic_vector(79 downto 0);
     CTL_TX_TEST_PATTERN : in std_ulogic;
     DRP_ADDR : in std_logic_vector(9 downto 0);
     DRP_CLK : in std_ulogic;
     DRP_DI : in std_logic_vector(15 downto 0);
     DRP_EN : in std_ulogic;
     DRP_WE : in std_ulogic;
     RX_CLK : in std_ulogic;
     RX_RESET : in std_ulogic;
     RX_SERDES_ALT_DATA0 : in std_logic_vector(15 downto 0);
     RX_SERDES_ALT_DATA1 : in std_logic_vector(15 downto 0);
     RX_SERDES_ALT_DATA2 : in std_logic_vector(15 downto 0);
     RX_SERDES_ALT_DATA3 : in std_logic_vector(15 downto 0);
     RX_SERDES_CLK : in std_logic_vector(9 downto 0);
     RX_SERDES_DATA0 : in std_logic_vector(63 downto 0);
     RX_SERDES_DATA1 : in std_logic_vector(63 downto 0);
     RX_SERDES_DATA2 : in std_logic_vector(63 downto 0);
     RX_SERDES_DATA3 : in std_logic_vector(63 downto 0);
     RX_SERDES_DATA4 : in std_logic_vector(31 downto 0);
     RX_SERDES_DATA5 : in std_logic_vector(31 downto 0);
     RX_SERDES_DATA6 : in std_logic_vector(31 downto 0);
     RX_SERDES_DATA7 : in std_logic_vector(31 downto 0);
     RX_SERDES_DATA8 : in std_logic_vector(31 downto 0);
     RX_SERDES_DATA9 : in std_logic_vector(31 downto 0);
     RX_SERDES_RESET : in std_logic_vector(9 downto 0);
     TX_CLK : in std_ulogic;
     TX_DATAIN0 : in std_logic_vector(127 downto 0);
     TX_DATAIN1 : in std_logic_vector(127 downto 0);
     TX_DATAIN2 : in std_logic_vector(127 downto 0);
     TX_DATAIN3 : in std_logic_vector(127 downto 0);
     TX_ENAIN0 : in std_ulogic;
     TX_ENAIN1 : in std_ulogic;
     TX_ENAIN2 : in std_ulogic;
     TX_ENAIN3 : in std_ulogic;
     TX_EOPIN0 : in std_ulogic;
     TX_EOPIN1 : in std_ulogic;
     TX_EOPIN2 : in std_ulogic;
     TX_EOPIN3 : in std_ulogic;
     TX_ERRIN0 : in std_ulogic;
     TX_ERRIN1 : in std_ulogic;
     TX_ERRIN2 : in std_ulogic;
     TX_ERRIN3 : in std_ulogic;
     TX_MTYIN0 : in std_logic_vector(3 downto 0);
     TX_MTYIN1 : in std_logic_vector(3 downto 0);
     TX_MTYIN2 : in std_logic_vector(3 downto 0);
     TX_MTYIN3 : in std_logic_vector(3 downto 0);
     TX_PTP_1588OP_IN : in std_logic_vector(1 downto 0);
     TX_PTP_CHKSUM_OFFSET_IN : in std_logic_vector(15 downto 0);
     TX_PTP_RXTSTAMP_IN : in std_logic_vector(63 downto 0);
     TX_PTP_TAG_FIELD_IN : in std_logic_vector(15 downto 0);
     TX_PTP_TSTAMP_OFFSET_IN : in std_logic_vector(15 downto 0);
     TX_PTP_UPD_CHKSUM_IN : in std_ulogic;
     TX_RESET : in std_ulogic;
     TX_SOPIN0 : in std_ulogic;
     TX_SOPIN1 : in std_ulogic;
     TX_SOPIN2 : in std_ulogic;
     TX_SOPIN3 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  CMAC : component is "PRIMITIVE";

----- component DCIRESET -----
component DCIRESET
  port (
     LOCKED : out std_ulogic;
     RST : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  DCIRESET : component is "PRIMITIVE";

----- component DCM_ADV -----
component DCM_ADV
  generic (
     CLKDV_DIVIDE : real := 2.0;
     CLKFX_DIVIDE : integer := 1;
     CLKFX_MULTIPLY : integer := 4;
     CLKIN_DIVIDE_BY_2 : boolean := false;
     CLKIN_PERIOD : real := 10.0;
     CLKOUT_PHASE_SHIFT : string := "NONE";
     CLK_FEEDBACK : string := "1X";
     DCM_AUTOCALIBRATION : boolean := true;
     DCM_PERFORMANCE_MODE : string := "MAX_SPEED";
     DESKEW_ADJUST : string := "SYSTEM_SYNCHRONOUS";
     DFS_FREQUENCY_MODE : string := "LOW";
     DLL_FREQUENCY_MODE : string := "LOW";
     DUTY_CYCLE_CORRECTION : boolean := true;
     FACTORY_JF : bit_vector := X"F0F0";
     PHASE_SHIFT : integer := 0;
     SIM_DEVICE : string := "VIRTEX4";
     STARTUP_WAIT : boolean := false
  );
  port (
     CLK0 : out std_ulogic := '0';
     CLK180 : out std_ulogic := '0';
     CLK270 : out std_ulogic := '0';
     CLK2X : out std_ulogic := '0';
     CLK2X180 : out std_ulogic := '0';
     CLK90 : out std_ulogic := '0';
     CLKDV : out std_ulogic := '0';
     CLKFX : out std_ulogic := '0';
     CLKFX180 : out std_ulogic := '0';
     DO : out std_logic_vector(15 downto 0) := "0000000000000000";
     DRDY : out std_ulogic := '0';
     LOCKED : out std_ulogic := '0';
     PSDONE : out std_ulogic := '0';
     CLKFB : in std_ulogic := '0';
     CLKIN : in std_ulogic := '0';
     DADDR : in std_logic_vector(6 downto 0) := "0000000";
     DCLK : in std_ulogic := '0';
     DEN : in std_ulogic := '0';
     DI : in std_logic_vector(15 downto 0) := "0000000000000000";
     DWE : in std_ulogic := '0';
     PSCLK : in std_ulogic := '0';
     PSEN : in std_ulogic := '0';
     PSINCDEC : in std_ulogic := '0';
     RST : in std_ulogic := '0'
  );
end component;
attribute BOX_TYPE of
  DCM_ADV : component is "PRIMITIVE";

----- component DCM_SP -----
component DCM_SP
  generic (
     CLKDV_DIVIDE : real := 2.0;
     CLKFX_DIVIDE : integer := 1;
     CLKFX_MULTIPLY : integer := 4;
     CLKIN_DIVIDE_BY_2 : boolean := false;
     CLKIN_PERIOD : real := 10.0;
     CLKOUT_PHASE_SHIFT : string := "NONE";
     CLK_FEEDBACK : string := "1X";
     DESKEW_ADJUST : string := "SYSTEM_SYNCHRONOUS";
     DFS_FREQUENCY_MODE : string := "LOW";
     DLL_FREQUENCY_MODE : string := "LOW";
     DSS_MODE : string := "NONE";
     DUTY_CYCLE_CORRECTION : boolean := true;
     FACTORY_JF : bit_vector := X"C080";
     PHASE_SHIFT : integer := 0;
     STARTUP_WAIT : boolean := false
  );
  port (
     CLK0 : out std_ulogic := '0';
     CLK180 : out std_ulogic := '0';
     CLK270 : out std_ulogic := '0';
     CLK2X : out std_ulogic := '0';
     CLK2X180 : out std_ulogic := '0';
     CLK90 : out std_ulogic := '0';
     CLKDV : out std_ulogic := '0';
     CLKFX : out std_ulogic := '0';
     CLKFX180 : out std_ulogic := '0';
     LOCKED : out std_ulogic := '0';
     PSDONE : out std_ulogic := '0';
     STATUS : out std_logic_vector(7 downto 0) := "00000000";
     CLKFB : in std_ulogic := '0';
     CLKIN : in std_ulogic := '0';
     DSSEN : in std_ulogic := '0';
     PSCLK : in std_ulogic := '0';
     PSEN : in std_ulogic := '0';
     PSINCDEC : in std_ulogic := '0';
     RST : in std_ulogic := '0'
  );
end component;
attribute BOX_TYPE of
  DCM_SP : component is "PRIMITIVE";

----- component DIFFINBUF -----
component DIFFINBUF
  generic (
     DQS_BIAS : string := "FALSE";
     IBUF_LOW_PWR : boolean := TRUE;
     ISTANDARD : string := "UNUSED";
     SIM_INPUT_BUFFER_OFFSET : integer := 0
  );
  port (
     O : out std_ulogic;
     O_B : out std_ulogic;
     DIFF_IN_N : in std_ulogic;
     DIFF_IN_P : in std_ulogic;
     OSC : in std_logic_vector(3 downto 0);
     OSC_EN : in std_logic_vector(1 downto 0);
     VREF : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  DIFFINBUF : component is "PRIMITIVE";

----- component DNA_PORT -----
component DNA_PORT
  generic (
     SIM_DNA_VALUE : bit_vector := X"000000000000000"
  );
  port (
     DOUT : out std_ulogic;
     CLK : in std_ulogic;
     DIN : in std_ulogic;
     READ : in std_ulogic;
     SHIFT : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  DNA_PORT : component is "PRIMITIVE";

----- component DNA_PORTE2 -----
component DNA_PORTE2
  generic (
     SIM_DNA_VALUE : std_logic_vector(95 downto 0) := X"000000000000000000000000"
  );
  port (
     DOUT : out std_ulogic;
     CLK : in std_ulogic;
     DIN : in std_ulogic;
     READ : in std_ulogic;
     SHIFT : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  DNA_PORTE2 : component is "PRIMITIVE";

----- component DSP48E1 -----
component DSP48E1
  generic (
     ACASCREG : integer := 1;
     ADREG : integer := 1;
     ALUMODEREG : integer := 1;
     AREG : integer := 1;
     AUTORESET_PATDET : string := "NO_RESET";
     A_INPUT : string := "DIRECT";
     BCASCREG : integer := 1;
     BREG : integer := 1;
     B_INPUT : string := "DIRECT";
     CARRYINREG : integer := 1;
     CARRYINSELREG : integer := 1;
     CREG : integer := 1;
     DREG : integer := 1;
     INMODEREG : integer := 1;
     IS_ALUMODE_INVERTED : std_logic_vector (3 downto 0) := "0000";
     IS_CARRYIN_INVERTED : std_ulogic := '0';
     IS_CLK_INVERTED : std_ulogic := '0';
     IS_INMODE_INVERTED : std_logic_vector (4 downto 0) := "00000";
     IS_OPMODE_INVERTED : std_logic_vector (6 downto 0) := "0000000";
     MASK : bit_vector := X"3FFFFFFFFFFF";
     MREG : integer := 1;
     OPMODEREG : integer := 1;
     PATTERN : bit_vector := X"000000000000";
     PREG : integer := 1;
     SEL_MASK : string := "MASK";
     SEL_PATTERN : string := "PATTERN";
     USE_DPORT : boolean := FALSE;
     USE_MULT : string := "MULTIPLY";
     USE_PATTERN_DETECT : string := "NO_PATDET";
     USE_SIMD : string := "ONE48"
  );
  port (
     ACOUT : out std_logic_vector(29 downto 0);
     BCOUT : out std_logic_vector(17 downto 0);
     CARRYCASCOUT : out std_ulogic;
     CARRYOUT : out std_logic_vector(3 downto 0);
     MULTSIGNOUT : out std_ulogic;
     OVERFLOW : out std_ulogic;
     P : out std_logic_vector(47 downto 0);
     PATTERNBDETECT : out std_ulogic;
     PATTERNDETECT : out std_ulogic;
     PCOUT : out std_logic_vector(47 downto 0);
     UNDERFLOW : out std_ulogic;
     A : in std_logic_vector(29 downto 0);
     ACIN : in std_logic_vector(29 downto 0);
     ALUMODE : in std_logic_vector(3 downto 0);
     B : in std_logic_vector(17 downto 0);
     BCIN : in std_logic_vector(17 downto 0);
     C : in std_logic_vector(47 downto 0);
     CARRYCASCIN : in std_ulogic;
     CARRYIN : in std_ulogic;
     CARRYINSEL : in std_logic_vector(2 downto 0);
     CEA1 : in std_ulogic;
     CEA2 : in std_ulogic;
     CEAD : in std_ulogic;
     CEALUMODE : in std_ulogic;
     CEB1 : in std_ulogic;
     CEB2 : in std_ulogic;
     CEC : in std_ulogic;
     CECARRYIN : in std_ulogic;
     CECTRL : in std_ulogic;
     CED : in std_ulogic;
     CEINMODE : in std_ulogic;
     CEM : in std_ulogic;
     CEP : in std_ulogic;
     CLK : in std_ulogic;
     D : in std_logic_vector(24 downto 0);
     INMODE : in std_logic_vector(4 downto 0);
     MULTSIGNIN : in std_ulogic;
     OPMODE : in std_logic_vector(6 downto 0);
     PCIN : in std_logic_vector(47 downto 0);
     RSTA : in std_ulogic;
     RSTALLCARRYIN : in std_ulogic;
     RSTALUMODE : in std_ulogic;
     RSTB : in std_ulogic;
     RSTC : in std_ulogic;
     RSTCTRL : in std_ulogic;
     RSTD : in std_ulogic;
     RSTINMODE : in std_ulogic;
     RSTM : in std_ulogic;
     RSTP : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  DSP48E1 : component is "PRIMITIVE";

----- component DSP48E2 -----
component DSP48E2
  generic (
     ACASCREG : integer := 1;
     ADREG : integer := 1;
     ALUMODEREG : integer := 1;
     AMULTSEL : string := "A";
     AREG : integer := 1;
     AUTORESET_PATDET : string := "NO_RESET";
     AUTORESET_PRIORITY : string := "RESET";
     A_INPUT : string := "DIRECT";
     BCASCREG : integer := 1;
     BMULTSEL : string := "B";
     BREG : integer := 1;
     B_INPUT : string := "DIRECT";
     CARRYINREG : integer := 1;
     CARRYINSELREG : integer := 1;
     CREG : integer := 1;
     DREG : integer := 1;
     INMODEREG : integer := 1;
     IS_ALUMODE_INVERTED : std_logic_vector(3 downto 0) := "0000";
     IS_CARRYIN_INVERTED : std_ulogic := '0';
     IS_CLK_INVERTED : std_ulogic := '0';
     IS_INMODE_INVERTED : std_logic_vector(4 downto 0) := "00000";
     IS_OPMODE_INVERTED : std_logic_vector(8 downto 0) := "000000000";
     IS_RSTALLCARRYIN_INVERTED : std_ulogic := '0';
     IS_RSTALUMODE_INVERTED : std_ulogic := '0';
     IS_RSTA_INVERTED : std_ulogic := '0';
     IS_RSTB_INVERTED : std_ulogic := '0';
     IS_RSTCTRL_INVERTED : std_ulogic := '0';
     IS_RSTC_INVERTED : std_ulogic := '0';
     IS_RSTD_INVERTED : std_ulogic := '0';
     IS_RSTINMODE_INVERTED : std_ulogic := '0';
     IS_RSTM_INVERTED : std_ulogic := '0';
     IS_RSTP_INVERTED : std_ulogic := '0';
     MASK : std_logic_vector(47 downto 0) := X"3FFFFFFFFFFF";
     MREG : integer := 1;
     OPMODEREG : integer := 1;
     PATTERN : std_logic_vector(47 downto 0) := X"000000000000";
     PREADDINSEL : string := "A";
     PREG : integer := 1;
     RND : std_logic_vector(47 downto 0) := X"000000000000";
     SEL_MASK : string := "MASK";
     SEL_PATTERN : string := "PATTERN";
     USE_MULT : string := "MULTIPLY";
     USE_PATTERN_DETECT : string := "NO_PATDET";
     USE_SIMD : string := "ONE48";
     USE_WIDEXOR : string := "FALSE";
     XORSIMD : string := "XOR24_48_96"
  );
  port (
     ACOUT : out std_logic_vector(29 downto 0);
     BCOUT : out std_logic_vector(17 downto 0);
     CARRYCASCOUT : out std_ulogic;
     CARRYOUT : out std_logic_vector(3 downto 0);
     MULTSIGNOUT : out std_ulogic;
     OVERFLOW : out std_ulogic;
     P : out std_logic_vector(47 downto 0);
     PATTERNBDETECT : out std_ulogic;
     PATTERNDETECT : out std_ulogic;
     PCOUT : out std_logic_vector(47 downto 0);
     UNDERFLOW : out std_ulogic;
     XOROUT : out std_logic_vector(7 downto 0);
     A : in std_logic_vector(29 downto 0);
     ACIN : in std_logic_vector(29 downto 0);
     ALUMODE : in std_logic_vector(3 downto 0);
     B : in std_logic_vector(17 downto 0);
     BCIN : in std_logic_vector(17 downto 0);
     C : in std_logic_vector(47 downto 0);
     CARRYCASCIN : in std_ulogic;
     CARRYIN : in std_ulogic;
     CARRYINSEL : in std_logic_vector(2 downto 0);
     CEA1 : in std_ulogic;
     CEA2 : in std_ulogic;
     CEAD : in std_ulogic;
     CEALUMODE : in std_ulogic;
     CEB1 : in std_ulogic;
     CEB2 : in std_ulogic;
     CEC : in std_ulogic;
     CECARRYIN : in std_ulogic;
     CECTRL : in std_ulogic;
     CED : in std_ulogic;
     CEINMODE : in std_ulogic;
     CEM : in std_ulogic;
     CEP : in std_ulogic;
     CLK : in std_ulogic;
     D : in std_logic_vector(26 downto 0);
     INMODE : in std_logic_vector(4 downto 0);
     MULTSIGNIN : in std_ulogic;
     OPMODE : in std_logic_vector(8 downto 0);
     PCIN : in std_logic_vector(47 downto 0);
     RSTA : in std_ulogic;
     RSTALLCARRYIN : in std_ulogic;
     RSTALUMODE : in std_ulogic;
     RSTB : in std_ulogic;
     RSTC : in std_ulogic;
     RSTCTRL : in std_ulogic;
     RSTD : in std_ulogic;
     RSTINMODE : in std_ulogic;
     RSTM : in std_ulogic;
     RSTP : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  DSP48E2 : component is "PRIMITIVE";

----- component DSP_ALU -----
component DSP_ALU
  generic (
     ALUMODEREG : integer := 1;
     CARRYINREG : integer := 1;
     CARRYINSELREG : integer := 1;
     IS_ALUMODE_INVERTED : std_logic_vector(3 downto 0) := "0000";
     IS_CARRYIN_INVERTED : std_ulogic := '0';
     IS_CLK_INVERTED : std_ulogic := '0';
     IS_OPMODE_INVERTED : std_logic_vector(8 downto 0) := "000000000";
     IS_RSTALLCARRYIN_INVERTED : std_ulogic := '0';
     IS_RSTALUMODE_INVERTED : std_ulogic := '0';
     IS_RSTCTRL_INVERTED : std_ulogic := '0';
     MREG : integer := 1;
     OPMODEREG : integer := 1;
     RND : std_logic_vector(47 downto 0) := X"000000000000";
     USE_SIMD : string := "ONE48";
     USE_WIDEXOR : string := "FALSE";
     XORSIMD : string := "XOR24_48_96"
  );
  port (
     ALUMODE10 : out std_ulogic;
     ALU_OUT : out std_logic_vector(47 downto 0);
     COUT : out std_logic_vector(3 downto 0);
     MULTSIGN_ALU : out std_ulogic;
     XOR_MX : out std_logic_vector(7 downto 0);
     ALUMODE : in std_logic_vector(3 downto 0);
     AMULT26 : in std_ulogic;
     A_ALU : in std_logic_vector(29 downto 0);
     BMULT17 : in std_ulogic;
     B_ALU : in std_logic_vector(17 downto 0);
     CARRYCASCIN : in std_ulogic;
     CARRYIN : in std_ulogic;
     CARRYINSEL : in std_logic_vector(2 downto 0);
     CCOUT : in std_ulogic;
     CEALUMODE : in std_ulogic;
     CECARRYIN : in std_ulogic;
     CECTRL : in std_ulogic;
     CEM : in std_ulogic;
     CLK : in std_ulogic;
     C_DATA : in std_logic_vector(47 downto 0);
     MULTSIGNIN : in std_ulogic;
     OPMODE : in std_logic_vector(8 downto 0);
     PCIN : in std_logic_vector(47 downto 0);
     P_FDBK : in std_logic_vector(47 downto 0);
     P_FDBK_47 : in std_ulogic;
     RSTALLCARRYIN : in std_ulogic;
     RSTALUMODE : in std_ulogic;
     RSTCTRL : in std_ulogic;
     U_DATA : in std_logic_vector(44 downto 0);
     V_DATA : in std_logic_vector(44 downto 0)
  );
end component;
attribute BOX_TYPE of
  DSP_ALU : component is "PRIMITIVE";

----- component DSP_A_B_DATA -----
component DSP_A_B_DATA
  generic (
     ACASCREG : integer := 1;
     AREG : integer := 1;
     A_INPUT : string := "DIRECT";
     BCASCREG : integer := 1;
     BREG : integer := 1;
     B_INPUT : string := "DIRECT";
     IS_CLK_INVERTED : std_ulogic := '0';
     IS_RSTA_INVERTED : std_ulogic := '0';
     IS_RSTB_INVERTED : std_ulogic := '0'
  );
  port (
     A1_DATA : out std_logic_vector(26 downto 0);
     A2_DATA : out std_logic_vector(26 downto 0);
     ACOUT : out std_logic_vector(29 downto 0);
     A_ALU : out std_logic_vector(29 downto 0);
     B1_DATA : out std_logic_vector(17 downto 0);
     B2_DATA : out std_logic_vector(17 downto 0);
     BCOUT : out std_logic_vector(17 downto 0);
     B_ALU : out std_logic_vector(17 downto 0);
     A : in std_logic_vector(29 downto 0);
     ACIN : in std_logic_vector(29 downto 0);
     B : in std_logic_vector(17 downto 0);
     BCIN : in std_logic_vector(17 downto 0);
     CEA1 : in std_ulogic;
     CEA2 : in std_ulogic;
     CEB1 : in std_ulogic;
     CEB2 : in std_ulogic;
     CLK : in std_ulogic;
     RSTA : in std_ulogic;
     RSTB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  DSP_A_B_DATA : component is "PRIMITIVE";

----- component DSP_C_DATA -----
component DSP_C_DATA
  generic (
     CREG : integer := 1;
     IS_CLK_INVERTED : std_ulogic := '0';
     IS_RSTC_INVERTED : std_ulogic := '0'
  );
  port (
     C_DATA : out std_logic_vector(47 downto 0);
     C : in std_logic_vector(47 downto 0);
     CEC : in std_ulogic;
     CLK : in std_ulogic;
     RSTC : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  DSP_C_DATA : component is "PRIMITIVE";

----- component DSP_MULTIPLIER -----
component DSP_MULTIPLIER
  generic (
     AMULTSEL : string := "A";
     BMULTSEL : string := "B";
     USE_MULT : string := "MULTIPLY"
  );
  port (
     AMULT26 : out std_ulogic;
     BMULT17 : out std_ulogic;
     U : out std_logic_vector(44 downto 0);
     V : out std_logic_vector(44 downto 0);
     A2A1 : in std_logic_vector(26 downto 0);
     AD_DATA : in std_logic_vector(26 downto 0);
     B2B1 : in std_logic_vector(17 downto 0)
  );
end component;
attribute BOX_TYPE of
  DSP_MULTIPLIER : component is "PRIMITIVE";

----- component DSP_M_DATA -----
component DSP_M_DATA
  generic (
     IS_CLK_INVERTED : std_ulogic := '0';
     IS_RSTM_INVERTED : std_ulogic := '0';
     MREG : integer := 1
  );
  port (
     U_DATA : out std_logic_vector(44 downto 0);
     V_DATA : out std_logic_vector(44 downto 0);
     CEM : in std_ulogic;
     CLK : in std_ulogic;
     RSTM : in std_ulogic;
     U : in std_logic_vector(44 downto 0);
     V : in std_logic_vector(44 downto 0)
  );
end component;
attribute BOX_TYPE of
  DSP_M_DATA : component is "PRIMITIVE";

----- component DSP_OUTPUT -----
component DSP_OUTPUT
  generic (
     AUTORESET_PATDET : string := "NO_RESET";
     AUTORESET_PRIORITY : string := "RESET";
     IS_CLK_INVERTED : std_ulogic := '0';
     IS_RSTP_INVERTED : std_ulogic := '0';
     MASK : std_logic_vector(47 downto 0) := X"3FFFFFFFFFFF";
     PATTERN : std_logic_vector(47 downto 0) := X"000000000000";
     PREG : integer := 1;
     SEL_MASK : string := "MASK";
     SEL_PATTERN : string := "PATTERN";
     USE_PATTERN_DETECT : string := "NO_PATDET"
  );
  port (
     CARRYCASCOUT : out std_ulogic;
     CARRYOUT : out std_logic_vector(3 downto 0);
     CCOUT_FB : out std_ulogic;
     MULTSIGNOUT : out std_ulogic;
     OVERFLOW : out std_ulogic;
     P : out std_logic_vector(47 downto 0);
     PATTERN_B_DETECT : out std_ulogic;
     PATTERN_DETECT : out std_ulogic;
     PCOUT : out std_logic_vector(47 downto 0);
     P_FDBK : out std_logic_vector(47 downto 0);
     P_FDBK_47 : out std_ulogic;
     UNDERFLOW : out std_ulogic;
     XOROUT : out std_logic_vector(7 downto 0);
     ALUMODE10 : in std_ulogic;
     ALU_OUT : in std_logic_vector(47 downto 0);
     CEP : in std_ulogic;
     CLK : in std_ulogic;
     COUT : in std_logic_vector(3 downto 0);
     C_DATA : in std_logic_vector(47 downto 0);
     MULTSIGN_ALU : in std_ulogic;
     RSTP : in std_ulogic;
     XOR_MX : in std_logic_vector(7 downto 0)
  );
end component;
attribute BOX_TYPE of
  DSP_OUTPUT : component is "PRIMITIVE";

----- component DSP_PREADD -----
component DSP_PREADD
  port (
     AD : out std_logic_vector(26 downto 0);
     ADDSUB : in std_ulogic;
     D_DATA : in std_logic_vector(26 downto 0);
     INMODE2 : in std_ulogic;
     PREADD_AB : in std_logic_vector(26 downto 0)
  );
end component;
attribute BOX_TYPE of
  DSP_PREADD : component is "PRIMITIVE";

----- component DSP_PREADD_DATA -----
component DSP_PREADD_DATA
  generic (
     ADREG : integer := 1;
     AMULTSEL : string := "A";
     BMULTSEL : string := "B";
     DREG : integer := 1;
     INMODEREG : integer := 1;
     IS_CLK_INVERTED : std_ulogic := '0';
     IS_INMODE_INVERTED : std_logic_vector(4 downto 0) := "00000";
     IS_RSTD_INVERTED : std_ulogic := '0';
     IS_RSTINMODE_INVERTED : std_ulogic := '0';
     PREADDINSEL : string := "A";
     USE_MULT : string := "MULTIPLY"
  );
  port (
     A2A1 : out std_logic_vector(26 downto 0);
     ADDSUB : out std_ulogic;
     AD_DATA : out std_logic_vector(26 downto 0);
     B2B1 : out std_logic_vector(17 downto 0);
     D_DATA : out std_logic_vector(26 downto 0);
     INMODE_2 : out std_ulogic;
     PREADD_AB : out std_logic_vector(26 downto 0);
     A1_DATA : in std_logic_vector(26 downto 0);
     A2_DATA : in std_logic_vector(26 downto 0);
     AD : in std_logic_vector(26 downto 0);
     B1_DATA : in std_logic_vector(17 downto 0);
     B2_DATA : in std_logic_vector(17 downto 0);
     CEAD : in std_ulogic;
     CED : in std_ulogic;
     CEINMODE : in std_ulogic;
     CLK : in std_ulogic;
     DIN : in std_logic_vector(26 downto 0);
     INMODE : in std_logic_vector(4 downto 0);
     RSTD : in std_ulogic;
     RSTINMODE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  DSP_PREADD_DATA : component is "PRIMITIVE";

----- component EFUSE_USR -----
component EFUSE_USR
  generic (
     SIM_EFUSE_VALUE : bit_vector := X"00000000"
  );
  port (
     EFUSEUSR : out std_logic_vector(31 downto 0)
  );
end component;
attribute BOX_TYPE of
  EFUSE_USR : component is "PRIMITIVE";

----- component FDCE -----
component FDCE
  generic (
     INIT : bit := '0';
     IS_CLR_INVERTED : std_ulogic := '0';
     IS_C_INVERTED : std_ulogic := '0';
     IS_D_INVERTED : std_ulogic := '0'
  );
  port (
     Q : out std_ulogic;
     C : in std_ulogic;
     CE : in std_ulogic;
     CLR : in std_ulogic;
     D : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  FDCE : component is "PRIMITIVE";

----- component FDPE -----
component FDPE
  generic (
     INIT : bit := '1';
     IS_C_INVERTED : std_ulogic := '0';
     IS_D_INVERTED : std_ulogic := '0';
     IS_PRE_INVERTED : std_ulogic := '0'
  );
  port (
     Q : out std_ulogic;
     C : in std_ulogic;
     CE : in std_ulogic;
     D : in std_ulogic;
     PRE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  FDPE : component is "PRIMITIVE";

----- component FDRE -----
component FDRE
  generic (
     INIT : bit := '0';
     IS_C_INVERTED : std_ulogic := '0';
     IS_D_INVERTED : std_ulogic := '0';
     IS_R_INVERTED : std_ulogic := '0'
  );
  port (
     Q : out std_ulogic;
     C : in std_ulogic;
     CE : in std_ulogic;
     D : in std_ulogic;
     R : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  FDRE : component is "PRIMITIVE";

----- component FDSE -----
component FDSE
  generic (
     INIT : bit := '1';
     IS_C_INVERTED : std_ulogic := '0';
     IS_D_INVERTED : std_ulogic := '0';
     IS_S_INVERTED : std_ulogic := '0'
  );
  port (
     Q : out std_ulogic;
     C : in std_ulogic;
     CE : in std_ulogic;
     D : in std_ulogic;
     S : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  FDSE : component is "PRIMITIVE";

----- component FIFO18E1 -----
component FIFO18E1
  generic (
     ALMOST_EMPTY_OFFSET : bit_vector := X"0080";
     ALMOST_FULL_OFFSET : bit_vector := X"0080";
     DATA_WIDTH : integer := 4;
     DO_REG : integer := 1;
     EN_SYN : boolean := FALSE;
     FIFO_MODE : string := "FIFO18";
     FIRST_WORD_FALL_THROUGH : boolean := FALSE;
     INIT : bit_vector := X"000000000";
     IS_RDCLK_INVERTED : std_ulogic := '0';
     IS_RDEN_INVERTED : std_ulogic := '0';
     IS_RSTREG_INVERTED : std_ulogic := '0';
     IS_RST_INVERTED : std_ulogic := '0';
     IS_WRCLK_INVERTED : std_ulogic := '0';
     IS_WREN_INVERTED : std_ulogic := '0';
     SIM_DEVICE : string := "VIRTEX6";
     SRVAL : bit_vector := X"000000000"
  );
  port (
     ALMOSTEMPTY : out std_ulogic;
     ALMOSTFULL : out std_ulogic;
     DO : out std_logic_vector (31 downto 0);
     DOP : out std_logic_vector (3 downto 0);
     EMPTY : out std_ulogic;
     FULL : out std_ulogic;
     RDCOUNT : out std_logic_vector (11 downto 0);
     RDERR : out std_ulogic;
     WRCOUNT : out std_logic_vector (11 downto 0);
     WRERR : out std_ulogic;
     DI : in std_logic_vector (31 downto 0);
     DIP : in std_logic_vector (3 downto 0);
     RDCLK : in std_ulogic;
     RDEN : in std_ulogic;
     REGCE : in std_ulogic;
     RST : in std_ulogic;
     RSTREG : in std_ulogic;
     WRCLK : in std_ulogic;
     WREN : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  FIFO18E1 : component is "PRIMITIVE";

----- component FIFO18E2 -----
component FIFO18E2
  generic (
     CASCADE_ORDER : string := "NONE";
     CLOCK_DOMAINS : string := "INDEPENDENT";
     FIRST_WORD_FALL_THROUGH : string := "FALSE";
     INIT : std_logic_vector (35 downto 0) := X"000000000";
     IS_RDCLK_INVERTED : std_ulogic := '0';
     IS_RDEN_INVERTED : std_ulogic := '0';
     IS_RSTREG_INVERTED : std_ulogic := '0';
     IS_RST_INVERTED : std_ulogic := '0';
     IS_WRCLK_INVERTED : std_ulogic := '0';
     IS_WREN_INVERTED : std_ulogic := '0';
     PROG_EMPTY_THRESH : integer := 256;
     PROG_FULL_THRESH : integer := 256;
     RDCOUNT_TYPE : string := "RAW_PNTR";
     READ_WIDTH : integer := 4;
     REGISTER_MODE : string := "UNREGISTERED";
     RSTREG_PRIORITY : string := "RSTREG";
     SLEEP_ASYNC : string := "FALSE";
     SRVAL : std_logic_vector (35 downto 0) := X"000000000";
     WRCOUNT_TYPE : string := "RAW_PNTR";
     WRITE_WIDTH : integer := 4
  );
  port (
     CASDOUT : out std_logic_vector(31 downto 0);
     CASDOUTP : out std_logic_vector(3 downto 0);
     CASNXTEMPTY : out std_ulogic;
     CASPRVRDEN : out std_ulogic;
     DOUT : out std_logic_vector(31 downto 0);
     DOUTP : out std_logic_vector(3 downto 0);
     EMPTY : out std_ulogic;
     FULL : out std_ulogic;
     PROGEMPTY : out std_ulogic;
     PROGFULL : out std_ulogic;
     RDCOUNT : out std_logic_vector(12 downto 0);
     RDERR : out std_ulogic;
     RDRSTBUSY : out std_ulogic;
     WRCOUNT : out std_logic_vector(12 downto 0);
     WRERR : out std_ulogic;
     WRRSTBUSY : out std_ulogic;
     CASDIN : in std_logic_vector(31 downto 0);
     CASDINP : in std_logic_vector(3 downto 0);
     CASDOMUX : in std_ulogic;
     CASDOMUXEN : in std_ulogic;
     CASNXTRDEN : in std_ulogic;
     CASOREGIMUX : in std_ulogic;
     CASOREGIMUXEN : in std_ulogic;
     CASPRVEMPTY : in std_ulogic;
     DIN : in std_logic_vector(31 downto 0);
     DINP : in std_logic_vector(3 downto 0);
     RDCLK : in std_ulogic;
     RDEN : in std_ulogic;
     REGCE : in std_ulogic;
     RST : in std_ulogic;
     RSTREG : in std_ulogic;
     SLEEP : in std_ulogic;
     WRCLK : in std_ulogic;
     WREN : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  FIFO18E2 : component is "PRIMITIVE";

----- component FIFO36E1 -----
component FIFO36E1
  generic (
     ALMOST_EMPTY_OFFSET : bit_vector := X"0080";
     ALMOST_FULL_OFFSET : bit_vector := X"0080";
     DATA_WIDTH : integer := 4;
     DO_REG : integer := 1;
     EN_ECC_READ : boolean := FALSE;
     EN_ECC_WRITE : boolean := FALSE;
     EN_SYN : boolean := FALSE;
     FIFO_MODE : string := "FIFO36";
     FIRST_WORD_FALL_THROUGH : boolean := FALSE;
     INIT : bit_vector := X"000000000000000000";
     IS_RDCLK_INVERTED : std_ulogic := '0';
     IS_RDEN_INVERTED : std_ulogic := '0';
     IS_RSTREG_INVERTED : std_ulogic := '0';
     IS_RST_INVERTED : std_ulogic := '0';
     IS_WRCLK_INVERTED : std_ulogic := '0';
     IS_WREN_INVERTED : std_ulogic := '0';
     SIM_DEVICE : string := "VIRTEX6";
     SRVAL : bit_vector := X"000000000000000000"
  );
  port (
     ALMOSTEMPTY : out std_ulogic;
     ALMOSTFULL : out std_ulogic;
     DBITERR : out std_ulogic;
     DO : out std_logic_vector (63 downto 0);
     DOP : out std_logic_vector (7 downto 0);
     ECCPARITY : out std_logic_vector (7 downto 0);
     EMPTY : out std_ulogic;
     FULL : out std_ulogic;
     RDCOUNT : out std_logic_vector (12 downto 0);
     RDERR : out std_ulogic;
     SBITERR : out std_ulogic;
     WRCOUNT : out std_logic_vector (12 downto 0);
     WRERR : out std_ulogic;
     DI : in std_logic_vector (63 downto 0);
     DIP : in std_logic_vector (7 downto 0);
     INJECTDBITERR : in std_ulogic;
     INJECTSBITERR : in std_ulogic;
     RDCLK : in std_ulogic;
     RDEN : in std_ulogic;
     REGCE : in std_ulogic;
     RST : in std_ulogic;
     RSTREG : in std_ulogic;
     WRCLK : in std_ulogic;
     WREN : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  FIFO36E1 : component is "PRIMITIVE";

----- component FIFO36E2 -----
component FIFO36E2
  generic (
     CASCADE_ORDER : string := "NONE";
     CLOCK_DOMAINS : string := "INDEPENDENT";
     EN_ECC_PIPE : string := "FALSE";
     EN_ECC_READ : string := "FALSE";
     EN_ECC_WRITE : string := "FALSE";
     FIRST_WORD_FALL_THROUGH : string := "FALSE";
     INIT : std_logic_vector (71 downto 0) := X"000000000000000000";
     IS_RDCLK_INVERTED : std_ulogic := '0';
     IS_RDEN_INVERTED : std_ulogic := '0';
     IS_RSTREG_INVERTED : std_ulogic := '0';
     IS_RST_INVERTED : std_ulogic := '0';
     IS_WRCLK_INVERTED : std_ulogic := '0';
     IS_WREN_INVERTED : std_ulogic := '0';
     PROG_EMPTY_THRESH : integer := 256;
     PROG_FULL_THRESH : integer := 256;
     RDCOUNT_TYPE : string := "RAW_PNTR";
     READ_WIDTH : integer := 4;
     REGISTER_MODE : string := "UNREGISTERED";
     RSTREG_PRIORITY : string := "RSTREG";
     SLEEP_ASYNC : string := "FALSE";
     SRVAL : std_logic_vector (71 downto 0) := X"000000000000000000";
     WRCOUNT_TYPE : string := "RAW_PNTR";
     WRITE_WIDTH : integer := 4
  );
  port (
     CASDOUT : out std_logic_vector(63 downto 0);
     CASDOUTP : out std_logic_vector(7 downto 0);
     CASNXTEMPTY : out std_ulogic;
     CASPRVRDEN : out std_ulogic;
     DBITERR : out std_ulogic;
     DOUT : out std_logic_vector(63 downto 0);
     DOUTP : out std_logic_vector(7 downto 0);
     ECCPARITY : out std_logic_vector(7 downto 0);
     EMPTY : out std_ulogic;
     FULL : out std_ulogic;
     PROGEMPTY : out std_ulogic;
     PROGFULL : out std_ulogic;
     RDCOUNT : out std_logic_vector(13 downto 0);
     RDERR : out std_ulogic;
     RDRSTBUSY : out std_ulogic;
     SBITERR : out std_ulogic;
     WRCOUNT : out std_logic_vector(13 downto 0);
     WRERR : out std_ulogic;
     WRRSTBUSY : out std_ulogic;
     CASDIN : in std_logic_vector(63 downto 0);
     CASDINP : in std_logic_vector(7 downto 0);
     CASDOMUX : in std_ulogic;
     CASDOMUXEN : in std_ulogic;
     CASNXTRDEN : in std_ulogic;
     CASOREGIMUX : in std_ulogic;
     CASOREGIMUXEN : in std_ulogic;
     CASPRVEMPTY : in std_ulogic;
     DIN : in std_logic_vector(63 downto 0);
     DINP : in std_logic_vector(7 downto 0);
     INJECTDBITERR : in std_ulogic;
     INJECTSBITERR : in std_ulogic;
     RDCLK : in std_ulogic;
     RDEN : in std_ulogic;
     REGCE : in std_ulogic;
     RST : in std_ulogic;
     RSTREG : in std_ulogic;
     SLEEP : in std_ulogic;
     WRCLK : in std_ulogic;
     WREN : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  FIFO36E2 : component is "PRIMITIVE";

----- component FRAME_ECCE2 -----
component FRAME_ECCE2
  generic (
     FARSRC : string:= "EFAR";
     FRAME_RBT_IN_FILENAME : string := "NONE"
  );
  port (
     CRCERROR : out std_ulogic;
     ECCERROR : out std_ulogic;
     ECCERRORSINGLE : out std_ulogic;
     FAR : out std_logic_vector(25 downto 0);
     SYNBIT : out std_logic_vector(4 downto 0);
     SYNDROME : out std_logic_vector(12 downto 0);
     SYNDROMEVALID : out std_ulogic;
     SYNWORD : out std_logic_vector(6 downto 0)
  );
end component;
attribute BOX_TYPE of
  FRAME_ECCE2 : component is "PRIMITIVE";

----- component FRAME_ECCE3 -----
component FRAME_ECCE3
  port (
     CRCERROR : out std_ulogic;
     ECCERRORNOTSINGLE : out std_ulogic;
     ECCERRORSINGLE : out std_ulogic;
     ENDOFFRAME : out std_ulogic;
     ENDOFSCAN : out std_ulogic;
     FAR : out std_logic_vector(25 downto 0);
     FARSEL : in std_logic_vector(1 downto 0);
     ICAPBOTCLK : in std_ulogic;
     ICAPTOPCLK : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  FRAME_ECCE3 : component is "PRIMITIVE";

----- component GLBL_VHD -----
component GLBL_VHD
  generic (
     ROC_WIDTH : integer := 100000;
     TOC_WIDTH : integer := 0
  );
end component;
attribute BOX_TYPE of
  GLBL_VHD : component is "PRIMITIVE";

----- component GND -----
component GND
  port (
     G : out std_ulogic := '0'
  );
end component;
attribute BOX_TYPE of
  GND : component is "PRIMITIVE";

----- component GTHE2_CHANNEL -----
component GTHE2_CHANNEL
  generic (
     ACJTAG_DEBUG_MODE : bit := '0';
     ACJTAG_MODE : bit := '0';
     ACJTAG_RESET : bit := '0';
     ADAPT_CFG0 : bit_vector := X"00C10";
     ALIGN_COMMA_DOUBLE : string := "FALSE";
     ALIGN_COMMA_ENABLE : bit_vector := "0001111111";
     ALIGN_COMMA_WORD : integer := 1;
     ALIGN_MCOMMA_DET : string := "TRUE";
     ALIGN_MCOMMA_VALUE : bit_vector := "1010000011";
     ALIGN_PCOMMA_DET : string := "TRUE";
     ALIGN_PCOMMA_VALUE : bit_vector := "0101111100";
     A_RXOSCALRESET : bit := '0';
     CBCC_DATA_SOURCE_SEL : string := "DECODED";
     CFOK_CFG : bit_vector := X"24800040E80";
     CFOK_CFG2 : bit_vector := "100000";
     CFOK_CFG3 : bit_vector := "100000";
     CHAN_BOND_KEEP_ALIGN : string := "FALSE";
     CHAN_BOND_MAX_SKEW : integer := 7;
     CHAN_BOND_SEQ_1_1 : bit_vector := "0101111100";
     CHAN_BOND_SEQ_1_2 : bit_vector := "0000000000";
     CHAN_BOND_SEQ_1_3 : bit_vector := "0000000000";
     CHAN_BOND_SEQ_1_4 : bit_vector := "0000000000";
     CHAN_BOND_SEQ_1_ENABLE : bit_vector := "1111";
     CHAN_BOND_SEQ_2_1 : bit_vector := "0100000000";
     CHAN_BOND_SEQ_2_2 : bit_vector := "0100000000";
     CHAN_BOND_SEQ_2_3 : bit_vector := "0100000000";
     CHAN_BOND_SEQ_2_4 : bit_vector := "0100000000";
     CHAN_BOND_SEQ_2_ENABLE : bit_vector := "1111";
     CHAN_BOND_SEQ_2_USE : string := "FALSE";
     CHAN_BOND_SEQ_LEN : integer := 1;
     CLK_CORRECT_USE : string := "TRUE";
     CLK_COR_KEEP_IDLE : string := "FALSE";
     CLK_COR_MAX_LAT : integer := 20;
     CLK_COR_MIN_LAT : integer := 18;
     CLK_COR_PRECEDENCE : string := "TRUE";
     CLK_COR_REPEAT_WAIT : integer := 0;
     CLK_COR_SEQ_1_1 : bit_vector := "0100011100";
     CLK_COR_SEQ_1_2 : bit_vector := "0000000000";
     CLK_COR_SEQ_1_3 : bit_vector := "0000000000";
     CLK_COR_SEQ_1_4 : bit_vector := "0000000000";
     CLK_COR_SEQ_1_ENABLE : bit_vector := "1111";
     CLK_COR_SEQ_2_1 : bit_vector := "0100000000";
     CLK_COR_SEQ_2_2 : bit_vector := "0100000000";
     CLK_COR_SEQ_2_3 : bit_vector := "0100000000";
     CLK_COR_SEQ_2_4 : bit_vector := "0100000000";
     CLK_COR_SEQ_2_ENABLE : bit_vector := "1111";
     CLK_COR_SEQ_2_USE : string := "FALSE";
     CLK_COR_SEQ_LEN : integer := 1;
     CPLL_CFG : bit_vector := X"00BC07DC";
     CPLL_FBDIV : integer := 4;
     CPLL_FBDIV_45 : integer := 5;
     CPLL_INIT_CFG : bit_vector := X"00001E";
     CPLL_LOCK_CFG : bit_vector := X"01E8";
     CPLL_REFCLK_DIV : integer := 1;
     DEC_MCOMMA_DETECT : string := "TRUE";
     DEC_PCOMMA_DETECT : string := "TRUE";
     DEC_VALID_COMMA_ONLY : string := "TRUE";
     DMONITOR_CFG : bit_vector := X"000A00";
     ES_CLK_PHASE_SEL : bit := '0';
     ES_CONTROL : bit_vector := "000000";
     ES_ERRDET_EN : string := "FALSE";
     ES_EYE_SCAN_EN : string := "TRUE";
     ES_HORZ_OFFSET : bit_vector := X"000";
     ES_PMA_CFG : bit_vector := "0000000000";
     ES_PRESCALE : bit_vector := "00000";
     ES_QUALIFIER : bit_vector := X"00000000000000000000";
     ES_QUAL_MASK : bit_vector := X"00000000000000000000";
     ES_SDATA_MASK : bit_vector := X"00000000000000000000";
     ES_VERT_OFFSET : bit_vector := "000000000";
     FTS_DESKEW_SEQ_ENABLE : bit_vector := "1111";
     FTS_LANE_DESKEW_CFG : bit_vector := "1111";
     FTS_LANE_DESKEW_EN : string := "FALSE";
     GEARBOX_MODE : bit_vector := "000";
     IS_CLKRSVD0_INVERTED : std_ulogic := '0';
     IS_CLKRSVD1_INVERTED : std_ulogic := '0';
     IS_CPLLLOCKDETCLK_INVERTED : std_ulogic := '0';
     IS_DMONITORCLK_INVERTED : std_ulogic := '0';
     IS_DRPCLK_INVERTED : std_ulogic := '0';
     IS_GTGREFCLK_INVERTED : std_ulogic := '0';
     IS_RXUSRCLK2_INVERTED : std_ulogic := '0';
     IS_RXUSRCLK_INVERTED : std_ulogic := '0';
     IS_SIGVALIDCLK_INVERTED : std_ulogic := '0';
     IS_TXPHDLYTSTCLK_INVERTED : std_ulogic := '0';
     IS_TXUSRCLK2_INVERTED : std_ulogic := '0';
     IS_TXUSRCLK_INVERTED : std_ulogic := '0';
     LOOPBACK_CFG : bit := '0';
     OUTREFCLK_SEL_INV : bit_vector := "11";
     PCS_PCIE_EN : string := "FALSE";
     PCS_RSVD_ATTR : bit_vector := X"000000000000";
     PD_TRANS_TIME_FROM_P2 : bit_vector := X"03C";
     PD_TRANS_TIME_NONE_P2 : bit_vector := X"19";
     PD_TRANS_TIME_TO_P2 : bit_vector := X"64";
     PMA_RSV : bit_vector := "00000000000000000000000010000000";
     PMA_RSV2 : bit_vector := "00011100000000000000000000001010";
     PMA_RSV3 : bit_vector := "00";
     PMA_RSV4 : bit_vector := "000000000001000";
     PMA_RSV5 : bit_vector := "0000";
     RESET_POWERSAVE_DISABLE : bit := '0';
     RXBUFRESET_TIME : bit_vector := "00001";
     RXBUF_ADDR_MODE : string := "FULL";
     RXBUF_EIDLE_HI_CNT : bit_vector := "1000";
     RXBUF_EIDLE_LO_CNT : bit_vector := "0000";
     RXBUF_EN : string := "TRUE";
     RXBUF_RESET_ON_CB_CHANGE : string := "TRUE";
     RXBUF_RESET_ON_COMMAALIGN : string := "FALSE";
     RXBUF_RESET_ON_EIDLE : string := "FALSE";
     RXBUF_RESET_ON_RATE_CHANGE : string := "TRUE";
     RXBUF_THRESH_OVFLW : integer := 61;
     RXBUF_THRESH_OVRD : string := "FALSE";
     RXBUF_THRESH_UNDFLW : integer := 4;
     RXCDRFREQRESET_TIME : bit_vector := "00001";
     RXCDRPHRESET_TIME : bit_vector := "00001";
     RXCDR_CFG : bit_vector := X"0002007FE2000C208001A";
     RXCDR_FR_RESET_ON_EIDLE : bit := '0';
     RXCDR_HOLD_DURING_EIDLE : bit := '0';
     RXCDR_LOCK_CFG : bit_vector := "001001";
     RXCDR_PH_RESET_ON_EIDLE : bit := '0';
     RXDFELPMRESET_TIME : bit_vector := "0001111";
     RXDLY_CFG : bit_vector := X"001F";
     RXDLY_LCFG : bit_vector := X"030";
     RXDLY_TAP_CFG : bit_vector := X"0000";
     RXGEARBOX_EN : string := "FALSE";
     RXISCANRESET_TIME : bit_vector := "00001";
     RXLPM_HF_CFG : bit_vector := "00001000000000";
     RXLPM_LF_CFG : bit_vector := "001001000000000000";
     RXOOB_CFG : bit_vector := "0000110";
     RXOOB_CLK_CFG : string := "PMA";
     RXOSCALRESET_TIME : bit_vector := "00011";
     RXOSCALRESET_TIMEOUT : bit_vector := "00000";
     RXOUT_DIV : integer := 2;
     RXPCSRESET_TIME : bit_vector := "00001";
     RXPHDLY_CFG : bit_vector := X"084020";
     RXPH_CFG : bit_vector := X"C00002";
     RXPH_MONITOR_SEL : bit_vector := "00000";
     RXPI_CFG0 : bit_vector := "00";
     RXPI_CFG1 : bit_vector := "00";
     RXPI_CFG2 : bit_vector := "00";
     RXPI_CFG3 : bit_vector := "00";
     RXPI_CFG4 : bit := '0';
     RXPI_CFG5 : bit := '0';
     RXPI_CFG6 : bit_vector := "100";
     RXPMARESET_TIME : bit_vector := "00011";
     RXPRBS_ERR_LOOPBACK : bit := '0';
     RXSLIDE_AUTO_WAIT : integer := 7;
     RXSLIDE_MODE : string := "OFF";
     RXSYNC_MULTILANE : bit := '0';
     RXSYNC_OVRD : bit := '0';
     RXSYNC_SKIP_DA : bit := '0';
     RX_BIAS_CFG : bit_vector := "000011000000000000010000";
     RX_BUFFER_CFG : bit_vector := "000000";
     RX_CLK25_DIV : integer := 7;
     RX_CLKMUX_PD : bit := '1';
     RX_CM_SEL : bit_vector := "11";
     RX_CM_TRIM : bit_vector := "0100";
     RX_DATA_WIDTH : integer := 20;
     RX_DDI_SEL : bit_vector := "000000";
     RX_DEBUG_CFG : bit_vector := "00000000000000";
     RX_DEFER_RESET_BUF_EN : string := "TRUE";
     RX_DFELPM_CFG0 : bit_vector := "0110";
     RX_DFELPM_CFG1 : bit := '0';
     RX_DFELPM_KLKH_AGC_STUP_EN : bit := '1';
     RX_DFE_AGC_CFG0 : bit_vector := "00";
     RX_DFE_AGC_CFG1 : bit_vector := "010";
     RX_DFE_AGC_CFG2 : bit_vector := "0000";
     RX_DFE_AGC_OVRDEN : bit := '1';
     RX_DFE_GAIN_CFG : bit_vector := X"0020C0";
     RX_DFE_H2_CFG : bit_vector := "000000000000";
     RX_DFE_H3_CFG : bit_vector := "000001000000";
     RX_DFE_H4_CFG : bit_vector := "00011100000";
     RX_DFE_H5_CFG : bit_vector := "00011100000";
     RX_DFE_H6_CFG : bit_vector := "00000100000";
     RX_DFE_H7_CFG : bit_vector := "00000100000";
     RX_DFE_KL_CFG : bit_vector := "000000000000000000000001100010000";
     RX_DFE_KL_LPM_KH_CFG0 : bit_vector := "01";
     RX_DFE_KL_LPM_KH_CFG1 : bit_vector := "010";
     RX_DFE_KL_LPM_KH_CFG2 : bit_vector := "0010";
     RX_DFE_KL_LPM_KH_OVRDEN : bit := '1';
     RX_DFE_KL_LPM_KL_CFG0 : bit_vector := "10";
     RX_DFE_KL_LPM_KL_CFG1 : bit_vector := "010";
     RX_DFE_KL_LPM_KL_CFG2 : bit_vector := "0010";
     RX_DFE_KL_LPM_KL_OVRDEN : bit := '1';
     RX_DFE_LPM_CFG : bit_vector := X"0080";
     RX_DFE_LPM_HOLD_DURING_EIDLE : bit := '0';
     RX_DFE_ST_CFG : bit_vector := X"00E100000C003F";
     RX_DFE_UT_CFG : bit_vector := "00011100000000000";
     RX_DFE_VP_CFG : bit_vector := "00011101010100011";
     RX_DISPERR_SEQ_MATCH : string := "TRUE";
     RX_INT_DATAWIDTH : integer := 0;
     RX_OS_CFG : bit_vector := "0000010000000";
     RX_SIG_VALID_DLY : integer := 10;
     RX_XCLK_SEL : string := "RXREC";
     SAS_MAX_COM : integer := 64;
     SAS_MIN_COM : integer := 36;
     SATA_BURST_SEQ_LEN : bit_vector := "1111";
     SATA_BURST_VAL : bit_vector := "100";
     SATA_CPLL_CFG : string := "VCO_3000MHZ";
     SATA_EIDLE_VAL : bit_vector := "100";
     SATA_MAX_BURST : integer := 8;
     SATA_MAX_INIT : integer := 21;
     SATA_MAX_WAKE : integer := 7;
     SATA_MIN_BURST : integer := 4;
     SATA_MIN_INIT : integer := 12;
     SATA_MIN_WAKE : integer := 4;
     SHOW_REALIGN_COMMA : string := "TRUE";
     SIM_CPLLREFCLK_SEL : bit_vector := "001";
     SIM_RECEIVER_DETECT_PASS : string := "TRUE";
     SIM_RESET_SPEEDUP : string := "TRUE";
     SIM_TX_EIDLE_DRIVE_LEVEL : string := "X";
     SIM_VERSION : string := "1.1";
     TERM_RCAL_CFG : bit_vector := "100001000010000";
     TERM_RCAL_OVRD : bit_vector := "000";
     TRANS_TIME_RATE : bit_vector := X"0E";
     TST_RSV : bit_vector := X"00000000";
     TXBUF_EN : string := "TRUE";
     TXBUF_RESET_ON_RATE_CHANGE : string := "FALSE";
     TXDLY_CFG : bit_vector := X"001F";
     TXDLY_LCFG : bit_vector := X"030";
     TXDLY_TAP_CFG : bit_vector := X"0000";
     TXGEARBOX_EN : string := "FALSE";
     TXOOB_CFG : bit := '0';
     TXOUT_DIV : integer := 2;
     TXPCSRESET_TIME : bit_vector := "00001";
     TXPHDLY_CFG : bit_vector := X"084020";
     TXPH_CFG : bit_vector := X"0780";
     TXPH_MONITOR_SEL : bit_vector := "00000";
     TXPI_CFG0 : bit_vector := "00";
     TXPI_CFG1 : bit_vector := "00";
     TXPI_CFG2 : bit_vector := "00";
     TXPI_CFG3 : bit := '0';
     TXPI_CFG4 : bit := '0';
     TXPI_CFG5 : bit_vector := "100";
     TXPI_GREY_SEL : bit := '0';
     TXPI_INVSTROBE_SEL : bit := '0';
     TXPI_PPMCLK_SEL : string := "TXUSRCLK2";
     TXPI_PPM_CFG : bit_vector := "00000000";
     TXPI_SYNFREQ_PPM : bit_vector := "000";
     TXPMARESET_TIME : bit_vector := "00001";
     TXSYNC_MULTILANE : bit := '0';
     TXSYNC_OVRD : bit := '0';
     TXSYNC_SKIP_DA : bit := '0';
     TX_CLK25_DIV : integer := 7;
     TX_CLKMUX_PD : bit := '1';
     TX_DATA_WIDTH : integer := 20;
     TX_DEEMPH0 : bit_vector := "000000";
     TX_DEEMPH1 : bit_vector := "000000";
     TX_DRIVE_MODE : string := "DIRECT";
     TX_EIDLE_ASSERT_DELAY : bit_vector := "110";
     TX_EIDLE_DEASSERT_DELAY : bit_vector := "100";
     TX_INT_DATAWIDTH : integer := 0;
     TX_LOOPBACK_DRIVE_HIZ : string := "FALSE";
     TX_MAINCURSOR_SEL : bit := '0';
     TX_MARGIN_FULL_0 : bit_vector := "1001110";
     TX_MARGIN_FULL_1 : bit_vector := "1001001";
     TX_MARGIN_FULL_2 : bit_vector := "1000101";
     TX_MARGIN_FULL_3 : bit_vector := "1000010";
     TX_MARGIN_FULL_4 : bit_vector := "1000000";
     TX_MARGIN_LOW_0 : bit_vector := "1000110";
     TX_MARGIN_LOW_1 : bit_vector := "1000100";
     TX_MARGIN_LOW_2 : bit_vector := "1000010";
     TX_MARGIN_LOW_3 : bit_vector := "1000000";
     TX_MARGIN_LOW_4 : bit_vector := "1000000";
     TX_QPI_STATUS_EN : bit := '0';
     TX_RXDETECT_CFG : bit_vector := X"1832";
     TX_RXDETECT_PRECHARGE_TIME : bit_vector := X"00000";
     TX_RXDETECT_REF : bit_vector := "100";
     TX_XCLK_SEL : string := "TXUSR";
     UCODEER_CLR : bit := '0';
     USE_PCS_CLK_PHASE_SEL : bit := '0'
  );
  port (
     CPLLFBCLKLOST : out std_ulogic;
     CPLLLOCK : out std_ulogic;
     CPLLREFCLKLOST : out std_ulogic;
     DMONITOROUT : out std_logic_vector(14 downto 0);
     DRPDO : out std_logic_vector(15 downto 0);
     DRPRDY : out std_ulogic;
     EYESCANDATAERROR : out std_ulogic;
     GTHTXN : out std_ulogic;
     GTHTXP : out std_ulogic;
     GTREFCLKMONITOR : out std_ulogic;
     PCSRSVDOUT : out std_logic_vector(15 downto 0);
     PHYSTATUS : out std_ulogic;
     RSOSINTDONE : out std_ulogic;
     RXBUFSTATUS : out std_logic_vector(2 downto 0);
     RXBYTEISALIGNED : out std_ulogic;
     RXBYTEREALIGN : out std_ulogic;
     RXCDRLOCK : out std_ulogic;
     RXCHANBONDSEQ : out std_ulogic;
     RXCHANISALIGNED : out std_ulogic;
     RXCHANREALIGN : out std_ulogic;
     RXCHARISCOMMA : out std_logic_vector(7 downto 0);
     RXCHARISK : out std_logic_vector(7 downto 0);
     RXCHBONDO : out std_logic_vector(4 downto 0);
     RXCLKCORCNT : out std_logic_vector(1 downto 0);
     RXCOMINITDET : out std_ulogic;
     RXCOMMADET : out std_ulogic;
     RXCOMSASDET : out std_ulogic;
     RXCOMWAKEDET : out std_ulogic;
     RXDATA : out std_logic_vector(63 downto 0);
     RXDATAVALID : out std_logic_vector(1 downto 0);
     RXDFESLIDETAPSTARTED : out std_ulogic;
     RXDFESLIDETAPSTROBEDONE : out std_ulogic;
     RXDFESLIDETAPSTROBESTARTED : out std_ulogic;
     RXDFESTADAPTDONE : out std_ulogic;
     RXDISPERR : out std_logic_vector(7 downto 0);
     RXDLYSRESETDONE : out std_ulogic;
     RXELECIDLE : out std_ulogic;
     RXHEADER : out std_logic_vector(5 downto 0);
     RXHEADERVALID : out std_logic_vector(1 downto 0);
     RXMONITOROUT : out std_logic_vector(6 downto 0);
     RXNOTINTABLE : out std_logic_vector(7 downto 0);
     RXOSINTSTARTED : out std_ulogic;
     RXOSINTSTROBEDONE : out std_ulogic;
     RXOSINTSTROBESTARTED : out std_ulogic;
     RXOUTCLK : out std_ulogic;
     RXOUTCLKFABRIC : out std_ulogic;
     RXOUTCLKPCS : out std_ulogic;
     RXPHALIGNDONE : out std_ulogic;
     RXPHMONITOR : out std_logic_vector(4 downto 0);
     RXPHSLIPMONITOR : out std_logic_vector(4 downto 0);
     RXPMARESETDONE : out std_ulogic;
     RXPRBSERR : out std_ulogic;
     RXQPISENN : out std_ulogic;
     RXQPISENP : out std_ulogic;
     RXRATEDONE : out std_ulogic;
     RXRESETDONE : out std_ulogic;
     RXSTARTOFSEQ : out std_logic_vector(1 downto 0);
     RXSTATUS : out std_logic_vector(2 downto 0);
     RXSYNCDONE : out std_ulogic;
     RXSYNCOUT : out std_ulogic;
     RXVALID : out std_ulogic;
     TXBUFSTATUS : out std_logic_vector(1 downto 0);
     TXCOMFINISH : out std_ulogic;
     TXDLYSRESETDONE : out std_ulogic;
     TXGEARBOXREADY : out std_ulogic;
     TXOUTCLK : out std_ulogic;
     TXOUTCLKFABRIC : out std_ulogic;
     TXOUTCLKPCS : out std_ulogic;
     TXPHALIGNDONE : out std_ulogic;
     TXPHINITDONE : out std_ulogic;
     TXPMARESETDONE : out std_ulogic;
     TXQPISENN : out std_ulogic;
     TXQPISENP : out std_ulogic;
     TXRATEDONE : out std_ulogic;
     TXRESETDONE : out std_ulogic;
     TXSYNCDONE : out std_ulogic;
     TXSYNCOUT : out std_ulogic;
     CFGRESET : in std_ulogic;
     CLKRSVD0 : in std_ulogic;
     CLKRSVD1 : in std_ulogic;
     CPLLLOCKDETCLK : in std_ulogic;
     CPLLLOCKEN : in std_ulogic;
     CPLLPD : in std_ulogic;
     CPLLREFCLKSEL : in std_logic_vector(2 downto 0);
     CPLLRESET : in std_ulogic;
     DMONFIFORESET : in std_ulogic;
     DMONITORCLK : in std_ulogic;
     DRPADDR : in std_logic_vector(8 downto 0);
     DRPCLK : in std_ulogic;
     DRPDI : in std_logic_vector(15 downto 0);
     DRPEN : in std_ulogic;
     DRPWE : in std_ulogic;
     EYESCANMODE : in std_ulogic;
     EYESCANRESET : in std_ulogic;
     EYESCANTRIGGER : in std_ulogic;
     GTGREFCLK : in std_ulogic;
     GTHRXN : in std_ulogic;
     GTHRXP : in std_ulogic;
     GTNORTHREFCLK0 : in std_ulogic;
     GTNORTHREFCLK1 : in std_ulogic;
     GTREFCLK0 : in std_ulogic;
     GTREFCLK1 : in std_ulogic;
     GTRESETSEL : in std_ulogic;
     GTRSVD : in std_logic_vector(15 downto 0);
     GTRXRESET : in std_ulogic;
     GTSOUTHREFCLK0 : in std_ulogic;
     GTSOUTHREFCLK1 : in std_ulogic;
     GTTXRESET : in std_ulogic;
     LOOPBACK : in std_logic_vector(2 downto 0);
     PCSRSVDIN : in std_logic_vector(15 downto 0);
     PCSRSVDIN2 : in std_logic_vector(4 downto 0);
     PMARSVDIN : in std_logic_vector(4 downto 0);
     QPLLCLK : in std_ulogic;
     QPLLREFCLK : in std_ulogic;
     RESETOVRD : in std_ulogic;
     RX8B10BEN : in std_ulogic;
     RXADAPTSELTEST : in std_logic_vector(13 downto 0);
     RXBUFRESET : in std_ulogic;
     RXCDRFREQRESET : in std_ulogic;
     RXCDRHOLD : in std_ulogic;
     RXCDROVRDEN : in std_ulogic;
     RXCDRRESET : in std_ulogic;
     RXCDRRESETRSV : in std_ulogic;
     RXCHBONDEN : in std_ulogic;
     RXCHBONDI : in std_logic_vector(4 downto 0);
     RXCHBONDLEVEL : in std_logic_vector(2 downto 0);
     RXCHBONDMASTER : in std_ulogic;
     RXCHBONDSLAVE : in std_ulogic;
     RXCOMMADETEN : in std_ulogic;
     RXDDIEN : in std_ulogic;
     RXDFEAGCHOLD : in std_ulogic;
     RXDFEAGCOVRDEN : in std_ulogic;
     RXDFEAGCTRL : in std_logic_vector(4 downto 0);
     RXDFECM1EN : in std_ulogic;
     RXDFELFHOLD : in std_ulogic;
     RXDFELFOVRDEN : in std_ulogic;
     RXDFELPMRESET : in std_ulogic;
     RXDFESLIDETAP : in std_logic_vector(4 downto 0);
     RXDFESLIDETAPADAPTEN : in std_ulogic;
     RXDFESLIDETAPHOLD : in std_ulogic;
     RXDFESLIDETAPID : in std_logic_vector(5 downto 0);
     RXDFESLIDETAPINITOVRDEN : in std_ulogic;
     RXDFESLIDETAPONLYADAPTEN : in std_ulogic;
     RXDFESLIDETAPOVRDEN : in std_ulogic;
     RXDFESLIDETAPSTROBE : in std_ulogic;
     RXDFETAP2HOLD : in std_ulogic;
     RXDFETAP2OVRDEN : in std_ulogic;
     RXDFETAP3HOLD : in std_ulogic;
     RXDFETAP3OVRDEN : in std_ulogic;
     RXDFETAP4HOLD : in std_ulogic;
     RXDFETAP4OVRDEN : in std_ulogic;
     RXDFETAP5HOLD : in std_ulogic;
     RXDFETAP5OVRDEN : in std_ulogic;
     RXDFETAP6HOLD : in std_ulogic;
     RXDFETAP6OVRDEN : in std_ulogic;
     RXDFETAP7HOLD : in std_ulogic;
     RXDFETAP7OVRDEN : in std_ulogic;
     RXDFEUTHOLD : in std_ulogic;
     RXDFEUTOVRDEN : in std_ulogic;
     RXDFEVPHOLD : in std_ulogic;
     RXDFEVPOVRDEN : in std_ulogic;
     RXDFEVSEN : in std_ulogic;
     RXDFEXYDEN : in std_ulogic;
     RXDLYBYPASS : in std_ulogic;
     RXDLYEN : in std_ulogic;
     RXDLYOVRDEN : in std_ulogic;
     RXDLYSRESET : in std_ulogic;
     RXELECIDLEMODE : in std_logic_vector(1 downto 0);
     RXGEARBOXSLIP : in std_ulogic;
     RXLPMEN : in std_ulogic;
     RXLPMHFHOLD : in std_ulogic;
     RXLPMHFOVRDEN : in std_ulogic;
     RXLPMLFHOLD : in std_ulogic;
     RXLPMLFKLOVRDEN : in std_ulogic;
     RXMCOMMAALIGNEN : in std_ulogic;
     RXMONITORSEL : in std_logic_vector(1 downto 0);
     RXOOBRESET : in std_ulogic;
     RXOSCALRESET : in std_ulogic;
     RXOSHOLD : in std_ulogic;
     RXOSINTCFG : in std_logic_vector(3 downto 0);
     RXOSINTEN : in std_ulogic;
     RXOSINTHOLD : in std_ulogic;
     RXOSINTID0 : in std_logic_vector(3 downto 0);
     RXOSINTNTRLEN : in std_ulogic;
     RXOSINTOVRDEN : in std_ulogic;
     RXOSINTSTROBE : in std_ulogic;
     RXOSINTTESTOVRDEN : in std_ulogic;
     RXOSOVRDEN : in std_ulogic;
     RXOUTCLKSEL : in std_logic_vector(2 downto 0);
     RXPCOMMAALIGNEN : in std_ulogic;
     RXPCSRESET : in std_ulogic;
     RXPD : in std_logic_vector(1 downto 0);
     RXPHALIGN : in std_ulogic;
     RXPHALIGNEN : in std_ulogic;
     RXPHDLYPD : in std_ulogic;
     RXPHDLYRESET : in std_ulogic;
     RXPHOVRDEN : in std_ulogic;
     RXPMARESET : in std_ulogic;
     RXPOLARITY : in std_ulogic;
     RXPRBSCNTRESET : in std_ulogic;
     RXPRBSSEL : in std_logic_vector(2 downto 0);
     RXQPIEN : in std_ulogic;
     RXRATE : in std_logic_vector(2 downto 0);
     RXRATEMODE : in std_ulogic;
     RXSLIDE : in std_ulogic;
     RXSYNCALLIN : in std_ulogic;
     RXSYNCIN : in std_ulogic;
     RXSYNCMODE : in std_ulogic;
     RXSYSCLKSEL : in std_logic_vector(1 downto 0);
     RXUSERRDY : in std_ulogic;
     RXUSRCLK : in std_ulogic;
     RXUSRCLK2 : in std_ulogic;
     SETERRSTATUS : in std_ulogic;
     SIGVALIDCLK : in std_ulogic;
     TSTIN : in std_logic_vector(19 downto 0);
     TX8B10BBYPASS : in std_logic_vector(7 downto 0);
     TX8B10BEN : in std_ulogic;
     TXBUFDIFFCTRL : in std_logic_vector(2 downto 0);
     TXCHARDISPMODE : in std_logic_vector(7 downto 0);
     TXCHARDISPVAL : in std_logic_vector(7 downto 0);
     TXCHARISK : in std_logic_vector(7 downto 0);
     TXCOMINIT : in std_ulogic;
     TXCOMSAS : in std_ulogic;
     TXCOMWAKE : in std_ulogic;
     TXDATA : in std_logic_vector(63 downto 0);
     TXDEEMPH : in std_ulogic;
     TXDETECTRX : in std_ulogic;
     TXDIFFCTRL : in std_logic_vector(3 downto 0);
     TXDIFFPD : in std_ulogic;
     TXDLYBYPASS : in std_ulogic;
     TXDLYEN : in std_ulogic;
     TXDLYHOLD : in std_ulogic;
     TXDLYOVRDEN : in std_ulogic;
     TXDLYSRESET : in std_ulogic;
     TXDLYUPDOWN : in std_ulogic;
     TXELECIDLE : in std_ulogic;
     TXHEADER : in std_logic_vector(2 downto 0);
     TXINHIBIT : in std_ulogic;
     TXMAINCURSOR : in std_logic_vector(6 downto 0);
     TXMARGIN : in std_logic_vector(2 downto 0);
     TXOUTCLKSEL : in std_logic_vector(2 downto 0);
     TXPCSRESET : in std_ulogic;
     TXPD : in std_logic_vector(1 downto 0);
     TXPDELECIDLEMODE : in std_ulogic;
     TXPHALIGN : in std_ulogic;
     TXPHALIGNEN : in std_ulogic;
     TXPHDLYPD : in std_ulogic;
     TXPHDLYRESET : in std_ulogic;
     TXPHDLYTSTCLK : in std_ulogic;
     TXPHINIT : in std_ulogic;
     TXPHOVRDEN : in std_ulogic;
     TXPIPPMEN : in std_ulogic;
     TXPIPPMOVRDEN : in std_ulogic;
     TXPIPPMPD : in std_ulogic;
     TXPIPPMSEL : in std_ulogic;
     TXPIPPMSTEPSIZE : in std_logic_vector(4 downto 0);
     TXPISOPD : in std_ulogic;
     TXPMARESET : in std_ulogic;
     TXPOLARITY : in std_ulogic;
     TXPOSTCURSOR : in std_logic_vector(4 downto 0);
     TXPOSTCURSORINV : in std_ulogic;
     TXPRBSFORCEERR : in std_ulogic;
     TXPRBSSEL : in std_logic_vector(2 downto 0);
     TXPRECURSOR : in std_logic_vector(4 downto 0);
     TXPRECURSORINV : in std_ulogic;
     TXQPIBIASEN : in std_ulogic;
     TXQPISTRONGPDOWN : in std_ulogic;
     TXQPIWEAKPUP : in std_ulogic;
     TXRATE : in std_logic_vector(2 downto 0);
     TXRATEMODE : in std_ulogic;
     TXSEQUENCE : in std_logic_vector(6 downto 0);
     TXSTARTSEQ : in std_ulogic;
     TXSWING : in std_ulogic;
     TXSYNCALLIN : in std_ulogic;
     TXSYNCIN : in std_ulogic;
     TXSYNCMODE : in std_ulogic;
     TXSYSCLKSEL : in std_logic_vector(1 downto 0);
     TXUSERRDY : in std_ulogic;
     TXUSRCLK : in std_ulogic;
     TXUSRCLK2 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  GTHE2_CHANNEL : component is "PRIMITIVE";

----- component GTHE2_COMMON -----
component GTHE2_COMMON
  generic (
     BIAS_CFG : bit_vector := X"0000040000001000";
     COMMON_CFG : bit_vector := X"0000001C";
     IS_DRPCLK_INVERTED : std_ulogic := '0';
     IS_GTGREFCLK_INVERTED : std_ulogic := '0';
     IS_QPLLLOCKDETCLK_INVERTED : std_ulogic := '0';
     QPLL_CFG : bit_vector := X"0480181";
     QPLL_CLKOUT_CFG : bit_vector := "0000";
     QPLL_COARSE_FREQ_OVRD : bit_vector := "010000";
     QPLL_COARSE_FREQ_OVRD_EN : bit := '0';
     QPLL_CP : bit_vector := "0000011111";
     QPLL_CP_MONITOR_EN : bit := '0';
     QPLL_DMONITOR_SEL : bit := '0';
     QPLL_FBDIV : bit_vector := "0000000000";
     QPLL_FBDIV_MONITOR_EN : bit := '0';
     QPLL_FBDIV_RATIO : bit := '0';
     QPLL_INIT_CFG : bit_vector := X"000006";
     QPLL_LOCK_CFG : bit_vector := X"01E8";
     QPLL_LPF : bit_vector := "1111";
     QPLL_REFCLK_DIV : integer := 2;
     QPLL_RP_COMP : bit := '0';
     QPLL_VTRL_RESET : bit_vector := "00";
     RCAL_CFG : bit_vector := "00";
     RSVD_ATTR0 : bit_vector := X"0000";
     RSVD_ATTR1 : bit_vector := X"0000";
     SIM_QPLLREFCLK_SEL : bit_vector := "001";
     SIM_RESET_SPEEDUP : string := "TRUE";
     SIM_VERSION : string := "1.1"
  );
  port (
     DRPDO : out std_logic_vector(15 downto 0);
     DRPRDY : out std_ulogic;
     PMARSVDOUT : out std_logic_vector(15 downto 0);
     QPLLDMONITOR : out std_logic_vector(7 downto 0);
     QPLLFBCLKLOST : out std_ulogic;
     QPLLLOCK : out std_ulogic;
     QPLLOUTCLK : out std_ulogic;
     QPLLOUTREFCLK : out std_ulogic;
     QPLLREFCLKLOST : out std_ulogic;
     REFCLKOUTMONITOR : out std_ulogic;
     BGBYPASSB : in std_ulogic;
     BGMONITORENB : in std_ulogic;
     BGPDB : in std_ulogic;
     BGRCALOVRD : in std_logic_vector(4 downto 0);
     BGRCALOVRDENB : in std_ulogic;
     DRPADDR : in std_logic_vector(7 downto 0);
     DRPCLK : in std_ulogic;
     DRPDI : in std_logic_vector(15 downto 0);
     DRPEN : in std_ulogic;
     DRPWE : in std_ulogic;
     GTGREFCLK : in std_ulogic;
     GTNORTHREFCLK0 : in std_ulogic;
     GTNORTHREFCLK1 : in std_ulogic;
     GTREFCLK0 : in std_ulogic;
     GTREFCLK1 : in std_ulogic;
     GTSOUTHREFCLK0 : in std_ulogic;
     GTSOUTHREFCLK1 : in std_ulogic;
     PMARSVD : in std_logic_vector(7 downto 0);
     QPLLLOCKDETCLK : in std_ulogic;
     QPLLLOCKEN : in std_ulogic;
     QPLLOUTRESET : in std_ulogic;
     QPLLPD : in std_ulogic;
     QPLLREFCLKSEL : in std_logic_vector(2 downto 0);
     QPLLRESET : in std_ulogic;
     QPLLRSVD1 : in std_logic_vector(15 downto 0);
     QPLLRSVD2 : in std_logic_vector(4 downto 0);
     RCALENB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  GTHE2_COMMON : component is "PRIMITIVE";

----- component GTHE3_CHANNEL -----
component GTHE3_CHANNEL
  generic (
     ACJTAG_DEBUG_MODE : std_ulogic := '0';
     ACJTAG_MODE : std_ulogic := '0';
     ACJTAG_RESET : std_ulogic := '0';
     ADAPT_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     ADAPT_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     ALIGN_COMMA_DOUBLE : string := "FALSE";
     ALIGN_COMMA_ENABLE : std_logic_vector(9 downto 0) := "0001111111";
     ALIGN_COMMA_WORD : integer := 1;
     ALIGN_MCOMMA_DET : string := "TRUE";
     ALIGN_MCOMMA_VALUE : std_logic_vector(9 downto 0) := "1010000011";
     ALIGN_PCOMMA_DET : string := "TRUE";
     ALIGN_PCOMMA_VALUE : std_logic_vector(9 downto 0) := "0101111100";
     A_RXOSCALRESET : std_ulogic := '0';
     A_RXPROGDIVRESET : std_ulogic := '0';
     A_TXPROGDIVRESET : std_ulogic := '0';
     CBCC_DATA_SOURCE_SEL : string := "DECODED";
     CDR_SWAP_MODE_EN : std_ulogic := '0';
     CHAN_BOND_KEEP_ALIGN : string := "FALSE";
     CHAN_BOND_MAX_SKEW : integer := 7;
     CHAN_BOND_SEQ_1_1 : std_logic_vector(9 downto 0) := "0101111100";
     CHAN_BOND_SEQ_1_2 : std_logic_vector(9 downto 0) := "0000000000";
     CHAN_BOND_SEQ_1_3 : std_logic_vector(9 downto 0) := "0000000000";
     CHAN_BOND_SEQ_1_4 : std_logic_vector(9 downto 0) := "0000000000";
     CHAN_BOND_SEQ_1_ENABLE : std_logic_vector(3 downto 0) := "1111";
     CHAN_BOND_SEQ_2_1 : std_logic_vector(9 downto 0) := "0100000000";
     CHAN_BOND_SEQ_2_2 : std_logic_vector(9 downto 0) := "0100000000";
     CHAN_BOND_SEQ_2_3 : std_logic_vector(9 downto 0) := "0100000000";
     CHAN_BOND_SEQ_2_4 : std_logic_vector(9 downto 0) := "0100000000";
     CHAN_BOND_SEQ_2_ENABLE : std_logic_vector(3 downto 0) := "1111";
     CHAN_BOND_SEQ_2_USE : string := "FALSE";
     CHAN_BOND_SEQ_LEN : integer := 2;
     CLK_CORRECT_USE : string := "TRUE";
     CLK_COR_KEEP_IDLE : string := "FALSE";
     CLK_COR_MAX_LAT : integer := 20;
     CLK_COR_MIN_LAT : integer := 18;
     CLK_COR_PRECEDENCE : string := "TRUE";
     CLK_COR_REPEAT_WAIT : integer := 0;
     CLK_COR_SEQ_1_1 : std_logic_vector(9 downto 0) := "0100011100";
     CLK_COR_SEQ_1_2 : std_logic_vector(9 downto 0) := "0000000000";
     CLK_COR_SEQ_1_3 : std_logic_vector(9 downto 0) := "0000000000";
     CLK_COR_SEQ_1_4 : std_logic_vector(9 downto 0) := "0000000000";
     CLK_COR_SEQ_1_ENABLE : std_logic_vector(3 downto 0) := "1111";
     CLK_COR_SEQ_2_1 : std_logic_vector(9 downto 0) := "0100000000";
     CLK_COR_SEQ_2_2 : std_logic_vector(9 downto 0) := "0100000000";
     CLK_COR_SEQ_2_3 : std_logic_vector(9 downto 0) := "0100000000";
     CLK_COR_SEQ_2_4 : std_logic_vector(9 downto 0) := "0100000000";
     CLK_COR_SEQ_2_ENABLE : std_logic_vector(3 downto 0) := "1111";
     CLK_COR_SEQ_2_USE : string := "FALSE";
     CLK_COR_SEQ_LEN : integer := 2;
     CPLL_CFG0 : std_logic_vector(15 downto 0) := X"20F8";
     CPLL_CFG1 : std_logic_vector(15 downto 0) := X"A494";
     CPLL_CFG2 : std_logic_vector(15 downto 0) := X"F001";
     CPLL_CFG3 : std_logic_vector(5 downto 0) := "00" & X"0";
     CPLL_FBDIV : integer := 4;
     CPLL_FBDIV_45 : integer := 4;
     CPLL_INIT_CFG0 : std_logic_vector(15 downto 0) := X"001E";
     CPLL_INIT_CFG1 : std_logic_vector(7 downto 0) := X"00";
     CPLL_LOCK_CFG : std_logic_vector(15 downto 0) := X"01E8";
     CPLL_REFCLK_DIV : integer := 1;
     DDI_CTRL : std_logic_vector(1 downto 0) := "00";
     DDI_REALIGN_WAIT : integer := 15;
     DEC_MCOMMA_DETECT : string := "TRUE";
     DEC_PCOMMA_DETECT : string := "TRUE";
     DEC_VALID_COMMA_ONLY : string := "TRUE";
     DFE_D_X_REL_POS : std_ulogic := '0';
     DFE_VCM_COMP_EN : std_ulogic := '0';
     DMONITOR_CFG0 : std_logic_vector(9 downto 0) := "00" & X"00";
     DMONITOR_CFG1 : std_logic_vector(7 downto 0) := X"00";
     ES_CLK_PHASE_SEL : std_ulogic := '0';
     ES_CONTROL : std_logic_vector(5 downto 0) := "000000";
     ES_ERRDET_EN : string := "FALSE";
     ES_EYE_SCAN_EN : string := "FALSE";
     ES_HORZ_OFFSET : std_logic_vector(11 downto 0) := X"000";
     ES_PMA_CFG : std_logic_vector(9 downto 0) := "0000000000";
     ES_PRESCALE : std_logic_vector(4 downto 0) := "00000";
     ES_QUALIFIER0 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUALIFIER1 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUALIFIER2 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUALIFIER3 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUALIFIER4 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUAL_MASK0 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUAL_MASK1 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUAL_MASK2 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUAL_MASK3 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUAL_MASK4 : std_logic_vector(15 downto 0) := X"0000";
     ES_SDATA_MASK0 : std_logic_vector(15 downto 0) := X"0000";
     ES_SDATA_MASK1 : std_logic_vector(15 downto 0) := X"0000";
     ES_SDATA_MASK2 : std_logic_vector(15 downto 0) := X"0000";
     ES_SDATA_MASK3 : std_logic_vector(15 downto 0) := X"0000";
     ES_SDATA_MASK4 : std_logic_vector(15 downto 0) := X"0000";
     EVODD_PHI_CFG : std_logic_vector(10 downto 0) := "00000000000";
     EYE_SCAN_SWAP_EN : std_ulogic := '0';
     FTS_DESKEW_SEQ_ENABLE : std_logic_vector(3 downto 0) := "1111";
     FTS_LANE_DESKEW_CFG : std_logic_vector(3 downto 0) := "1111";
     FTS_LANE_DESKEW_EN : string := "FALSE";
     GEARBOX_MODE : std_logic_vector(4 downto 0) := "00000";
     GM_BIAS_SELECT : std_ulogic := '0';
     LOCAL_MASTER : std_ulogic := '0';
     OOBDIVCTL : std_logic_vector(1 downto 0) := "00";
     OOB_PWRUP : std_ulogic := '0';
     PCI3_AUTO_REALIGN : string := "FRST_SMPL";
     PCI3_PIPE_RX_ELECIDLE : std_ulogic := '1';
     PCI3_RX_ASYNC_EBUF_BYPASS : std_logic_vector(1 downto 0) := "00";
     PCI3_RX_ELECIDLE_EI2_ENABLE : std_ulogic := '0';
     PCI3_RX_ELECIDLE_H2L_COUNT : std_logic_vector(5 downto 0) := "000000";
     PCI3_RX_ELECIDLE_H2L_DISABLE : std_logic_vector(2 downto 0) := "000";
     PCI3_RX_ELECIDLE_HI_COUNT : std_logic_vector(5 downto 0) := "000000";
     PCI3_RX_ELECIDLE_LP4_DISABLE : std_ulogic := '0';
     PCI3_RX_FIFO_DISABLE : std_ulogic := '0';
     PCIE_BUFG_DIV_CTRL : std_logic_vector(15 downto 0) := X"0000";
     PCIE_RXPCS_CFG_GEN3 : std_logic_vector(15 downto 0) := X"0000";
     PCIE_RXPMA_CFG : std_logic_vector(15 downto 0) := X"0000";
     PCIE_TXPCS_CFG_GEN3 : std_logic_vector(15 downto 0) := X"0000";
     PCIE_TXPMA_CFG : std_logic_vector(15 downto 0) := X"0000";
     PCS_PCIE_EN : string := "FALSE";
     PCS_RSVD0 : std_logic_vector(15 downto 0) := "0000000000000000";
     PCS_RSVD1 : std_logic_vector(2 downto 0) := "000";
     PD_TRANS_TIME_FROM_P2 : std_logic_vector(11 downto 0) := X"03C";
     PD_TRANS_TIME_NONE_P2 : std_logic_vector(7 downto 0) := X"19";
     PD_TRANS_TIME_TO_P2 : std_logic_vector(7 downto 0) := X"64";
     PLL_SEL_MODE_GEN12 : std_logic_vector(1 downto 0) := "00";
     PLL_SEL_MODE_GEN3 : std_logic_vector(1 downto 0) := "00";
     PMA_RSV1 : std_logic_vector(15 downto 0) := X"0000";
     PROCESS_PAR : std_logic_vector(2 downto 0) := "010";
     RATE_SW_USE_DRP : std_ulogic := '0';
     RESET_POWERSAVE_DISABLE : std_ulogic := '0';
     RXBUFRESET_TIME : std_logic_vector(4 downto 0) := "00001";
     RXBUF_ADDR_MODE : string := "FULL";
     RXBUF_EIDLE_HI_CNT : std_logic_vector(3 downto 0) := "1000";
     RXBUF_EIDLE_LO_CNT : std_logic_vector(3 downto 0) := "0000";
     RXBUF_EN : string := "TRUE";
     RXBUF_RESET_ON_CB_CHANGE : string := "TRUE";
     RXBUF_RESET_ON_COMMAALIGN : string := "FALSE";
     RXBUF_RESET_ON_EIDLE : string := "FALSE";
     RXBUF_RESET_ON_RATE_CHANGE : string := "TRUE";
     RXBUF_THRESH_OVFLW : integer := 0;
     RXBUF_THRESH_OVRD : string := "FALSE";
     RXBUF_THRESH_UNDFLW : integer := 4;
     RXCDRFREQRESET_TIME : std_logic_vector(4 downto 0) := "00001";
     RXCDRPHRESET_TIME : std_logic_vector(4 downto 0) := "00001";
     RXCDR_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXCDR_CFG0_GEN3 : std_logic_vector(15 downto 0) := X"0000";
     RXCDR_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXCDR_CFG1_GEN3 : std_logic_vector(15 downto 0) := X"0000";
     RXCDR_CFG2 : std_logic_vector(15 downto 0) := X"0000";
     RXCDR_CFG2_GEN3 : std_logic_vector(15 downto 0) := X"0000";
     RXCDR_CFG3 : std_logic_vector(15 downto 0) := X"0000";
     RXCDR_CFG3_GEN3 : std_logic_vector(15 downto 0) := X"0000";
     RXCDR_CFG4 : std_logic_vector(15 downto 0) := X"0000";
     RXCDR_CFG4_GEN3 : std_logic_vector(15 downto 0) := X"0000";
     RXCDR_CFG5 : std_logic_vector(15 downto 0) := X"0000";
     RXCDR_CFG5_GEN3 : std_logic_vector(15 downto 0) := X"0000";
     RXCDR_FR_RESET_ON_EIDLE : std_ulogic := '0';
     RXCDR_HOLD_DURING_EIDLE : std_ulogic := '0';
     RXCDR_LOCK_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXCDR_LOCK_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXCDR_LOCK_CFG2 : std_logic_vector(15 downto 0) := X"0000";
     RXCDR_PH_RESET_ON_EIDLE : std_ulogic := '0';
     RXCFOK_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXCFOK_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXCFOK_CFG2 : std_logic_vector(15 downto 0) := X"0000";
     RXDFELPMRESET_TIME : std_logic_vector(6 downto 0) := "0001111";
     RXDFELPM_KL_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFELPM_KL_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXDFELPM_KL_CFG2 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_GC_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_GC_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_GC_CFG2 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_H2_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_H2_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_H3_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_H3_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_H4_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_H4_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_H5_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_H5_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_H6_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_H6_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_H7_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_H7_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_H8_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_H8_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_H9_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_H9_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_HA_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_HA_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_HB_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_HB_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_HC_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_HC_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_HD_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_HD_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_HE_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_HE_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_HF_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_HF_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_OS_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_OS_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_UT_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_UT_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_VP_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_VP_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXDLY_CFG : std_logic_vector(15 downto 0) := X"001F";
     RXDLY_LCFG : std_logic_vector(15 downto 0) := X"0030";
     RXELECIDLE_CFG : string := "Sigcfg_4";
     RXGBOX_FIFO_INIT_RD_ADDR : integer := 4;
     RXGEARBOX_EN : string := "FALSE";
     RXISCANRESET_TIME : std_logic_vector(4 downto 0) := "00001";
     RXLPM_CFG : std_logic_vector(15 downto 0) := X"0000";
     RXLPM_GC_CFG : std_logic_vector(15 downto 0) := X"0000";
     RXLPM_KH_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXLPM_KH_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXLPM_OS_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXLPM_OS_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXOOB_CFG : std_logic_vector(8 downto 0) := "000000110";
     RXOOB_CLK_CFG : string := "PMA";
     RXOSCALRESET_TIME : std_logic_vector(4 downto 0) := "00011";
     RXOUT_DIV : integer := 4;
     RXPCSRESET_TIME : std_logic_vector(4 downto 0) := "00001";
     RXPHBEACON_CFG : std_logic_vector(15 downto 0) := X"0000";
     RXPHDLY_CFG : std_logic_vector(15 downto 0) := X"2020";
     RXPHSAMP_CFG : std_logic_vector(15 downto 0) := X"2100";
     RXPHSLIP_CFG : std_logic_vector(15 downto 0) := X"6622";
     RXPH_MONITOR_SEL : std_logic_vector(4 downto 0) := "00000";
     RXPI_CFG0 : std_logic_vector(1 downto 0) := "00";
     RXPI_CFG1 : std_logic_vector(1 downto 0) := "00";
     RXPI_CFG2 : std_logic_vector(1 downto 0) := "00";
     RXPI_CFG3 : std_logic_vector(1 downto 0) := "00";
     RXPI_CFG4 : std_ulogic := '0';
     RXPI_CFG5 : std_ulogic := '1';
     RXPI_CFG6 : std_logic_vector(2 downto 0) := "000";
     RXPI_LPM : std_ulogic := '0';
     RXPI_VREFSEL : std_ulogic := '0';
     RXPMACLK_SEL : string := "DATA";
     RXPMARESET_TIME : std_logic_vector(4 downto 0) := "00001";
     RXPRBS_ERR_LOOPBACK : std_ulogic := '0';
     RXPRBS_LINKACQ_CNT : integer := 15;
     RXSLIDE_AUTO_WAIT : integer := 7;
     RXSLIDE_MODE : string := "OFF";
     RXSYNC_MULTILANE : std_ulogic := '0';
     RXSYNC_OVRD : std_ulogic := '0';
     RXSYNC_SKIP_DA : std_ulogic := '0';
     RX_AFE_CM_EN : std_ulogic := '0';
     RX_BIAS_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RX_BUFFER_CFG : std_logic_vector(5 downto 0) := "000000";
     RX_CAPFF_SARC_ENB : std_ulogic := '0';
     RX_CLK25_DIV : integer := 8;
     RX_CLKMUX_EN : std_ulogic := '1';
     RX_CLK_SLIP_OVRD : std_logic_vector(4 downto 0) := "00000";
     RX_CM_BUF_CFG : std_logic_vector(3 downto 0) := "0000";
     RX_CM_BUF_PD : std_ulogic := '0';
     RX_CM_SEL : std_logic_vector(1 downto 0) := "11";
     RX_CM_TRIM : std_logic_vector(3 downto 0) := "0100";
     RX_CTLE3_LPF : std_logic_vector(7 downto 0) := "00000000";
     RX_DATA_WIDTH : integer := 20;
     RX_DDI_SEL : std_logic_vector(5 downto 0) := "000000";
     RX_DEFER_RESET_BUF_EN : string := "TRUE";
     RX_DFELPM_CFG0 : std_logic_vector(3 downto 0) := "0110";
     RX_DFELPM_CFG1 : std_ulogic := '0';
     RX_DFELPM_KLKH_AGC_STUP_EN : std_ulogic := '1';
     RX_DFE_AGC_CFG0 : std_logic_vector(1 downto 0) := "00";
     RX_DFE_AGC_CFG1 : std_logic_vector(2 downto 0) := "010";
     RX_DFE_KL_LPM_KH_CFG0 : std_logic_vector(1 downto 0) := "01";
     RX_DFE_KL_LPM_KH_CFG1 : std_logic_vector(2 downto 0) := "010";
     RX_DFE_KL_LPM_KL_CFG0 : std_logic_vector(1 downto 0) := "01";
     RX_DFE_KL_LPM_KL_CFG1 : std_logic_vector(2 downto 0) := "010";
     RX_DFE_LPM_HOLD_DURING_EIDLE : std_ulogic := '0';
     RX_DISPERR_SEQ_MATCH : string := "TRUE";
     RX_DIVRESET_TIME : std_logic_vector(4 downto 0) := "00001";
     RX_EN_HI_LR : std_ulogic := '0';
     RX_EYESCAN_VS_CODE : std_logic_vector(6 downto 0) := "0000000";
     RX_EYESCAN_VS_NEG_DIR : std_ulogic := '0';
     RX_EYESCAN_VS_RANGE : std_logic_vector(1 downto 0) := "00";
     RX_EYESCAN_VS_UT_SIGN : std_ulogic := '0';
     RX_FABINT_USRCLK_FLOP : std_ulogic := '0';
     RX_INT_DATAWIDTH : integer := 1;
     RX_PMA_POWER_SAVE : std_ulogic := '0';
     RX_PROGDIV_CFG : real := 4.0;
     RX_SAMPLE_PERIOD : std_logic_vector(2 downto 0) := "101";
     RX_SIG_VALID_DLY : integer := 11;
     RX_SUM_DFETAPREP_EN : std_ulogic := '0';
     RX_SUM_IREF_TUNE : std_logic_vector(3 downto 0) := "0000";
     RX_SUM_RES_CTRL : std_logic_vector(1 downto 0) := "00";
     RX_SUM_VCMTUNE : std_logic_vector(3 downto 0) := "0000";
     RX_SUM_VCM_OVWR : std_ulogic := '0';
     RX_SUM_VREF_TUNE : std_logic_vector(2 downto 0) := "000";
     RX_TUNE_AFE_OS : std_logic_vector(1 downto 0) := "00";
     RX_WIDEMODE_CDR : std_ulogic := '0';
     RX_XCLK_SEL : string := "RXDES";
     SAS_MAX_COM : integer := 64;
     SAS_MIN_COM : integer := 36;
     SATA_BURST_SEQ_LEN : std_logic_vector(3 downto 0) := "1111";
     SATA_BURST_VAL : std_logic_vector(2 downto 0) := "100";
     SATA_CPLL_CFG : string := "VCO_3000MHZ";
     SATA_EIDLE_VAL : std_logic_vector(2 downto 0) := "100";
     SATA_MAX_BURST : integer := 8;
     SATA_MAX_INIT : integer := 21;
     SATA_MAX_WAKE : integer := 7;
     SATA_MIN_BURST : integer := 4;
     SATA_MIN_INIT : integer := 12;
     SATA_MIN_WAKE : integer := 4;
     SHOW_REALIGN_COMMA : string := "TRUE";
     SIM_CPLLREFCLK_SEL : std_logic_vector(2 downto 0) := "001";
     SIM_RECEIVER_DETECT_PASS : string := "TRUE";
     SIM_RESET_SPEEDUP : string := "TRUE";
     SIM_TX_EIDLE_DRIVE_LEVEL : std_ulogic := '0';
     SIM_VERSION : string := "Ver_1";
     TAPDLY_SET_TX : std_logic_vector(1 downto 0) := "00";
     TEMPERATUR_PAR : std_logic_vector(3 downto 0) := "0010";
     TERM_RCAL_CFG : std_logic_vector(14 downto 0) := "100001000010000";
     TERM_RCAL_OVRD : std_logic_vector(2 downto 0) := "000";
     TRANS_TIME_RATE : std_logic_vector(7 downto 0) := X"0E";
     TST_RSV0 : std_logic_vector(7 downto 0) := X"00";
     TST_RSV1 : std_logic_vector(7 downto 0) := X"00";
     TXBUF_EN : string := "TRUE";
     TXBUF_RESET_ON_RATE_CHANGE : string := "FALSE";
     TXDLY_CFG : std_logic_vector(15 downto 0) := X"001F";
     TXDLY_LCFG : std_logic_vector(15 downto 0) := X"0030";
     TXDRVBIAS_N : std_logic_vector(3 downto 0) := "1010";
     TXDRVBIAS_P : std_logic_vector(3 downto 0) := "1100";
     TXFIFO_ADDR_CFG : string := "LOW";
     TXGBOX_FIFO_INIT_RD_ADDR : integer := 4;
     TXGEARBOX_EN : string := "FALSE";
     TXOUT_DIV : integer := 4;
     TXPCSRESET_TIME : std_logic_vector(4 downto 0) := "00001";
     TXPHDLY_CFG0 : std_logic_vector(15 downto 0) := X"2020";
     TXPHDLY_CFG1 : std_logic_vector(15 downto 0) := X"0001";
     TXPH_CFG : std_logic_vector(15 downto 0) := X"0980";
     TXPH_MONITOR_SEL : std_logic_vector(4 downto 0) := "00000";
     TXPI_CFG0 : std_logic_vector(1 downto 0) := "00";
     TXPI_CFG1 : std_logic_vector(1 downto 0) := "00";
     TXPI_CFG2 : std_logic_vector(1 downto 0) := "00";
     TXPI_CFG3 : std_ulogic := '0';
     TXPI_CFG4 : std_ulogic := '1';
     TXPI_CFG5 : std_logic_vector(2 downto 0) := "000";
     TXPI_GRAY_SEL : std_ulogic := '0';
     TXPI_INVSTROBE_SEL : std_ulogic := '0';
     TXPI_LPM : std_ulogic := '0';
     TXPI_PPMCLK_SEL : string := "TXUSRCLK2";
     TXPI_PPM_CFG : std_logic_vector(7 downto 0) := "00000000";
     TXPI_SYNFREQ_PPM : std_logic_vector(2 downto 0) := "000";
     TXPI_VREFSEL : std_ulogic := '0';
     TXPMARESET_TIME : std_logic_vector(4 downto 0) := "00001";
     TXSYNC_MULTILANE : std_ulogic := '0';
     TXSYNC_OVRD : std_ulogic := '0';
     TXSYNC_SKIP_DA : std_ulogic := '0';
     TX_CLK25_DIV : integer := 8;
     TX_CLKMUX_EN : std_ulogic := '1';
     TX_DATA_WIDTH : integer := 20;
     TX_DCD_CFG : std_logic_vector(5 downto 0) := "000010";
     TX_DCD_EN : std_ulogic := '0';
     TX_DEEMPH0 : std_logic_vector(5 downto 0) := "000000";
     TX_DEEMPH1 : std_logic_vector(5 downto 0) := "000000";
     TX_DIVRESET_TIME : std_logic_vector(4 downto 0) := "00001";
     TX_DRIVE_MODE : string := "DIRECT";
     TX_EIDLE_ASSERT_DELAY : std_logic_vector(2 downto 0) := "110";
     TX_EIDLE_DEASSERT_DELAY : std_logic_vector(2 downto 0) := "100";
     TX_EML_PHI_TUNE : std_ulogic := '0';
     TX_FABINT_USRCLK_FLOP : std_ulogic := '0';
     TX_IDLE_DATA_ZERO : std_ulogic := '0';
     TX_INT_DATAWIDTH : integer := 1;
     TX_LOOPBACK_DRIVE_HIZ : string := "FALSE";
     TX_MAINCURSOR_SEL : std_ulogic := '0';
     TX_MARGIN_FULL_0 : std_logic_vector(6 downto 0) := "1001110";
     TX_MARGIN_FULL_1 : std_logic_vector(6 downto 0) := "1001001";
     TX_MARGIN_FULL_2 : std_logic_vector(6 downto 0) := "1000101";
     TX_MARGIN_FULL_3 : std_logic_vector(6 downto 0) := "1000010";
     TX_MARGIN_FULL_4 : std_logic_vector(6 downto 0) := "1000000";
     TX_MARGIN_LOW_0 : std_logic_vector(6 downto 0) := "1000110";
     TX_MARGIN_LOW_1 : std_logic_vector(6 downto 0) := "1000100";
     TX_MARGIN_LOW_2 : std_logic_vector(6 downto 0) := "1000010";
     TX_MARGIN_LOW_3 : std_logic_vector(6 downto 0) := "1000000";
     TX_MARGIN_LOW_4 : std_logic_vector(6 downto 0) := "1000000";
     TX_MODE_SEL : std_logic_vector(2 downto 0) := "000";
     TX_PMADATA_OPT : std_ulogic := '0';
     TX_PMA_POWER_SAVE : std_ulogic := '0';
     TX_PROGCLK_SEL : string := "POSTPI";
     TX_PROGDIV_CFG : real := 4.0;
     TX_QPI_STATUS_EN : std_ulogic := '0';
     TX_RXDETECT_CFG : std_logic_vector(13 downto 0) := "00" & X"032";
     TX_RXDETECT_REF : std_logic_vector(2 downto 0) := "100";
     TX_SAMPLE_PERIOD : std_logic_vector(2 downto 0) := "101";
     TX_SARC_LPBK_ENB : std_ulogic := '0';
     TX_XCLK_SEL : string := "TXOUT";
     USE_PCS_CLK_PHASE_SEL : std_ulogic := '0';
     WB_MODE : std_logic_vector(1 downto 0) := "00"
  );
  port (
     BUFGTCE : out std_logic_vector(2 downto 0);
     BUFGTCEMASK : out std_logic_vector(2 downto 0);
     BUFGTDIV : out std_logic_vector(8 downto 0);
     BUFGTRESET : out std_logic_vector(2 downto 0);
     BUFGTRSTMASK : out std_logic_vector(2 downto 0);
     CPLLFBCLKLOST : out std_ulogic;
     CPLLLOCK : out std_ulogic;
     CPLLREFCLKLOST : out std_ulogic;
     DMONITOROUT : out std_logic_vector(16 downto 0);
     DRPDO : out std_logic_vector(15 downto 0);
     DRPRDY : out std_ulogic;
     EYESCANDATAERROR : out std_ulogic;
     GTHTXN : out std_ulogic;
     GTHTXP : out std_ulogic;
     GTPOWERGOOD : out std_ulogic;
     GTREFCLKMONITOR : out std_ulogic;
     PCIERATEGEN3 : out std_ulogic;
     PCIERATEIDLE : out std_ulogic;
     PCIERATEQPLLPD : out std_logic_vector(1 downto 0);
     PCIERATEQPLLRESET : out std_logic_vector(1 downto 0);
     PCIESYNCTXSYNCDONE : out std_ulogic;
     PCIEUSERGEN3RDY : out std_ulogic;
     PCIEUSERPHYSTATUSRST : out std_ulogic;
     PCIEUSERRATESTART : out std_ulogic;
     PCSRSVDOUT : out std_logic_vector(11 downto 0);
     PHYSTATUS : out std_ulogic;
     PINRSRVDAS : out std_logic_vector(7 downto 0);
     RESETEXCEPTION : out std_ulogic;
     RXBUFSTATUS : out std_logic_vector(2 downto 0);
     RXBYTEISALIGNED : out std_ulogic;
     RXBYTEREALIGN : out std_ulogic;
     RXCDRLOCK : out std_ulogic;
     RXCDRPHDONE : out std_ulogic;
     RXCHANBONDSEQ : out std_ulogic;
     RXCHANISALIGNED : out std_ulogic;
     RXCHANREALIGN : out std_ulogic;
     RXCHBONDO : out std_logic_vector(4 downto 0);
     RXCLKCORCNT : out std_logic_vector(1 downto 0);
     RXCOMINITDET : out std_ulogic;
     RXCOMMADET : out std_ulogic;
     RXCOMSASDET : out std_ulogic;
     RXCOMWAKEDET : out std_ulogic;
     RXCTRL0 : out std_logic_vector(15 downto 0);
     RXCTRL1 : out std_logic_vector(15 downto 0);
     RXCTRL2 : out std_logic_vector(7 downto 0);
     RXCTRL3 : out std_logic_vector(7 downto 0);
     RXDATA : out std_logic_vector(127 downto 0);
     RXDATAEXTENDRSVD : out std_logic_vector(7 downto 0);
     RXDATAVALID : out std_logic_vector(1 downto 0);
     RXDLYSRESETDONE : out std_ulogic;
     RXELECIDLE : out std_ulogic;
     RXHEADER : out std_logic_vector(5 downto 0);
     RXHEADERVALID : out std_logic_vector(1 downto 0);
     RXMONITOROUT : out std_logic_vector(6 downto 0);
     RXOSINTDONE : out std_ulogic;
     RXOSINTSTARTED : out std_ulogic;
     RXOSINTSTROBEDONE : out std_ulogic;
     RXOSINTSTROBESTARTED : out std_ulogic;
     RXOUTCLK : out std_ulogic;
     RXOUTCLKFABRIC : out std_ulogic;
     RXOUTCLKPCS : out std_ulogic;
     RXPHALIGNDONE : out std_ulogic;
     RXPHALIGNERR : out std_ulogic;
     RXPMARESETDONE : out std_ulogic;
     RXPRBSERR : out std_ulogic;
     RXPRBSLOCKED : out std_ulogic;
     RXPRGDIVRESETDONE : out std_ulogic;
     RXQPISENN : out std_ulogic;
     RXQPISENP : out std_ulogic;
     RXRATEDONE : out std_ulogic;
     RXRECCLKOUT : out std_ulogic;
     RXRESETDONE : out std_ulogic;
     RXSLIDERDY : out std_ulogic;
     RXSLIPDONE : out std_ulogic;
     RXSLIPOUTCLKRDY : out std_ulogic;
     RXSLIPPMARDY : out std_ulogic;
     RXSTARTOFSEQ : out std_logic_vector(1 downto 0);
     RXSTATUS : out std_logic_vector(2 downto 0);
     RXSYNCDONE : out std_ulogic;
     RXSYNCOUT : out std_ulogic;
     RXVALID : out std_ulogic;
     TXBUFSTATUS : out std_logic_vector(1 downto 0);
     TXCOMFINISH : out std_ulogic;
     TXDLYSRESETDONE : out std_ulogic;
     TXOUTCLK : out std_ulogic;
     TXOUTCLKFABRIC : out std_ulogic;
     TXOUTCLKPCS : out std_ulogic;
     TXPHALIGNDONE : out std_ulogic;
     TXPHINITDONE : out std_ulogic;
     TXPMARESETDONE : out std_ulogic;
     TXPRGDIVRESETDONE : out std_ulogic;
     TXQPISENN : out std_ulogic;
     TXQPISENP : out std_ulogic;
     TXRATEDONE : out std_ulogic;
     TXRESETDONE : out std_ulogic;
     TXSYNCDONE : out std_ulogic;
     TXSYNCOUT : out std_ulogic;
     CFGRESET : in std_ulogic;
     CLKRSVD0 : in std_ulogic;
     CLKRSVD1 : in std_ulogic;
     CPLLLOCKDETCLK : in std_ulogic;
     CPLLLOCKEN : in std_ulogic;
     CPLLPD : in std_ulogic;
     CPLLREFCLKSEL : in std_logic_vector(2 downto 0);
     CPLLRESET : in std_ulogic;
     DMONFIFORESET : in std_ulogic;
     DMONITORCLK : in std_ulogic;
     DRPADDR : in std_logic_vector(8 downto 0);
     DRPCLK : in std_ulogic;
     DRPDI : in std_logic_vector(15 downto 0);
     DRPEN : in std_ulogic;
     DRPWE : in std_ulogic;
     EVODDPHICALDONE : in std_ulogic;
     EVODDPHICALSTART : in std_ulogic;
     EVODDPHIDRDEN : in std_ulogic;
     EVODDPHIDWREN : in std_ulogic;
     EVODDPHIXRDEN : in std_ulogic;
     EVODDPHIXWREN : in std_ulogic;
     EYESCANMODE : in std_ulogic;
     EYESCANRESET : in std_ulogic;
     EYESCANTRIGGER : in std_ulogic;
     GTGREFCLK : in std_ulogic;
     GTHRXN : in std_ulogic;
     GTHRXP : in std_ulogic;
     GTNORTHREFCLK0 : in std_ulogic;
     GTNORTHREFCLK1 : in std_ulogic;
     GTREFCLK0 : in std_ulogic;
     GTREFCLK1 : in std_ulogic;
     GTRESETSEL : in std_ulogic;
     GTRSVD : in std_logic_vector(15 downto 0);
     GTRXRESET : in std_ulogic;
     GTSOUTHREFCLK0 : in std_ulogic;
     GTSOUTHREFCLK1 : in std_ulogic;
     GTTXRESET : in std_ulogic;
     LOOPBACK : in std_logic_vector(2 downto 0);
     LPBKRXTXSEREN : in std_ulogic;
     LPBKTXRXSEREN : in std_ulogic;
     PCIEEQRXEQADAPTDONE : in std_ulogic;
     PCIERSTIDLE : in std_ulogic;
     PCIERSTTXSYNCSTART : in std_ulogic;
     PCIEUSERRATEDONE : in std_ulogic;
     PCSRSVDIN : in std_logic_vector(15 downto 0);
     PCSRSVDIN2 : in std_logic_vector(4 downto 0);
     PMARSVDIN : in std_logic_vector(4 downto 0);
     QPLL0CLK : in std_ulogic;
     QPLL0REFCLK : in std_ulogic;
     QPLL1CLK : in std_ulogic;
     QPLL1REFCLK : in std_ulogic;
     RESETOVRD : in std_ulogic;
     RSTCLKENTX : in std_ulogic;
     RX8B10BEN : in std_ulogic;
     RXBUFRESET : in std_ulogic;
     RXCDRFREQRESET : in std_ulogic;
     RXCDRHOLD : in std_ulogic;
     RXCDROVRDEN : in std_ulogic;
     RXCDRRESET : in std_ulogic;
     RXCDRRESETRSV : in std_ulogic;
     RXCHBONDEN : in std_ulogic;
     RXCHBONDI : in std_logic_vector(4 downto 0);
     RXCHBONDLEVEL : in std_logic_vector(2 downto 0);
     RXCHBONDMASTER : in std_ulogic;
     RXCHBONDSLAVE : in std_ulogic;
     RXCOMMADETEN : in std_ulogic;
     RXDFEAGCCTRL : in std_logic_vector(1 downto 0);
     RXDFEAGCHOLD : in std_ulogic;
     RXDFEAGCOVRDEN : in std_ulogic;
     RXDFELFHOLD : in std_ulogic;
     RXDFELFOVRDEN : in std_ulogic;
     RXDFELPMRESET : in std_ulogic;
     RXDFETAP10HOLD : in std_ulogic;
     RXDFETAP10OVRDEN : in std_ulogic;
     RXDFETAP11HOLD : in std_ulogic;
     RXDFETAP11OVRDEN : in std_ulogic;
     RXDFETAP12HOLD : in std_ulogic;
     RXDFETAP12OVRDEN : in std_ulogic;
     RXDFETAP13HOLD : in std_ulogic;
     RXDFETAP13OVRDEN : in std_ulogic;
     RXDFETAP14HOLD : in std_ulogic;
     RXDFETAP14OVRDEN : in std_ulogic;
     RXDFETAP15HOLD : in std_ulogic;
     RXDFETAP15OVRDEN : in std_ulogic;
     RXDFETAP2HOLD : in std_ulogic;
     RXDFETAP2OVRDEN : in std_ulogic;
     RXDFETAP3HOLD : in std_ulogic;
     RXDFETAP3OVRDEN : in std_ulogic;
     RXDFETAP4HOLD : in std_ulogic;
     RXDFETAP4OVRDEN : in std_ulogic;
     RXDFETAP5HOLD : in std_ulogic;
     RXDFETAP5OVRDEN : in std_ulogic;
     RXDFETAP6HOLD : in std_ulogic;
     RXDFETAP6OVRDEN : in std_ulogic;
     RXDFETAP7HOLD : in std_ulogic;
     RXDFETAP7OVRDEN : in std_ulogic;
     RXDFETAP8HOLD : in std_ulogic;
     RXDFETAP8OVRDEN : in std_ulogic;
     RXDFETAP9HOLD : in std_ulogic;
     RXDFETAP9OVRDEN : in std_ulogic;
     RXDFEUTHOLD : in std_ulogic;
     RXDFEUTOVRDEN : in std_ulogic;
     RXDFEVPHOLD : in std_ulogic;
     RXDFEVPOVRDEN : in std_ulogic;
     RXDFEVSEN : in std_ulogic;
     RXDFEXYDEN : in std_ulogic;
     RXDLYBYPASS : in std_ulogic;
     RXDLYEN : in std_ulogic;
     RXDLYOVRDEN : in std_ulogic;
     RXDLYSRESET : in std_ulogic;
     RXELECIDLEMODE : in std_logic_vector(1 downto 0);
     RXGEARBOXSLIP : in std_ulogic;
     RXLATCLK : in std_ulogic;
     RXLPMEN : in std_ulogic;
     RXLPMGCHOLD : in std_ulogic;
     RXLPMGCOVRDEN : in std_ulogic;
     RXLPMHFHOLD : in std_ulogic;
     RXLPMHFOVRDEN : in std_ulogic;
     RXLPMLFHOLD : in std_ulogic;
     RXLPMLFKLOVRDEN : in std_ulogic;
     RXLPMOSHOLD : in std_ulogic;
     RXLPMOSOVRDEN : in std_ulogic;
     RXMCOMMAALIGNEN : in std_ulogic;
     RXMONITORSEL : in std_logic_vector(1 downto 0);
     RXOOBRESET : in std_ulogic;
     RXOSCALRESET : in std_ulogic;
     RXOSHOLD : in std_ulogic;
     RXOSINTCFG : in std_logic_vector(3 downto 0);
     RXOSINTEN : in std_ulogic;
     RXOSINTHOLD : in std_ulogic;
     RXOSINTOVRDEN : in std_ulogic;
     RXOSINTSTROBE : in std_ulogic;
     RXOSINTTESTOVRDEN : in std_ulogic;
     RXOSOVRDEN : in std_ulogic;
     RXOUTCLKSEL : in std_logic_vector(2 downto 0);
     RXPCOMMAALIGNEN : in std_ulogic;
     RXPCSRESET : in std_ulogic;
     RXPD : in std_logic_vector(1 downto 0);
     RXPHALIGN : in std_ulogic;
     RXPHALIGNEN : in std_ulogic;
     RXPHDLYPD : in std_ulogic;
     RXPHDLYRESET : in std_ulogic;
     RXPHOVRDEN : in std_ulogic;
     RXPLLCLKSEL : in std_logic_vector(1 downto 0);
     RXPMARESET : in std_ulogic;
     RXPOLARITY : in std_ulogic;
     RXPRBSCNTRESET : in std_ulogic;
     RXPRBSSEL : in std_logic_vector(3 downto 0);
     RXPROGDIVRESET : in std_ulogic;
     RXQPIEN : in std_ulogic;
     RXRATE : in std_logic_vector(2 downto 0);
     RXRATEMODE : in std_ulogic;
     RXSLIDE : in std_ulogic;
     RXSLIPOUTCLK : in std_ulogic;
     RXSLIPPMA : in std_ulogic;
     RXSYNCALLIN : in std_ulogic;
     RXSYNCIN : in std_ulogic;
     RXSYNCMODE : in std_ulogic;
     RXSYSCLKSEL : in std_logic_vector(1 downto 0);
     RXUSERRDY : in std_ulogic;
     RXUSRCLK : in std_ulogic;
     RXUSRCLK2 : in std_ulogic;
     SIGVALIDCLK : in std_ulogic;
     TSTIN : in std_logic_vector(19 downto 0);
     TX8B10BBYPASS : in std_logic_vector(7 downto 0);
     TX8B10BEN : in std_ulogic;
     TXBUFDIFFCTRL : in std_logic_vector(2 downto 0);
     TXCOMINIT : in std_ulogic;
     TXCOMSAS : in std_ulogic;
     TXCOMWAKE : in std_ulogic;
     TXCTRL0 : in std_logic_vector(15 downto 0);
     TXCTRL1 : in std_logic_vector(15 downto 0);
     TXCTRL2 : in std_logic_vector(7 downto 0);
     TXDATA : in std_logic_vector(127 downto 0);
     TXDATAEXTENDRSVD : in std_logic_vector(7 downto 0);
     TXDEEMPH : in std_ulogic;
     TXDETECTRX : in std_ulogic;
     TXDIFFCTRL : in std_logic_vector(3 downto 0);
     TXDIFFPD : in std_ulogic;
     TXDLYBYPASS : in std_ulogic;
     TXDLYEN : in std_ulogic;
     TXDLYHOLD : in std_ulogic;
     TXDLYOVRDEN : in std_ulogic;
     TXDLYSRESET : in std_ulogic;
     TXDLYUPDOWN : in std_ulogic;
     TXELECIDLE : in std_ulogic;
     TXHEADER : in std_logic_vector(5 downto 0);
     TXINHIBIT : in std_ulogic;
     TXLATCLK : in std_ulogic;
     TXMAINCURSOR : in std_logic_vector(6 downto 0);
     TXMARGIN : in std_logic_vector(2 downto 0);
     TXOUTCLKSEL : in std_logic_vector(2 downto 0);
     TXPCSRESET : in std_ulogic;
     TXPD : in std_logic_vector(1 downto 0);
     TXPDELECIDLEMODE : in std_ulogic;
     TXPHALIGN : in std_ulogic;
     TXPHALIGNEN : in std_ulogic;
     TXPHDLYPD : in std_ulogic;
     TXPHDLYRESET : in std_ulogic;
     TXPHDLYTSTCLK : in std_ulogic;
     TXPHINIT : in std_ulogic;
     TXPHOVRDEN : in std_ulogic;
     TXPIPPMEN : in std_ulogic;
     TXPIPPMOVRDEN : in std_ulogic;
     TXPIPPMPD : in std_ulogic;
     TXPIPPMSEL : in std_ulogic;
     TXPIPPMSTEPSIZE : in std_logic_vector(4 downto 0);
     TXPISOPD : in std_ulogic;
     TXPLLCLKSEL : in std_logic_vector(1 downto 0);
     TXPMARESET : in std_ulogic;
     TXPOLARITY : in std_ulogic;
     TXPOSTCURSOR : in std_logic_vector(4 downto 0);
     TXPOSTCURSORINV : in std_ulogic;
     TXPRBSFORCEERR : in std_ulogic;
     TXPRBSSEL : in std_logic_vector(3 downto 0);
     TXPRECURSOR : in std_logic_vector(4 downto 0);
     TXPRECURSORINV : in std_ulogic;
     TXPROGDIVRESET : in std_ulogic;
     TXQPIBIASEN : in std_ulogic;
     TXQPISTRONGPDOWN : in std_ulogic;
     TXQPIWEAKPUP : in std_ulogic;
     TXRATE : in std_logic_vector(2 downto 0);
     TXRATEMODE : in std_ulogic;
     TXSEQUENCE : in std_logic_vector(6 downto 0);
     TXSWING : in std_ulogic;
     TXSYNCALLIN : in std_ulogic;
     TXSYNCIN : in std_ulogic;
     TXSYNCMODE : in std_ulogic;
     TXSYSCLKSEL : in std_logic_vector(1 downto 0);
     TXUSERRDY : in std_ulogic;
     TXUSRCLK : in std_ulogic;
     TXUSRCLK2 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  GTHE3_CHANNEL : component is "PRIMITIVE";

----- component GTHE3_COMMON -----
component GTHE3_COMMON
  generic (
     BIAS_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     BIAS_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     BIAS_CFG2 : std_logic_vector(15 downto 0) := X"0000";
     BIAS_CFG3 : std_logic_vector(15 downto 0) := X"0000";
     BIAS_CFG4 : std_logic_vector(15 downto 0) := X"0000";
     BIAS_CFG_RSVD : std_logic_vector(9 downto 0) := "0000000000";
     COMMON_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     COMMON_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     POR_CFG : std_logic_vector(15 downto 0) := X"0004";
     QPLL0_CFG0 : std_logic_vector(15 downto 0) := X"301C";
     QPLL0_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     QPLL0_CFG1_G3 : std_logic_vector(15 downto 0) := X"0020";
     QPLL0_CFG2 : std_logic_vector(15 downto 0) := X"0000";
     QPLL0_CFG2_G3 : std_logic_vector(15 downto 0) := X"0000";
     QPLL0_CFG3 : std_logic_vector(15 downto 0) := X"0120";
     QPLL0_CFG4 : std_logic_vector(15 downto 0) := X"0009";
     QPLL0_CP : std_logic_vector(9 downto 0) := "0000011111";
     QPLL0_CP_G3 : std_logic_vector(9 downto 0) := "0000011111";
     QPLL0_FBDIV : integer := 66;
     QPLL0_FBDIV_G3 : integer := 80;
     QPLL0_INIT_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     QPLL0_INIT_CFG1 : std_logic_vector(7 downto 0) := X"00";
     QPLL0_LOCK_CFG : std_logic_vector(15 downto 0) := X"21E8";
     QPLL0_LOCK_CFG_G3 : std_logic_vector(15 downto 0) := X"21E8";
     QPLL0_LPF : std_logic_vector(9 downto 0) := "1111111111";
     QPLL0_LPF_G3 : std_logic_vector(9 downto 0) := "1111111111";
     QPLL0_REFCLK_DIV : integer := 2;
     QPLL0_SDM_CFG0 : std_logic_vector(15 downto 0) := "0000000000000000";
     QPLL0_SDM_CFG1 : std_logic_vector(15 downto 0) := "0000000000000000";
     QPLL0_SDM_CFG2 : std_logic_vector(15 downto 0) := "0000000000000000";
     QPLL1_CFG0 : std_logic_vector(15 downto 0) := X"301C";
     QPLL1_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     QPLL1_CFG1_G3 : std_logic_vector(15 downto 0) := X"0020";
     QPLL1_CFG2 : std_logic_vector(15 downto 0) := X"0000";
     QPLL1_CFG2_G3 : std_logic_vector(15 downto 0) := X"0000";
     QPLL1_CFG3 : std_logic_vector(15 downto 0) := X"0120";
     QPLL1_CFG4 : std_logic_vector(15 downto 0) := X"0009";
     QPLL1_CP : std_logic_vector(9 downto 0) := "0000011111";
     QPLL1_CP_G3 : std_logic_vector(9 downto 0) := "0000011111";
     QPLL1_FBDIV : integer := 66;
     QPLL1_FBDIV_G3 : integer := 80;
     QPLL1_INIT_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     QPLL1_INIT_CFG1 : std_logic_vector(7 downto 0) := X"00";
     QPLL1_LOCK_CFG : std_logic_vector(15 downto 0) := X"21E8";
     QPLL1_LOCK_CFG_G3 : std_logic_vector(15 downto 0) := X"21E8";
     QPLL1_LPF : std_logic_vector(9 downto 0) := "1111111111";
     QPLL1_LPF_G3 : std_logic_vector(9 downto 0) := "1111111111";
     QPLL1_REFCLK_DIV : integer := 2;
     QPLL1_SDM_CFG0 : std_logic_vector(15 downto 0) := "0000000000000000";
     QPLL1_SDM_CFG1 : std_logic_vector(15 downto 0) := "0000000000000000";
     QPLL1_SDM_CFG2 : std_logic_vector(15 downto 0) := "0000000000000000";
     RSVD_ATTR0 : std_logic_vector(15 downto 0) := X"0000";
     RSVD_ATTR1 : std_logic_vector(15 downto 0) := X"0000";
     RSVD_ATTR2 : std_logic_vector(15 downto 0) := X"0000";
     RSVD_ATTR3 : std_logic_vector(15 downto 0) := X"0000";
     RXRECCLKOUT0_SEL : std_logic_vector(1 downto 0) := "00";
     RXRECCLKOUT1_SEL : std_logic_vector(1 downto 0) := "00";
     SARC_EN : std_ulogic := '1';
     SARC_SEL : std_ulogic := '0';
     SDM0DATA1_0 : std_logic_vector(15 downto 0) := "0000000000000000";
     SDM0DATA1_1 : std_logic_vector(8 downto 0) := "000000000";
     SDM0INITSEED0_0 : std_logic_vector(15 downto 0) := "0000000000000000";
     SDM0INITSEED0_1 : std_logic_vector(8 downto 0) := "000000000";
     SDM0_DATA_PIN_SEL : std_ulogic := '0';
     SDM0_WIDTH_PIN_SEL : std_ulogic := '0';
     SDM1DATA1_0 : std_logic_vector(15 downto 0) := "0000000000000000";
     SDM1DATA1_1 : std_logic_vector(8 downto 0) := "000000000";
     SDM1INITSEED0_0 : std_logic_vector(15 downto 0) := "0000000000000000";
     SDM1INITSEED0_1 : std_logic_vector(8 downto 0) := "000000000";
     SDM1_DATA_PIN_SEL : std_ulogic := '0';
     SDM1_WIDTH_PIN_SEL : std_ulogic := '0';
     SIM_QPLL0REFCLK_SEL : std_logic_vector(2 downto 0) := "001";
     SIM_QPLL1REFCLK_SEL : std_logic_vector(2 downto 0) := "001";
     SIM_RESET_SPEEDUP : string := "TRUE";
     SIM_VERSION : string := "Ver_1"
  );
  port (
     DRPDO : out std_logic_vector(15 downto 0);
     DRPRDY : out std_ulogic;
     PMARSVDOUT0 : out std_logic_vector(7 downto 0);
     PMARSVDOUT1 : out std_logic_vector(7 downto 0);
     QPLL0FBCLKLOST : out std_ulogic;
     QPLL0LOCK : out std_ulogic;
     QPLL0OUTCLK : out std_ulogic;
     QPLL0OUTREFCLK : out std_ulogic;
     QPLL0REFCLKLOST : out std_ulogic;
     QPLL1FBCLKLOST : out std_ulogic;
     QPLL1LOCK : out std_ulogic;
     QPLL1OUTCLK : out std_ulogic;
     QPLL1OUTREFCLK : out std_ulogic;
     QPLL1REFCLKLOST : out std_ulogic;
     QPLLDMONITOR0 : out std_logic_vector(7 downto 0);
     QPLLDMONITOR1 : out std_logic_vector(7 downto 0);
     REFCLKOUTMONITOR0 : out std_ulogic;
     REFCLKOUTMONITOR1 : out std_ulogic;
     RXRECCLK0_SEL : out std_logic_vector(1 downto 0);
     RXRECCLK1_SEL : out std_logic_vector(1 downto 0);
     BGBYPASSB : in std_ulogic;
     BGMONITORENB : in std_ulogic;
     BGPDB : in std_ulogic;
     BGRCALOVRD : in std_logic_vector(4 downto 0);
     BGRCALOVRDENB : in std_ulogic;
     DRPADDR : in std_logic_vector(8 downto 0);
     DRPCLK : in std_ulogic;
     DRPDI : in std_logic_vector(15 downto 0);
     DRPEN : in std_ulogic;
     DRPWE : in std_ulogic;
     GTGREFCLK0 : in std_ulogic;
     GTGREFCLK1 : in std_ulogic;
     GTNORTHREFCLK00 : in std_ulogic;
     GTNORTHREFCLK01 : in std_ulogic;
     GTNORTHREFCLK10 : in std_ulogic;
     GTNORTHREFCLK11 : in std_ulogic;
     GTREFCLK00 : in std_ulogic;
     GTREFCLK01 : in std_ulogic;
     GTREFCLK10 : in std_ulogic;
     GTREFCLK11 : in std_ulogic;
     GTSOUTHREFCLK00 : in std_ulogic;
     GTSOUTHREFCLK01 : in std_ulogic;
     GTSOUTHREFCLK10 : in std_ulogic;
     GTSOUTHREFCLK11 : in std_ulogic;
     PMARSVD0 : in std_logic_vector(7 downto 0);
     PMARSVD1 : in std_logic_vector(7 downto 0);
     QPLL0CLKRSVD0 : in std_ulogic;
     QPLL0CLKRSVD1 : in std_ulogic;
     QPLL0LOCKDETCLK : in std_ulogic;
     QPLL0LOCKEN : in std_ulogic;
     QPLL0PD : in std_ulogic;
     QPLL0REFCLKSEL : in std_logic_vector(2 downto 0);
     QPLL0RESET : in std_ulogic;
     QPLL1CLKRSVD0 : in std_ulogic;
     QPLL1CLKRSVD1 : in std_ulogic;
     QPLL1LOCKDETCLK : in std_ulogic;
     QPLL1LOCKEN : in std_ulogic;
     QPLL1PD : in std_ulogic;
     QPLL1REFCLKSEL : in std_logic_vector(2 downto 0);
     QPLL1RESET : in std_ulogic;
     QPLLRSVD1 : in std_logic_vector(7 downto 0);
     QPLLRSVD2 : in std_logic_vector(4 downto 0);
     QPLLRSVD3 : in std_logic_vector(4 downto 0);
     QPLLRSVD4 : in std_logic_vector(7 downto 0);
     RCALENB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  GTHE3_COMMON : component is "PRIMITIVE";

----- component GTPE2_CHANNEL -----
component GTPE2_CHANNEL
  generic (
     ACJTAG_DEBUG_MODE : bit := '0';
     ACJTAG_MODE : bit := '0';
     ACJTAG_RESET : bit := '0';
     ADAPT_CFG0 : bit_vector := "00000000000000000000";
     ALIGN_COMMA_DOUBLE : string := "FALSE";
     ALIGN_COMMA_ENABLE : bit_vector := "0001111111";
     ALIGN_COMMA_WORD : integer := 1;
     ALIGN_MCOMMA_DET : string := "TRUE";
     ALIGN_MCOMMA_VALUE : bit_vector := "1010000011";
     ALIGN_PCOMMA_DET : string := "TRUE";
     ALIGN_PCOMMA_VALUE : bit_vector := "0101111100";
     CBCC_DATA_SOURCE_SEL : string := "DECODED";
     CFOK_CFG : bit_vector := "1001001000000000000000001000000111010000000";
     CFOK_CFG2 : bit_vector := "0100000";
     CFOK_CFG3 : bit_vector := "0100000";
     CFOK_CFG4 : bit := '0';
     CFOK_CFG5 : bit_vector := "00";
     CFOK_CFG6 : bit_vector := "0000";
     CHAN_BOND_KEEP_ALIGN : string := "FALSE";
     CHAN_BOND_MAX_SKEW : integer := 7;
     CHAN_BOND_SEQ_1_1 : bit_vector := "0101111100";
     CHAN_BOND_SEQ_1_2 : bit_vector := "0000000000";
     CHAN_BOND_SEQ_1_3 : bit_vector := "0000000000";
     CHAN_BOND_SEQ_1_4 : bit_vector := "0000000000";
     CHAN_BOND_SEQ_1_ENABLE : bit_vector := "1111";
     CHAN_BOND_SEQ_2_1 : bit_vector := "0100000000";
     CHAN_BOND_SEQ_2_2 : bit_vector := "0100000000";
     CHAN_BOND_SEQ_2_3 : bit_vector := "0100000000";
     CHAN_BOND_SEQ_2_4 : bit_vector := "0100000000";
     CHAN_BOND_SEQ_2_ENABLE : bit_vector := "1111";
     CHAN_BOND_SEQ_2_USE : string := "FALSE";
     CHAN_BOND_SEQ_LEN : integer := 1;
     CLK_COMMON_SWING : bit := '0';
     CLK_CORRECT_USE : string := "TRUE";
     CLK_COR_KEEP_IDLE : string := "FALSE";
     CLK_COR_MAX_LAT : integer := 20;
     CLK_COR_MIN_LAT : integer := 18;
     CLK_COR_PRECEDENCE : string := "TRUE";
     CLK_COR_REPEAT_WAIT : integer := 0;
     CLK_COR_SEQ_1_1 : bit_vector := "0100011100";
     CLK_COR_SEQ_1_2 : bit_vector := "0000000000";
     CLK_COR_SEQ_1_3 : bit_vector := "0000000000";
     CLK_COR_SEQ_1_4 : bit_vector := "0000000000";
     CLK_COR_SEQ_1_ENABLE : bit_vector := "1111";
     CLK_COR_SEQ_2_1 : bit_vector := "0100000000";
     CLK_COR_SEQ_2_2 : bit_vector := "0100000000";
     CLK_COR_SEQ_2_3 : bit_vector := "0100000000";
     CLK_COR_SEQ_2_4 : bit_vector := "0100000000";
     CLK_COR_SEQ_2_ENABLE : bit_vector := "1111";
     CLK_COR_SEQ_2_USE : string := "FALSE";
     CLK_COR_SEQ_LEN : integer := 1;
     DEC_MCOMMA_DETECT : string := "TRUE";
     DEC_PCOMMA_DETECT : string := "TRUE";
     DEC_VALID_COMMA_ONLY : string := "TRUE";
     DMONITOR_CFG : bit_vector := X"000A00";
     ES_CLK_PHASE_SEL : bit := '0';
     ES_CONTROL : bit_vector := "000000";
     ES_ERRDET_EN : string := "FALSE";
     ES_EYE_SCAN_EN : string := "FALSE";
     ES_HORZ_OFFSET : bit_vector := X"010";
     ES_PMA_CFG : bit_vector := "0000000000";
     ES_PRESCALE : bit_vector := "00000";
     ES_QUALIFIER : bit_vector := X"00000000000000000000";
     ES_QUAL_MASK : bit_vector := X"00000000000000000000";
     ES_SDATA_MASK : bit_vector := X"00000000000000000000";
     ES_VERT_OFFSET : bit_vector := "000000000";
     FTS_DESKEW_SEQ_ENABLE : bit_vector := "1111";
     FTS_LANE_DESKEW_CFG : bit_vector := "1111";
     FTS_LANE_DESKEW_EN : string := "FALSE";
     GEARBOX_MODE : bit_vector := "000";
     IS_CLKRSVD0_INVERTED : std_ulogic := '0';
     IS_CLKRSVD1_INVERTED : std_ulogic := '0';
     IS_DMONITORCLK_INVERTED : std_ulogic := '0';
     IS_DRPCLK_INVERTED : std_ulogic := '0';
     IS_RXUSRCLK2_INVERTED : std_ulogic := '0';
     IS_RXUSRCLK_INVERTED : std_ulogic := '0';
     IS_SIGVALIDCLK_INVERTED : std_ulogic := '0';
     IS_TXPHDLYTSTCLK_INVERTED : std_ulogic := '0';
     IS_TXUSRCLK2_INVERTED : std_ulogic := '0';
     IS_TXUSRCLK_INVERTED : std_ulogic := '0';
     LOOPBACK_CFG : bit := '0';
     OUTREFCLK_SEL_INV : bit_vector := "11";
     PCS_PCIE_EN : string := "FALSE";
     PCS_RSVD_ATTR : bit_vector := X"000000000000";
     PD_TRANS_TIME_FROM_P2 : bit_vector := X"03C";
     PD_TRANS_TIME_NONE_P2 : bit_vector := X"19";
     PD_TRANS_TIME_TO_P2 : bit_vector := X"64";
     PMA_LOOPBACK_CFG : bit := '0';
     PMA_RSV : bit_vector := X"00000333";
     PMA_RSV2 : bit_vector := X"00002050";
     PMA_RSV3 : bit_vector := "00";
     PMA_RSV4 : bit_vector := "0000";
     PMA_RSV5 : bit := '0';
     PMA_RSV6 : bit := '0';
     PMA_RSV7 : bit := '0';
     RXBUFRESET_TIME : bit_vector := "00001";
     RXBUF_ADDR_MODE : string := "FULL";
     RXBUF_EIDLE_HI_CNT : bit_vector := "1000";
     RXBUF_EIDLE_LO_CNT : bit_vector := "0000";
     RXBUF_EN : string := "TRUE";
     RXBUF_RESET_ON_CB_CHANGE : string := "TRUE";
     RXBUF_RESET_ON_COMMAALIGN : string := "FALSE";
     RXBUF_RESET_ON_EIDLE : string := "FALSE";
     RXBUF_RESET_ON_RATE_CHANGE : string := "TRUE";
     RXBUF_THRESH_OVFLW : integer := 61;
     RXBUF_THRESH_OVRD : string := "FALSE";
     RXBUF_THRESH_UNDFLW : integer := 4;
     RXCDRFREQRESET_TIME : bit_vector := "00001";
     RXCDRPHRESET_TIME : bit_vector := "00001";
     RXCDR_CFG : bit_vector := X"0000107FE406001041010";
     RXCDR_FR_RESET_ON_EIDLE : bit := '0';
     RXCDR_HOLD_DURING_EIDLE : bit := '0';
     RXCDR_LOCK_CFG : bit_vector := "001001";
     RXCDR_PH_RESET_ON_EIDLE : bit := '0';
     RXDLY_CFG : bit_vector := X"0010";
     RXDLY_LCFG : bit_vector := X"020";
     RXDLY_TAP_CFG : bit_vector := X"0000";
     RXGEARBOX_EN : string := "FALSE";
     RXISCANRESET_TIME : bit_vector := "00001";
     RXLPMRESET_TIME : bit_vector := "0001111";
     RXLPM_BIAS_STARTUP_DISABLE : bit := '0';
     RXLPM_CFG : bit_vector := "0110";
     RXLPM_CFG1 : bit := '0';
     RXLPM_CM_CFG : bit := '0';
     RXLPM_GC_CFG : bit_vector := "111100010";
     RXLPM_GC_CFG2 : bit_vector := "001";
     RXLPM_HF_CFG : bit_vector := "00001111110000";
     RXLPM_HF_CFG2 : bit_vector := "01010";
     RXLPM_HF_CFG3 : bit_vector := "0000";
     RXLPM_HOLD_DURING_EIDLE : bit := '0';
     RXLPM_INCM_CFG : bit := '0';
     RXLPM_IPCM_CFG : bit := '0';
     RXLPM_LF_CFG : bit_vector := "000000001111110000";
     RXLPM_LF_CFG2 : bit_vector := "01010";
     RXLPM_OSINT_CFG : bit_vector := "100";
     RXOOB_CFG : bit_vector := "0000110";
     RXOOB_CLK_CFG : string := "PMA";
     RXOSCALRESET_TIME : bit_vector := "00011";
     RXOSCALRESET_TIMEOUT : bit_vector := "00000";
     RXOUT_DIV : integer := 2;
     RXPCSRESET_TIME : bit_vector := "00001";
     RXPHDLY_CFG : bit_vector := X"084000";
     RXPH_CFG : bit_vector := X"C00002";
     RXPH_MONITOR_SEL : bit_vector := "00000";
     RXPI_CFG0 : bit_vector := "000";
     RXPI_CFG1 : bit := '0';
     RXPI_CFG2 : bit := '0';
     RXPMARESET_TIME : bit_vector := "00011";
     RXPRBS_ERR_LOOPBACK : bit := '0';
     RXSLIDE_AUTO_WAIT : integer := 7;
     RXSLIDE_MODE : string := "OFF";
     RXSYNC_MULTILANE : bit := '0';
     RXSYNC_OVRD : bit := '0';
     RXSYNC_SKIP_DA : bit := '0';
     RX_BIAS_CFG : bit_vector := "0000111100110011";
     RX_BUFFER_CFG : bit_vector := "000000";
     RX_CLK25_DIV : integer := 7;
     RX_CLKMUX_EN : bit := '1';
     RX_CM_SEL : bit_vector := "11";
     RX_CM_TRIM : bit_vector := "0100";
     RX_DATA_WIDTH : integer := 20;
     RX_DDI_SEL : bit_vector := "000000";
     RX_DEBUG_CFG : bit_vector := "00000000000000";
     RX_DEFER_RESET_BUF_EN : string := "TRUE";
     RX_DISPERR_SEQ_MATCH : string := "TRUE";
     RX_OS_CFG : bit_vector := "0001111110000";
     RX_SIG_VALID_DLY : integer := 10;
     RX_XCLK_SEL : string := "RXREC";
     SAS_MAX_COM : integer := 64;
     SAS_MIN_COM : integer := 36;
     SATA_BURST_SEQ_LEN : bit_vector := "1111";
     SATA_BURST_VAL : bit_vector := "100";
     SATA_EIDLE_VAL : bit_vector := "100";
     SATA_MAX_BURST : integer := 8;
     SATA_MAX_INIT : integer := 21;
     SATA_MAX_WAKE : integer := 7;
     SATA_MIN_BURST : integer := 4;
     SATA_MIN_INIT : integer := 12;
     SATA_MIN_WAKE : integer := 4;
     SATA_PLL_CFG : string := "VCO_3000MHZ";
     SHOW_REALIGN_COMMA : string := "TRUE";
     SIM_RECEIVER_DETECT_PASS : string := "TRUE";
     SIM_RESET_SPEEDUP : string := "TRUE";
     SIM_TX_EIDLE_DRIVE_LEVEL : string := "X";
     SIM_VERSION : string := "1.0";
     TERM_RCAL_CFG : bit_vector := "100001000010000";
     TERM_RCAL_OVRD : bit_vector := "000";
     TRANS_TIME_RATE : bit_vector := X"0E";
     TST_RSV : bit_vector := X"00000000";
     TXBUF_EN : string := "TRUE";
     TXBUF_RESET_ON_RATE_CHANGE : string := "FALSE";
     TXDLY_CFG : bit_vector := X"0010";
     TXDLY_LCFG : bit_vector := X"020";
     TXDLY_TAP_CFG : bit_vector := X"0000";
     TXGEARBOX_EN : string := "FALSE";
     TXOOB_CFG : bit := '0';
     TXOUT_DIV : integer := 2;
     TXPCSRESET_TIME : bit_vector := "00001";
     TXPHDLY_CFG : bit_vector := X"084000";
     TXPH_CFG : bit_vector := X"0400";
     TXPH_MONITOR_SEL : bit_vector := "00000";
     TXPI_CFG0 : bit_vector := "00";
     TXPI_CFG1 : bit_vector := "00";
     TXPI_CFG2 : bit_vector := "00";
     TXPI_CFG3 : bit := '0';
     TXPI_CFG4 : bit := '0';
     TXPI_CFG5 : bit_vector := "000";
     TXPI_GREY_SEL : bit := '0';
     TXPI_INVSTROBE_SEL : bit := '0';
     TXPI_PPMCLK_SEL : string := "TXUSRCLK2";
     TXPI_PPM_CFG : bit_vector := "00000000";
     TXPI_SYNFREQ_PPM : bit_vector := "000";
     TXPMARESET_TIME : bit_vector := "00001";
     TXSYNC_MULTILANE : bit := '0';
     TXSYNC_OVRD : bit := '0';
     TXSYNC_SKIP_DA : bit := '0';
     TX_CLK25_DIV : integer := 7;
     TX_CLKMUX_EN : bit := '1';
     TX_DATA_WIDTH : integer := 20;
     TX_DEEMPH0 : bit_vector := "000000";
     TX_DEEMPH1 : bit_vector := "000000";
     TX_DRIVE_MODE : string := "DIRECT";
     TX_EIDLE_ASSERT_DELAY : bit_vector := "110";
     TX_EIDLE_DEASSERT_DELAY : bit_vector := "100";
     TX_LOOPBACK_DRIVE_HIZ : string := "FALSE";
     TX_MAINCURSOR_SEL : bit := '0';
     TX_MARGIN_FULL_0 : bit_vector := "1001110";
     TX_MARGIN_FULL_1 : bit_vector := "1001001";
     TX_MARGIN_FULL_2 : bit_vector := "1000101";
     TX_MARGIN_FULL_3 : bit_vector := "1000010";
     TX_MARGIN_FULL_4 : bit_vector := "1000000";
     TX_MARGIN_LOW_0 : bit_vector := "1000110";
     TX_MARGIN_LOW_1 : bit_vector := "1000100";
     TX_MARGIN_LOW_2 : bit_vector := "1000010";
     TX_MARGIN_LOW_3 : bit_vector := "1000000";
     TX_MARGIN_LOW_4 : bit_vector := "1000000";
     TX_PREDRIVER_MODE : bit := '0';
     TX_RXDETECT_CFG : bit_vector := X"1832";
     TX_RXDETECT_REF : bit_vector := "100";
     TX_XCLK_SEL : string := "TXUSR";
     UCODEER_CLR : bit := '0';
     USE_PCS_CLK_PHASE_SEL : bit := '0'
  );
  port (
     DMONITOROUT : out std_logic_vector(14 downto 0);
     DRPDO : out std_logic_vector(15 downto 0);
     DRPRDY : out std_ulogic;
     EYESCANDATAERROR : out std_ulogic;
     GTPTXN : out std_ulogic;
     GTPTXP : out std_ulogic;
     PCSRSVDOUT : out std_logic_vector(15 downto 0);
     PHYSTATUS : out std_ulogic;
     PMARSVDOUT0 : out std_ulogic;
     PMARSVDOUT1 : out std_ulogic;
     RXBUFSTATUS : out std_logic_vector(2 downto 0);
     RXBYTEISALIGNED : out std_ulogic;
     RXBYTEREALIGN : out std_ulogic;
     RXCDRLOCK : out std_ulogic;
     RXCHANBONDSEQ : out std_ulogic;
     RXCHANISALIGNED : out std_ulogic;
     RXCHANREALIGN : out std_ulogic;
     RXCHARISCOMMA : out std_logic_vector(3 downto 0);
     RXCHARISK : out std_logic_vector(3 downto 0);
     RXCHBONDO : out std_logic_vector(3 downto 0);
     RXCLKCORCNT : out std_logic_vector(1 downto 0);
     RXCOMINITDET : out std_ulogic;
     RXCOMMADET : out std_ulogic;
     RXCOMSASDET : out std_ulogic;
     RXCOMWAKEDET : out std_ulogic;
     RXDATA : out std_logic_vector(31 downto 0);
     RXDATAVALID : out std_logic_vector(1 downto 0);
     RXDISPERR : out std_logic_vector(3 downto 0);
     RXDLYSRESETDONE : out std_ulogic;
     RXELECIDLE : out std_ulogic;
     RXHEADER : out std_logic_vector(2 downto 0);
     RXHEADERVALID : out std_ulogic;
     RXNOTINTABLE : out std_logic_vector(3 downto 0);
     RXOSINTDONE : out std_ulogic;
     RXOSINTSTARTED : out std_ulogic;
     RXOSINTSTROBEDONE : out std_ulogic;
     RXOSINTSTROBESTARTED : out std_ulogic;
     RXOUTCLK : out std_ulogic;
     RXOUTCLKFABRIC : out std_ulogic;
     RXOUTCLKPCS : out std_ulogic;
     RXPHALIGNDONE : out std_ulogic;
     RXPHMONITOR : out std_logic_vector(4 downto 0);
     RXPHSLIPMONITOR : out std_logic_vector(4 downto 0);
     RXPMARESETDONE : out std_ulogic;
     RXPRBSERR : out std_ulogic;
     RXRATEDONE : out std_ulogic;
     RXRESETDONE : out std_ulogic;
     RXSTARTOFSEQ : out std_logic_vector(1 downto 0);
     RXSTATUS : out std_logic_vector(2 downto 0);
     RXSYNCDONE : out std_ulogic;
     RXSYNCOUT : out std_ulogic;
     RXVALID : out std_ulogic;
     TXBUFSTATUS : out std_logic_vector(1 downto 0);
     TXCOMFINISH : out std_ulogic;
     TXDLYSRESETDONE : out std_ulogic;
     TXGEARBOXREADY : out std_ulogic;
     TXOUTCLK : out std_ulogic;
     TXOUTCLKFABRIC : out std_ulogic;
     TXOUTCLKPCS : out std_ulogic;
     TXPHALIGNDONE : out std_ulogic;
     TXPHINITDONE : out std_ulogic;
     TXPMARESETDONE : out std_ulogic;
     TXRATEDONE : out std_ulogic;
     TXRESETDONE : out std_ulogic;
     TXSYNCDONE : out std_ulogic;
     TXSYNCOUT : out std_ulogic;
     CFGRESET : in std_ulogic;
     CLKRSVD0 : in std_ulogic;
     CLKRSVD1 : in std_ulogic;
     DMONFIFORESET : in std_ulogic;
     DMONITORCLK : in std_ulogic;
     DRPADDR : in std_logic_vector(8 downto 0);
     DRPCLK : in std_ulogic;
     DRPDI : in std_logic_vector(15 downto 0);
     DRPEN : in std_ulogic;
     DRPWE : in std_ulogic;
     EYESCANMODE : in std_ulogic;
     EYESCANRESET : in std_ulogic;
     EYESCANTRIGGER : in std_ulogic;
     GTPRXN : in std_ulogic;
     GTPRXP : in std_ulogic;
     GTRESETSEL : in std_ulogic;
     GTRSVD : in std_logic_vector(15 downto 0);
     GTRXRESET : in std_ulogic;
     GTTXRESET : in std_ulogic;
     LOOPBACK : in std_logic_vector(2 downto 0);
     PCSRSVDIN : in std_logic_vector(15 downto 0);
     PLL0CLK : in std_ulogic;
     PLL0REFCLK : in std_ulogic;
     PLL1CLK : in std_ulogic;
     PLL1REFCLK : in std_ulogic;
     PMARSVDIN0 : in std_ulogic;
     PMARSVDIN1 : in std_ulogic;
     PMARSVDIN2 : in std_ulogic;
     PMARSVDIN3 : in std_ulogic;
     PMARSVDIN4 : in std_ulogic;
     RESETOVRD : in std_ulogic;
     RX8B10BEN : in std_ulogic;
     RXADAPTSELTEST : in std_logic_vector(13 downto 0);
     RXBUFRESET : in std_ulogic;
     RXCDRFREQRESET : in std_ulogic;
     RXCDRHOLD : in std_ulogic;
     RXCDROVRDEN : in std_ulogic;
     RXCDRRESET : in std_ulogic;
     RXCDRRESETRSV : in std_ulogic;
     RXCHBONDEN : in std_ulogic;
     RXCHBONDI : in std_logic_vector(3 downto 0);
     RXCHBONDLEVEL : in std_logic_vector(2 downto 0);
     RXCHBONDMASTER : in std_ulogic;
     RXCHBONDSLAVE : in std_ulogic;
     RXCOMMADETEN : in std_ulogic;
     RXDDIEN : in std_ulogic;
     RXDFEXYDEN : in std_ulogic;
     RXDLYBYPASS : in std_ulogic;
     RXDLYEN : in std_ulogic;
     RXDLYOVRDEN : in std_ulogic;
     RXDLYSRESET : in std_ulogic;
     RXELECIDLEMODE : in std_logic_vector(1 downto 0);
     RXGEARBOXSLIP : in std_ulogic;
     RXLPMHFHOLD : in std_ulogic;
     RXLPMHFOVRDEN : in std_ulogic;
     RXLPMLFHOLD : in std_ulogic;
     RXLPMLFOVRDEN : in std_ulogic;
     RXLPMOSINTNTRLEN : in std_ulogic;
     RXLPMRESET : in std_ulogic;
     RXMCOMMAALIGNEN : in std_ulogic;
     RXOOBRESET : in std_ulogic;
     RXOSCALRESET : in std_ulogic;
     RXOSHOLD : in std_ulogic;
     RXOSINTCFG : in std_logic_vector(3 downto 0);
     RXOSINTEN : in std_ulogic;
     RXOSINTHOLD : in std_ulogic;
     RXOSINTID0 : in std_logic_vector(3 downto 0);
     RXOSINTNTRLEN : in std_ulogic;
     RXOSINTOVRDEN : in std_ulogic;
     RXOSINTPD : in std_ulogic;
     RXOSINTSTROBE : in std_ulogic;
     RXOSINTTESTOVRDEN : in std_ulogic;
     RXOSOVRDEN : in std_ulogic;
     RXOUTCLKSEL : in std_logic_vector(2 downto 0);
     RXPCOMMAALIGNEN : in std_ulogic;
     RXPCSRESET : in std_ulogic;
     RXPD : in std_logic_vector(1 downto 0);
     RXPHALIGN : in std_ulogic;
     RXPHALIGNEN : in std_ulogic;
     RXPHDLYPD : in std_ulogic;
     RXPHDLYRESET : in std_ulogic;
     RXPHOVRDEN : in std_ulogic;
     RXPMARESET : in std_ulogic;
     RXPOLARITY : in std_ulogic;
     RXPRBSCNTRESET : in std_ulogic;
     RXPRBSSEL : in std_logic_vector(2 downto 0);
     RXRATE : in std_logic_vector(2 downto 0);
     RXRATEMODE : in std_ulogic;
     RXSLIDE : in std_ulogic;
     RXSYNCALLIN : in std_ulogic;
     RXSYNCIN : in std_ulogic;
     RXSYNCMODE : in std_ulogic;
     RXSYSCLKSEL : in std_logic_vector(1 downto 0);
     RXUSERRDY : in std_ulogic;
     RXUSRCLK : in std_ulogic;
     RXUSRCLK2 : in std_ulogic;
     SETERRSTATUS : in std_ulogic;
     SIGVALIDCLK : in std_ulogic;
     TSTIN : in std_logic_vector(19 downto 0);
     TX8B10BBYPASS : in std_logic_vector(3 downto 0);
     TX8B10BEN : in std_ulogic;
     TXBUFDIFFCTRL : in std_logic_vector(2 downto 0);
     TXCHARDISPMODE : in std_logic_vector(3 downto 0);
     TXCHARDISPVAL : in std_logic_vector(3 downto 0);
     TXCHARISK : in std_logic_vector(3 downto 0);
     TXCOMINIT : in std_ulogic;
     TXCOMSAS : in std_ulogic;
     TXCOMWAKE : in std_ulogic;
     TXDATA : in std_logic_vector(31 downto 0);
     TXDEEMPH : in std_ulogic;
     TXDETECTRX : in std_ulogic;
     TXDIFFCTRL : in std_logic_vector(3 downto 0);
     TXDIFFPD : in std_ulogic;
     TXDLYBYPASS : in std_ulogic;
     TXDLYEN : in std_ulogic;
     TXDLYHOLD : in std_ulogic;
     TXDLYOVRDEN : in std_ulogic;
     TXDLYSRESET : in std_ulogic;
     TXDLYUPDOWN : in std_ulogic;
     TXELECIDLE : in std_ulogic;
     TXHEADER : in std_logic_vector(2 downto 0);
     TXINHIBIT : in std_ulogic;
     TXMAINCURSOR : in std_logic_vector(6 downto 0);
     TXMARGIN : in std_logic_vector(2 downto 0);
     TXOUTCLKSEL : in std_logic_vector(2 downto 0);
     TXPCSRESET : in std_ulogic;
     TXPD : in std_logic_vector(1 downto 0);
     TXPDELECIDLEMODE : in std_ulogic;
     TXPHALIGN : in std_ulogic;
     TXPHALIGNEN : in std_ulogic;
     TXPHDLYPD : in std_ulogic;
     TXPHDLYRESET : in std_ulogic;
     TXPHDLYTSTCLK : in std_ulogic;
     TXPHINIT : in std_ulogic;
     TXPHOVRDEN : in std_ulogic;
     TXPIPPMEN : in std_ulogic;
     TXPIPPMOVRDEN : in std_ulogic;
     TXPIPPMPD : in std_ulogic;
     TXPIPPMSEL : in std_ulogic;
     TXPIPPMSTEPSIZE : in std_logic_vector(4 downto 0);
     TXPISOPD : in std_ulogic;
     TXPMARESET : in std_ulogic;
     TXPOLARITY : in std_ulogic;
     TXPOSTCURSOR : in std_logic_vector(4 downto 0);
     TXPOSTCURSORINV : in std_ulogic;
     TXPRBSFORCEERR : in std_ulogic;
     TXPRBSSEL : in std_logic_vector(2 downto 0);
     TXPRECURSOR : in std_logic_vector(4 downto 0);
     TXPRECURSORINV : in std_ulogic;
     TXRATE : in std_logic_vector(2 downto 0);
     TXRATEMODE : in std_ulogic;
     TXSEQUENCE : in std_logic_vector(6 downto 0);
     TXSTARTSEQ : in std_ulogic;
     TXSWING : in std_ulogic;
     TXSYNCALLIN : in std_ulogic;
     TXSYNCIN : in std_ulogic;
     TXSYNCMODE : in std_ulogic;
     TXSYSCLKSEL : in std_logic_vector(1 downto 0);
     TXUSERRDY : in std_ulogic;
     TXUSRCLK : in std_ulogic;
     TXUSRCLK2 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  GTPE2_CHANNEL : component is "PRIMITIVE";

----- component GTPE2_COMMON -----
component GTPE2_COMMON
  generic (
     BIAS_CFG : bit_vector := X"0000000000000000";
     COMMON_CFG : bit_vector := X"00000000";
     IS_DRPCLK_INVERTED : std_ulogic := '0';
     IS_GTGREFCLK0_INVERTED : std_ulogic := '0';
     IS_GTGREFCLK1_INVERTED : std_ulogic := '0';
     IS_PLL0LOCKDETCLK_INVERTED : std_ulogic := '0';
     IS_PLL1LOCKDETCLK_INVERTED : std_ulogic := '0';
     PLL0_CFG : bit_vector := X"01F03DC";
     PLL0_DMON_CFG : bit := '0';
     PLL0_FBDIV : integer := 4;
     PLL0_FBDIV_45 : integer := 5;
     PLL0_INIT_CFG : bit_vector := X"00001E";
     PLL0_LOCK_CFG : bit_vector := X"1E8";
     PLL0_REFCLK_DIV : integer := 1;
     PLL1_CFG : bit_vector := X"01F03DC";
     PLL1_DMON_CFG : bit := '0';
     PLL1_FBDIV : integer := 4;
     PLL1_FBDIV_45 : integer := 5;
     PLL1_INIT_CFG : bit_vector := X"00001E";
     PLL1_LOCK_CFG : bit_vector := X"1E8";
     PLL1_REFCLK_DIV : integer := 1;
     PLL_CLKOUT_CFG : bit_vector := "00000000";
     RSVD_ATTR0 : bit_vector := X"0000";
     RSVD_ATTR1 : bit_vector := X"0000";
     SIM_PLL0REFCLK_SEL : bit_vector := "001";
     SIM_PLL1REFCLK_SEL : bit_vector := "001";
     SIM_RESET_SPEEDUP : string := "TRUE";
     SIM_VERSION : string := "1.0"
  );
  port (
     DMONITOROUT : out std_logic_vector(7 downto 0);
     DRPDO : out std_logic_vector(15 downto 0);
     DRPRDY : out std_ulogic;
     PLL0FBCLKLOST : out std_ulogic;
     PLL0LOCK : out std_ulogic;
     PLL0OUTCLK : out std_ulogic;
     PLL0OUTREFCLK : out std_ulogic;
     PLL0REFCLKLOST : out std_ulogic;
     PLL1FBCLKLOST : out std_ulogic;
     PLL1LOCK : out std_ulogic;
     PLL1OUTCLK : out std_ulogic;
     PLL1OUTREFCLK : out std_ulogic;
     PLL1REFCLKLOST : out std_ulogic;
     PMARSVDOUT : out std_logic_vector(15 downto 0);
     REFCLKOUTMONITOR0 : out std_ulogic;
     REFCLKOUTMONITOR1 : out std_ulogic;
     BGBYPASSB : in std_ulogic;
     BGMONITORENB : in std_ulogic;
     BGPDB : in std_ulogic;
     BGRCALOVRD : in std_logic_vector(4 downto 0);
     BGRCALOVRDENB : in std_ulogic;
     DRPADDR : in std_logic_vector(7 downto 0);
     DRPCLK : in std_ulogic;
     DRPDI : in std_logic_vector(15 downto 0);
     DRPEN : in std_ulogic;
     DRPWE : in std_ulogic;
     GTEASTREFCLK0 : in std_ulogic;
     GTEASTREFCLK1 : in std_ulogic;
     GTGREFCLK0 : in std_ulogic;
     GTGREFCLK1 : in std_ulogic;
     GTREFCLK0 : in std_ulogic;
     GTREFCLK1 : in std_ulogic;
     GTWESTREFCLK0 : in std_ulogic;
     GTWESTREFCLK1 : in std_ulogic;
     PLL0LOCKDETCLK : in std_ulogic;
     PLL0LOCKEN : in std_ulogic;
     PLL0PD : in std_ulogic;
     PLL0REFCLKSEL : in std_logic_vector(2 downto 0);
     PLL0RESET : in std_ulogic;
     PLL1LOCKDETCLK : in std_ulogic;
     PLL1LOCKEN : in std_ulogic;
     PLL1PD : in std_ulogic;
     PLL1REFCLKSEL : in std_logic_vector(2 downto 0);
     PLL1RESET : in std_ulogic;
     PLLRSVD1 : in std_logic_vector(15 downto 0);
     PLLRSVD2 : in std_logic_vector(4 downto 0);
     PMARSVD : in std_logic_vector(7 downto 0);
     RCALENB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  GTPE2_COMMON : component is "PRIMITIVE";

----- component GTXE2_CHANNEL -----
component GTXE2_CHANNEL
  generic (
     ALIGN_COMMA_DOUBLE : string := "FALSE";
     ALIGN_COMMA_ENABLE : bit_vector := "0001111111";
     ALIGN_COMMA_WORD : integer := 1;
     ALIGN_MCOMMA_DET : string := "TRUE";
     ALIGN_MCOMMA_VALUE : bit_vector := "1010000011";
     ALIGN_PCOMMA_DET : string := "TRUE";
     ALIGN_PCOMMA_VALUE : bit_vector := "0101111100";
     CBCC_DATA_SOURCE_SEL : string := "DECODED";
     CHAN_BOND_KEEP_ALIGN : string := "FALSE";
     CHAN_BOND_MAX_SKEW : integer := 7;
     CHAN_BOND_SEQ_1_1 : bit_vector := "0101111100";
     CHAN_BOND_SEQ_1_2 : bit_vector := "0000000000";
     CHAN_BOND_SEQ_1_3 : bit_vector := "0000000000";
     CHAN_BOND_SEQ_1_4 : bit_vector := "0000000000";
     CHAN_BOND_SEQ_1_ENABLE : bit_vector := "1111";
     CHAN_BOND_SEQ_2_1 : bit_vector := "0100000000";
     CHAN_BOND_SEQ_2_2 : bit_vector := "0100000000";
     CHAN_BOND_SEQ_2_3 : bit_vector := "0100000000";
     CHAN_BOND_SEQ_2_4 : bit_vector := "0100000000";
     CHAN_BOND_SEQ_2_ENABLE : bit_vector := "1111";
     CHAN_BOND_SEQ_2_USE : string := "FALSE";
     CHAN_BOND_SEQ_LEN : integer := 1;
     CLK_CORRECT_USE : string := "TRUE";
     CLK_COR_KEEP_IDLE : string := "FALSE";
     CLK_COR_MAX_LAT : integer := 20;
     CLK_COR_MIN_LAT : integer := 18;
     CLK_COR_PRECEDENCE : string := "TRUE";
     CLK_COR_REPEAT_WAIT : integer := 0;
     CLK_COR_SEQ_1_1 : bit_vector := "0100011100";
     CLK_COR_SEQ_1_2 : bit_vector := "0000000000";
     CLK_COR_SEQ_1_3 : bit_vector := "0000000000";
     CLK_COR_SEQ_1_4 : bit_vector := "0000000000";
     CLK_COR_SEQ_1_ENABLE : bit_vector := "1111";
     CLK_COR_SEQ_2_1 : bit_vector := "0100000000";
     CLK_COR_SEQ_2_2 : bit_vector := "0100000000";
     CLK_COR_SEQ_2_3 : bit_vector := "0100000000";
     CLK_COR_SEQ_2_4 : bit_vector := "0100000000";
     CLK_COR_SEQ_2_ENABLE : bit_vector := "1111";
     CLK_COR_SEQ_2_USE : string := "FALSE";
     CLK_COR_SEQ_LEN : integer := 1;
     CPLL_CFG : bit_vector := X"B007D8";
     CPLL_FBDIV : integer := 4;
     CPLL_FBDIV_45 : integer := 5;
     CPLL_INIT_CFG : bit_vector := X"00001E";
     CPLL_LOCK_CFG : bit_vector := X"01E8";
     CPLL_REFCLK_DIV : integer := 1;
     DEC_MCOMMA_DETECT : string := "TRUE";
     DEC_PCOMMA_DETECT : string := "TRUE";
     DEC_VALID_COMMA_ONLY : string := "TRUE";
     DMONITOR_CFG : bit_vector := X"000A00";
     ES_CONTROL : bit_vector := "000000";
     ES_ERRDET_EN : string := "FALSE";
     ES_EYE_SCAN_EN : string := "FALSE";
     ES_HORZ_OFFSET : bit_vector := X"000";
     ES_PMA_CFG : bit_vector := "0000000000";
     ES_PRESCALE : bit_vector := "00000";
     ES_QUALIFIER : bit_vector := X"00000000000000000000";
     ES_QUAL_MASK : bit_vector := X"00000000000000000000";
     ES_SDATA_MASK : bit_vector := X"00000000000000000000";
     ES_VERT_OFFSET : bit_vector := "000000000";
     FTS_DESKEW_SEQ_ENABLE : bit_vector := "1111";
     FTS_LANE_DESKEW_CFG : bit_vector := "1111";
     FTS_LANE_DESKEW_EN : string := "FALSE";
     GEARBOX_MODE : bit_vector := "000";
     IS_CPLLLOCKDETCLK_INVERTED : std_ulogic := '0';
     IS_DRPCLK_INVERTED : std_ulogic := '0';
     IS_GTGREFCLK_INVERTED : std_ulogic := '0';
     IS_RXUSRCLK2_INVERTED : std_ulogic := '0';
     IS_RXUSRCLK_INVERTED : std_ulogic := '0';
     IS_TXPHDLYTSTCLK_INVERTED : std_ulogic := '0';
     IS_TXUSRCLK2_INVERTED : std_ulogic := '0';
     IS_TXUSRCLK_INVERTED : std_ulogic := '0';
     OUTREFCLK_SEL_INV : bit_vector := "11";
     PCS_PCIE_EN : string := "FALSE";
     PCS_RSVD_ATTR : bit_vector := X"000000000000";
     PD_TRANS_TIME_FROM_P2 : bit_vector := X"03C";
     PD_TRANS_TIME_NONE_P2 : bit_vector := X"19";
     PD_TRANS_TIME_TO_P2 : bit_vector := X"64";
     PMA_RSV : bit_vector := X"00000000";
     PMA_RSV2 : bit_vector := X"2050";
     PMA_RSV3 : bit_vector := "00";
     PMA_RSV4 : bit_vector := X"00000000";
     RXBUFRESET_TIME : bit_vector := "00001";
     RXBUF_ADDR_MODE : string := "FULL";
     RXBUF_EIDLE_HI_CNT : bit_vector := "1000";
     RXBUF_EIDLE_LO_CNT : bit_vector := "0000";
     RXBUF_EN : string := "TRUE";
     RXBUF_RESET_ON_CB_CHANGE : string := "TRUE";
     RXBUF_RESET_ON_COMMAALIGN : string := "FALSE";
     RXBUF_RESET_ON_EIDLE : string := "FALSE";
     RXBUF_RESET_ON_RATE_CHANGE : string := "TRUE";
     RXBUF_THRESH_OVFLW : integer := 61;
     RXBUF_THRESH_OVRD : string := "FALSE";
     RXBUF_THRESH_UNDFLW : integer := 4;
     RXCDRFREQRESET_TIME : bit_vector := "00001";
     RXCDRPHRESET_TIME : bit_vector := "00001";
     RXCDR_CFG : bit_vector := X"0B000023FF20400020";
     RXCDR_FR_RESET_ON_EIDLE : bit := '0';
     RXCDR_HOLD_DURING_EIDLE : bit := '0';
     RXCDR_LOCK_CFG : bit_vector := "010101";
     RXCDR_PH_RESET_ON_EIDLE : bit := '0';
     RXDFELPMRESET_TIME : bit_vector := "0001111";
     RXDLY_CFG : bit_vector := X"001F";
     RXDLY_LCFG : bit_vector := X"030";
     RXDLY_TAP_CFG : bit_vector := X"0000";
     RXGEARBOX_EN : string := "FALSE";
     RXISCANRESET_TIME : bit_vector := "00001";
     RXLPM_HF_CFG : bit_vector := "00000011110000";
     RXLPM_LF_CFG : bit_vector := "00000011110000";
     RXOOB_CFG : bit_vector := "0000110";
     RXOUT_DIV : integer := 2;
     RXPCSRESET_TIME : bit_vector := "00001";
     RXPHDLY_CFG : bit_vector := X"084020";
     RXPH_CFG : bit_vector := X"000000";
     RXPH_MONITOR_SEL : bit_vector := "00000";
     RXPMARESET_TIME : bit_vector := "00011";
     RXPRBS_ERR_LOOPBACK : bit := '0';
     RXSLIDE_AUTO_WAIT : integer := 7;
     RXSLIDE_MODE : string := "OFF";
     RX_BIAS_CFG : bit_vector := "000000000000";
     RX_BUFFER_CFG : bit_vector := "000000";
     RX_CLK25_DIV : integer := 7;
     RX_CLKMUX_PD : bit := '1';
     RX_CM_SEL : bit_vector := "11";
     RX_CM_TRIM : bit_vector := "100";
     RX_DATA_WIDTH : integer := 20;
     RX_DDI_SEL : bit_vector := "000000";
     RX_DEBUG_CFG : bit_vector := "000000000000";
     RX_DEFER_RESET_BUF_EN : string := "TRUE";
     RX_DFE_GAIN_CFG : bit_vector := X"180E0F";
     RX_DFE_H2_CFG : bit_vector := "000111100000";
     RX_DFE_H3_CFG : bit_vector := "000111100000";
     RX_DFE_H4_CFG : bit_vector := "00011110000";
     RX_DFE_H5_CFG : bit_vector := "00011110000";
     RX_DFE_KL_CFG : bit_vector := "0001111110000";
     RX_DFE_KL_CFG2 : bit_vector := X"3008E56A";
     RX_DFE_LPM_CFG : bit_vector := X"0904";
     RX_DFE_LPM_HOLD_DURING_EIDLE : bit := '0';
     RX_DFE_UT_CFG : bit_vector := "00111111000000000";
     RX_DFE_VP_CFG : bit_vector := "00011111100000000";
     RX_DFE_XYD_CFG : bit_vector := "0000000010000";
     RX_DISPERR_SEQ_MATCH : string := "TRUE";
     RX_INT_DATAWIDTH : integer := 0;
     RX_OS_CFG : bit_vector := "0001111110000";
     RX_SIG_VALID_DLY : integer := 10;
     RX_XCLK_SEL : string := "RXREC";
     SAS_MAX_COM : integer := 64;
     SAS_MIN_COM : integer := 36;
     SATA_BURST_SEQ_LEN : bit_vector := "1111";
     SATA_BURST_VAL : bit_vector := "100";
     SATA_CPLL_CFG : string := "VCO_3000MHZ";
     SATA_EIDLE_VAL : bit_vector := "100";
     SATA_MAX_BURST : integer := 8;
     SATA_MAX_INIT : integer := 21;
     SATA_MAX_WAKE : integer := 7;
     SATA_MIN_BURST : integer := 4;
     SATA_MIN_INIT : integer := 12;
     SATA_MIN_WAKE : integer := 4;
     SHOW_REALIGN_COMMA : string := "TRUE";
     SIM_CPLLREFCLK_SEL : bit_vector := "001";
     SIM_RECEIVER_DETECT_PASS : string := "TRUE";
     SIM_RESET_SPEEDUP : string := "TRUE";
     SIM_TX_EIDLE_DRIVE_LEVEL : string := "X";
     SIM_VERSION : string := "4.0";
     TERM_RCAL_CFG : bit_vector := "10000";
     TERM_RCAL_OVRD : bit := '0';
     TRANS_TIME_RATE : bit_vector := X"0E";
     TST_RSV : bit_vector := X"00000000";
     TXBUF_EN : string := "TRUE";
     TXBUF_RESET_ON_RATE_CHANGE : string := "FALSE";
     TXDLY_CFG : bit_vector := X"001F";
     TXDLY_LCFG : bit_vector := X"030";
     TXDLY_TAP_CFG : bit_vector := X"0000";
     TXGEARBOX_EN : string := "FALSE";
     TXOUT_DIV : integer := 2;
     TXPCSRESET_TIME : bit_vector := "00001";
     TXPHDLY_CFG : bit_vector := X"084020";
     TXPH_CFG : bit_vector := X"0780";
     TXPH_MONITOR_SEL : bit_vector := "00000";
     TXPMARESET_TIME : bit_vector := "00001";
     TX_CLK25_DIV : integer := 7;
     TX_CLKMUX_PD : bit := '1';
     TX_DATA_WIDTH : integer := 20;
     TX_DEEMPH0 : bit_vector := "00000";
     TX_DEEMPH1 : bit_vector := "00000";
     TX_DRIVE_MODE : string := "DIRECT";
     TX_EIDLE_ASSERT_DELAY : bit_vector := "110";
     TX_EIDLE_DEASSERT_DELAY : bit_vector := "100";
     TX_INT_DATAWIDTH : integer := 0;
     TX_LOOPBACK_DRIVE_HIZ : string := "FALSE";
     TX_MAINCURSOR_SEL : bit := '0';
     TX_MARGIN_FULL_0 : bit_vector := "1001110";
     TX_MARGIN_FULL_1 : bit_vector := "1001001";
     TX_MARGIN_FULL_2 : bit_vector := "1000101";
     TX_MARGIN_FULL_3 : bit_vector := "1000010";
     TX_MARGIN_FULL_4 : bit_vector := "1000000";
     TX_MARGIN_LOW_0 : bit_vector := "1000110";
     TX_MARGIN_LOW_1 : bit_vector := "1000100";
     TX_MARGIN_LOW_2 : bit_vector := "1000010";
     TX_MARGIN_LOW_3 : bit_vector := "1000000";
     TX_MARGIN_LOW_4 : bit_vector := "1000000";
     TX_PREDRIVER_MODE : bit := '0';
     TX_QPI_STATUS_EN : bit := '0';
     TX_RXDETECT_CFG : bit_vector := X"1832";
     TX_RXDETECT_REF : bit_vector := "100";
     TX_XCLK_SEL : string := "TXUSR";
     UCODEER_CLR : bit := '0'
  );
  port (
     CPLLFBCLKLOST : out std_ulogic;
     CPLLLOCK : out std_ulogic;
     CPLLREFCLKLOST : out std_ulogic;
     DMONITOROUT : out std_logic_vector(7 downto 0);
     DRPDO : out std_logic_vector(15 downto 0);
     DRPRDY : out std_ulogic;
     EYESCANDATAERROR : out std_ulogic;
     GTREFCLKMONITOR : out std_ulogic;
     GTXTXN : out std_ulogic;
     GTXTXP : out std_ulogic;
     PCSRSVDOUT : out std_logic_vector(15 downto 0);
     PHYSTATUS : out std_ulogic;
     RXBUFSTATUS : out std_logic_vector(2 downto 0);
     RXBYTEISALIGNED : out std_ulogic;
     RXBYTEREALIGN : out std_ulogic;
     RXCDRLOCK : out std_ulogic;
     RXCHANBONDSEQ : out std_ulogic;
     RXCHANISALIGNED : out std_ulogic;
     RXCHANREALIGN : out std_ulogic;
     RXCHARISCOMMA : out std_logic_vector(7 downto 0);
     RXCHARISK : out std_logic_vector(7 downto 0);
     RXCHBONDO : out std_logic_vector(4 downto 0);
     RXCLKCORCNT : out std_logic_vector(1 downto 0);
     RXCOMINITDET : out std_ulogic;
     RXCOMMADET : out std_ulogic;
     RXCOMSASDET : out std_ulogic;
     RXCOMWAKEDET : out std_ulogic;
     RXDATA : out std_logic_vector(63 downto 0);
     RXDATAVALID : out std_ulogic;
     RXDISPERR : out std_logic_vector(7 downto 0);
     RXDLYSRESETDONE : out std_ulogic;
     RXELECIDLE : out std_ulogic;
     RXHEADER : out std_logic_vector(2 downto 0);
     RXHEADERVALID : out std_ulogic;
     RXMONITOROUT : out std_logic_vector(6 downto 0);
     RXNOTINTABLE : out std_logic_vector(7 downto 0);
     RXOUTCLK : out std_ulogic;
     RXOUTCLKFABRIC : out std_ulogic;
     RXOUTCLKPCS : out std_ulogic;
     RXPHALIGNDONE : out std_ulogic;
     RXPHMONITOR : out std_logic_vector(4 downto 0);
     RXPHSLIPMONITOR : out std_logic_vector(4 downto 0);
     RXPRBSERR : out std_ulogic;
     RXQPISENN : out std_ulogic;
     RXQPISENP : out std_ulogic;
     RXRATEDONE : out std_ulogic;
     RXRESETDONE : out std_ulogic;
     RXSTARTOFSEQ : out std_ulogic;
     RXSTATUS : out std_logic_vector(2 downto 0);
     RXVALID : out std_ulogic;
     TSTOUT : out std_logic_vector(9 downto 0);
     TXBUFSTATUS : out std_logic_vector(1 downto 0);
     TXCOMFINISH : out std_ulogic;
     TXDLYSRESETDONE : out std_ulogic;
     TXGEARBOXREADY : out std_ulogic;
     TXOUTCLK : out std_ulogic;
     TXOUTCLKFABRIC : out std_ulogic;
     TXOUTCLKPCS : out std_ulogic;
     TXPHALIGNDONE : out std_ulogic;
     TXPHINITDONE : out std_ulogic;
     TXQPISENN : out std_ulogic;
     TXQPISENP : out std_ulogic;
     TXRATEDONE : out std_ulogic;
     TXRESETDONE : out std_ulogic;
     CFGRESET : in std_ulogic;
     CLKRSVD : in std_logic_vector(3 downto 0);
     CPLLLOCKDETCLK : in std_ulogic;
     CPLLLOCKEN : in std_ulogic;
     CPLLPD : in std_ulogic;
     CPLLREFCLKSEL : in std_logic_vector(2 downto 0);
     CPLLRESET : in std_ulogic;
     DRPADDR : in std_logic_vector(8 downto 0);
     DRPCLK : in std_ulogic;
     DRPDI : in std_logic_vector(15 downto 0);
     DRPEN : in std_ulogic;
     DRPWE : in std_ulogic;
     EYESCANMODE : in std_ulogic;
     EYESCANRESET : in std_ulogic;
     EYESCANTRIGGER : in std_ulogic;
     GTGREFCLK : in std_ulogic;
     GTNORTHREFCLK0 : in std_ulogic;
     GTNORTHREFCLK1 : in std_ulogic;
     GTREFCLK0 : in std_ulogic;
     GTREFCLK1 : in std_ulogic;
     GTRESETSEL : in std_ulogic;
     GTRSVD : in std_logic_vector(15 downto 0);
     GTRXRESET : in std_ulogic;
     GTSOUTHREFCLK0 : in std_ulogic;
     GTSOUTHREFCLK1 : in std_ulogic;
     GTTXRESET : in std_ulogic;
     GTXRXN : in std_ulogic;
     GTXRXP : in std_ulogic;
     LOOPBACK : in std_logic_vector(2 downto 0);
     PCSRSVDIN : in std_logic_vector(15 downto 0);
     PCSRSVDIN2 : in std_logic_vector(4 downto 0);
     PMARSVDIN : in std_logic_vector(4 downto 0);
     PMARSVDIN2 : in std_logic_vector(4 downto 0);
     QPLLCLK : in std_ulogic;
     QPLLREFCLK : in std_ulogic;
     RESETOVRD : in std_ulogic;
     RX8B10BEN : in std_ulogic;
     RXBUFRESET : in std_ulogic;
     RXCDRFREQRESET : in std_ulogic;
     RXCDRHOLD : in std_ulogic;
     RXCDROVRDEN : in std_ulogic;
     RXCDRRESET : in std_ulogic;
     RXCDRRESETRSV : in std_ulogic;
     RXCHBONDEN : in std_ulogic;
     RXCHBONDI : in std_logic_vector(4 downto 0);
     RXCHBONDLEVEL : in std_logic_vector(2 downto 0);
     RXCHBONDMASTER : in std_ulogic;
     RXCHBONDSLAVE : in std_ulogic;
     RXCOMMADETEN : in std_ulogic;
     RXDDIEN : in std_ulogic;
     RXDFEAGCHOLD : in std_ulogic;
     RXDFEAGCOVRDEN : in std_ulogic;
     RXDFECM1EN : in std_ulogic;
     RXDFELFHOLD : in std_ulogic;
     RXDFELFOVRDEN : in std_ulogic;
     RXDFELPMRESET : in std_ulogic;
     RXDFETAP2HOLD : in std_ulogic;
     RXDFETAP2OVRDEN : in std_ulogic;
     RXDFETAP3HOLD : in std_ulogic;
     RXDFETAP3OVRDEN : in std_ulogic;
     RXDFETAP4HOLD : in std_ulogic;
     RXDFETAP4OVRDEN : in std_ulogic;
     RXDFETAP5HOLD : in std_ulogic;
     RXDFETAP5OVRDEN : in std_ulogic;
     RXDFEUTHOLD : in std_ulogic;
     RXDFEUTOVRDEN : in std_ulogic;
     RXDFEVPHOLD : in std_ulogic;
     RXDFEVPOVRDEN : in std_ulogic;
     RXDFEVSEN : in std_ulogic;
     RXDFEXYDEN : in std_ulogic;
     RXDFEXYDHOLD : in std_ulogic;
     RXDFEXYDOVRDEN : in std_ulogic;
     RXDLYBYPASS : in std_ulogic;
     RXDLYEN : in std_ulogic;
     RXDLYOVRDEN : in std_ulogic;
     RXDLYSRESET : in std_ulogic;
     RXELECIDLEMODE : in std_logic_vector(1 downto 0);
     RXGEARBOXSLIP : in std_ulogic;
     RXLPMEN : in std_ulogic;
     RXLPMHFHOLD : in std_ulogic;
     RXLPMHFOVRDEN : in std_ulogic;
     RXLPMLFHOLD : in std_ulogic;
     RXLPMLFKLOVRDEN : in std_ulogic;
     RXMCOMMAALIGNEN : in std_ulogic;
     RXMONITORSEL : in std_logic_vector(1 downto 0);
     RXOOBRESET : in std_ulogic;
     RXOSHOLD : in std_ulogic;
     RXOSOVRDEN : in std_ulogic;
     RXOUTCLKSEL : in std_logic_vector(2 downto 0);
     RXPCOMMAALIGNEN : in std_ulogic;
     RXPCSRESET : in std_ulogic;
     RXPD : in std_logic_vector(1 downto 0);
     RXPHALIGN : in std_ulogic;
     RXPHALIGNEN : in std_ulogic;
     RXPHDLYPD : in std_ulogic;
     RXPHDLYRESET : in std_ulogic;
     RXPHOVRDEN : in std_ulogic;
     RXPMARESET : in std_ulogic;
     RXPOLARITY : in std_ulogic;
     RXPRBSCNTRESET : in std_ulogic;
     RXPRBSSEL : in std_logic_vector(2 downto 0);
     RXQPIEN : in std_ulogic;
     RXRATE : in std_logic_vector(2 downto 0);
     RXSLIDE : in std_ulogic;
     RXSYSCLKSEL : in std_logic_vector(1 downto 0);
     RXUSERRDY : in std_ulogic;
     RXUSRCLK : in std_ulogic;
     RXUSRCLK2 : in std_ulogic;
     SETERRSTATUS : in std_ulogic;
     TSTIN : in std_logic_vector(19 downto 0);
     TX8B10BBYPASS : in std_logic_vector(7 downto 0);
     TX8B10BEN : in std_ulogic;
     TXBUFDIFFCTRL : in std_logic_vector(2 downto 0);
     TXCHARDISPMODE : in std_logic_vector(7 downto 0);
     TXCHARDISPVAL : in std_logic_vector(7 downto 0);
     TXCHARISK : in std_logic_vector(7 downto 0);
     TXCOMINIT : in std_ulogic;
     TXCOMSAS : in std_ulogic;
     TXCOMWAKE : in std_ulogic;
     TXDATA : in std_logic_vector(63 downto 0);
     TXDEEMPH : in std_ulogic;
     TXDETECTRX : in std_ulogic;
     TXDIFFCTRL : in std_logic_vector(3 downto 0);
     TXDIFFPD : in std_ulogic;
     TXDLYBYPASS : in std_ulogic;
     TXDLYEN : in std_ulogic;
     TXDLYHOLD : in std_ulogic;
     TXDLYOVRDEN : in std_ulogic;
     TXDLYSRESET : in std_ulogic;
     TXDLYUPDOWN : in std_ulogic;
     TXELECIDLE : in std_ulogic;
     TXHEADER : in std_logic_vector(2 downto 0);
     TXINHIBIT : in std_ulogic;
     TXMAINCURSOR : in std_logic_vector(6 downto 0);
     TXMARGIN : in std_logic_vector(2 downto 0);
     TXOUTCLKSEL : in std_logic_vector(2 downto 0);
     TXPCSRESET : in std_ulogic;
     TXPD : in std_logic_vector(1 downto 0);
     TXPDELECIDLEMODE : in std_ulogic;
     TXPHALIGN : in std_ulogic;
     TXPHALIGNEN : in std_ulogic;
     TXPHDLYPD : in std_ulogic;
     TXPHDLYRESET : in std_ulogic;
     TXPHDLYTSTCLK : in std_ulogic;
     TXPHINIT : in std_ulogic;
     TXPHOVRDEN : in std_ulogic;
     TXPISOPD : in std_ulogic;
     TXPMARESET : in std_ulogic;
     TXPOLARITY : in std_ulogic;
     TXPOSTCURSOR : in std_logic_vector(4 downto 0);
     TXPOSTCURSORINV : in std_ulogic;
     TXPRBSFORCEERR : in std_ulogic;
     TXPRBSSEL : in std_logic_vector(2 downto 0);
     TXPRECURSOR : in std_logic_vector(4 downto 0);
     TXPRECURSORINV : in std_ulogic;
     TXQPIBIASEN : in std_ulogic;
     TXQPISTRONGPDOWN : in std_ulogic;
     TXQPIWEAKPUP : in std_ulogic;
     TXRATE : in std_logic_vector(2 downto 0);
     TXSEQUENCE : in std_logic_vector(6 downto 0);
     TXSTARTSEQ : in std_ulogic;
     TXSWING : in std_ulogic;
     TXSYSCLKSEL : in std_logic_vector(1 downto 0);
     TXUSERRDY : in std_ulogic;
     TXUSRCLK : in std_ulogic;
     TXUSRCLK2 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  GTXE2_CHANNEL : component is "PRIMITIVE";

----- component GTXE2_COMMON -----
component GTXE2_COMMON
  generic (
     BIAS_CFG : bit_vector := X"0000040000001000";
     COMMON_CFG : bit_vector := X"00000000";
     IS_DRPCLK_INVERTED : std_ulogic := '0';
     IS_GTGREFCLK_INVERTED : std_ulogic := '0';
     IS_QPLLLOCKDETCLK_INVERTED : std_ulogic := '0';
     QPLL_CFG : bit_vector := X"0680181";
     QPLL_CLKOUT_CFG : bit_vector := "0000";
     QPLL_COARSE_FREQ_OVRD : bit_vector := "010000";
     QPLL_COARSE_FREQ_OVRD_EN : bit := '0';
     QPLL_CP : bit_vector := "0000011111";
     QPLL_CP_MONITOR_EN : bit := '0';
     QPLL_DMONITOR_SEL : bit := '0';
     QPLL_FBDIV : bit_vector := "0000000000";
     QPLL_FBDIV_MONITOR_EN : bit := '0';
     QPLL_FBDIV_RATIO : bit := '0';
     QPLL_INIT_CFG : bit_vector := X"000006";
     QPLL_LOCK_CFG : bit_vector := X"21E8";
     QPLL_LPF : bit_vector := "1111";
     QPLL_REFCLK_DIV : integer := 2;
     SIM_QPLLREFCLK_SEL : bit_vector := "001";
     SIM_RESET_SPEEDUP : string := "TRUE";
     SIM_VERSION : string := "4.0"
  );
  port (
     DRPDO : out std_logic_vector(15 downto 0);
     DRPRDY : out std_ulogic;
     QPLLDMONITOR : out std_logic_vector(7 downto 0);
     QPLLFBCLKLOST : out std_ulogic;
     QPLLLOCK : out std_ulogic;
     QPLLOUTCLK : out std_ulogic;
     QPLLOUTREFCLK : out std_ulogic;
     QPLLREFCLKLOST : out std_ulogic;
     REFCLKOUTMONITOR : out std_ulogic;
     BGBYPASSB : in std_ulogic;
     BGMONITORENB : in std_ulogic;
     BGPDB : in std_ulogic;
     BGRCALOVRD : in std_logic_vector(4 downto 0);
     DRPADDR : in std_logic_vector(7 downto 0);
     DRPCLK : in std_ulogic;
     DRPDI : in std_logic_vector(15 downto 0);
     DRPEN : in std_ulogic;
     DRPWE : in std_ulogic;
     GTGREFCLK : in std_ulogic;
     GTNORTHREFCLK0 : in std_ulogic;
     GTNORTHREFCLK1 : in std_ulogic;
     GTREFCLK0 : in std_ulogic;
     GTREFCLK1 : in std_ulogic;
     GTSOUTHREFCLK0 : in std_ulogic;
     GTSOUTHREFCLK1 : in std_ulogic;
     PMARSVD : in std_logic_vector(7 downto 0);
     QPLLLOCKDETCLK : in std_ulogic;
     QPLLLOCKEN : in std_ulogic;
     QPLLOUTRESET : in std_ulogic;
     QPLLPD : in std_ulogic;
     QPLLREFCLKSEL : in std_logic_vector(2 downto 0);
     QPLLRESET : in std_ulogic;
     QPLLRSVD1 : in std_logic_vector(15 downto 0);
     QPLLRSVD2 : in std_logic_vector(4 downto 0);
     RCALENB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  GTXE2_COMMON : component is "PRIMITIVE";

----- component GTYE3_CHANNEL -----
component GTYE3_CHANNEL
  generic (
     ACJTAG_DEBUG_MODE : std_ulogic := '0';
     ACJTAG_MODE : std_ulogic := '0';
     ACJTAG_RESET : std_ulogic := '0';
     ADAPT_CFG0 : std_logic_vector(15 downto 0) := X"F800";
     ADAPT_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     ADAPT_CFG2 : std_logic_vector(15 downto 0) := "0000000000000000";
     ALIGN_COMMA_DOUBLE : string := "FALSE";
     ALIGN_COMMA_ENABLE : std_logic_vector(9 downto 0) := "0001111111";
     ALIGN_COMMA_WORD : integer := 1;
     ALIGN_MCOMMA_DET : string := "TRUE";
     ALIGN_MCOMMA_VALUE : std_logic_vector(9 downto 0) := "1010000011";
     ALIGN_PCOMMA_DET : string := "TRUE";
     ALIGN_PCOMMA_VALUE : std_logic_vector(9 downto 0) := "0101111100";
     AUTO_BW_SEL_BYPASS : std_ulogic := '0';
     A_RXOSCALRESET : std_ulogic := '0';
     A_RXPROGDIVRESET : std_ulogic := '0';
     A_TXDIFFCTRL : std_logic_vector(4 downto 0) := "01100";
     A_TXPROGDIVRESET : std_ulogic := '0';
     CAPBYPASS_FORCE : std_ulogic := '0';
     CBCC_DATA_SOURCE_SEL : string := "DECODED";
     CDR_SWAP_MODE_EN : std_ulogic := '0';
     CHAN_BOND_KEEP_ALIGN : string := "FALSE";
     CHAN_BOND_MAX_SKEW : integer := 7;
     CHAN_BOND_SEQ_1_1 : std_logic_vector(9 downto 0) := "0101111100";
     CHAN_BOND_SEQ_1_2 : std_logic_vector(9 downto 0) := "0000000000";
     CHAN_BOND_SEQ_1_3 : std_logic_vector(9 downto 0) := "0000000000";
     CHAN_BOND_SEQ_1_4 : std_logic_vector(9 downto 0) := "0000000000";
     CHAN_BOND_SEQ_1_ENABLE : std_logic_vector(3 downto 0) := "1111";
     CHAN_BOND_SEQ_2_1 : std_logic_vector(9 downto 0) := "0100000000";
     CHAN_BOND_SEQ_2_2 : std_logic_vector(9 downto 0) := "0100000000";
     CHAN_BOND_SEQ_2_3 : std_logic_vector(9 downto 0) := "0100000000";
     CHAN_BOND_SEQ_2_4 : std_logic_vector(9 downto 0) := "0100000000";
     CHAN_BOND_SEQ_2_ENABLE : std_logic_vector(3 downto 0) := "1111";
     CHAN_BOND_SEQ_2_USE : string := "FALSE";
     CHAN_BOND_SEQ_LEN : integer := 2;
     CH_HSPMUX : std_logic_vector(15 downto 0) := "0000000000000000";
     CKCAL1_CFG_0 : std_logic_vector(15 downto 0) := "0000000000000000";
     CKCAL1_CFG_1 : std_logic_vector(15 downto 0) := "0000000000000000";
     CKCAL1_CFG_2 : std_logic_vector(15 downto 0) := "0000000000000000";
     CKCAL1_CFG_3 : std_logic_vector(15 downto 0) := "0000000000000000";
     CKCAL2_CFG_0 : std_logic_vector(15 downto 0) := "0000000000000000";
     CKCAL2_CFG_1 : std_logic_vector(15 downto 0) := "0000000000000000";
     CKCAL2_CFG_2 : std_logic_vector(15 downto 0) := "0000000000000000";
     CKCAL2_CFG_3 : std_logic_vector(15 downto 0) := "0000000000000000";
     CKCAL2_CFG_4 : std_logic_vector(15 downto 0) := "0000000000000000";
     CKCAL_RSVD0 : std_logic_vector(15 downto 0) := "0000000000000000";
     CKCAL_RSVD1 : std_logic_vector(15 downto 0) := "0000000000000000";
     CLK_CORRECT_USE : string := "TRUE";
     CLK_COR_KEEP_IDLE : string := "FALSE";
     CLK_COR_MAX_LAT : integer := 20;
     CLK_COR_MIN_LAT : integer := 18;
     CLK_COR_PRECEDENCE : string := "TRUE";
     CLK_COR_REPEAT_WAIT : integer := 0;
     CLK_COR_SEQ_1_1 : std_logic_vector(9 downto 0) := "0100011100";
     CLK_COR_SEQ_1_2 : std_logic_vector(9 downto 0) := "0000000000";
     CLK_COR_SEQ_1_3 : std_logic_vector(9 downto 0) := "0000000000";
     CLK_COR_SEQ_1_4 : std_logic_vector(9 downto 0) := "0000000000";
     CLK_COR_SEQ_1_ENABLE : std_logic_vector(3 downto 0) := "1111";
     CLK_COR_SEQ_2_1 : std_logic_vector(9 downto 0) := "0100000000";
     CLK_COR_SEQ_2_2 : std_logic_vector(9 downto 0) := "0100000000";
     CLK_COR_SEQ_2_3 : std_logic_vector(9 downto 0) := "0100000000";
     CLK_COR_SEQ_2_4 : std_logic_vector(9 downto 0) := "0100000000";
     CLK_COR_SEQ_2_ENABLE : std_logic_vector(3 downto 0) := "1111";
     CLK_COR_SEQ_2_USE : string := "FALSE";
     CLK_COR_SEQ_LEN : integer := 2;
     CPLL_CFG0 : std_logic_vector(15 downto 0) := X"20F8";
     CPLL_CFG1 : std_logic_vector(15 downto 0) := X"A494";
     CPLL_CFG2 : std_logic_vector(15 downto 0) := X"F001";
     CPLL_CFG3 : std_logic_vector(5 downto 0) := "00" & X"0";
     CPLL_FBDIV : integer := 4;
     CPLL_FBDIV_45 : integer := 4;
     CPLL_INIT_CFG0 : std_logic_vector(15 downto 0) := X"001E";
     CPLL_INIT_CFG1 : std_logic_vector(7 downto 0) := X"00";
     CPLL_LOCK_CFG : std_logic_vector(15 downto 0) := X"01E8";
     CPLL_REFCLK_DIV : integer := 1;
     CTLE3_OCAP_EXT_CTRL : std_logic_vector(2 downto 0) := "000";
     CTLE3_OCAP_EXT_EN : std_ulogic := '0';
     DDI_CTRL : std_logic_vector(1 downto 0) := "00";
     DDI_REALIGN_WAIT : integer := 15;
     DEC_MCOMMA_DETECT : string := "TRUE";
     DEC_PCOMMA_DETECT : string := "TRUE";
     DEC_VALID_COMMA_ONLY : string := "TRUE";
     DFE_D_X_REL_POS : std_ulogic := '0';
     DFE_VCM_COMP_EN : std_ulogic := '0';
     DMONITOR_CFG0 : std_logic_vector(9 downto 0) := "00" & X"00";
     DMONITOR_CFG1 : std_logic_vector(7 downto 0) := X"00";
     ES_CLK_PHASE_SEL : std_ulogic := '0';
     ES_CONTROL : std_logic_vector(5 downto 0) := "000000";
     ES_ERRDET_EN : string := "FALSE";
     ES_EYE_SCAN_EN : string := "FALSE";
     ES_HORZ_OFFSET : std_logic_vector(11 downto 0) := X"000";
     ES_PMA_CFG : std_logic_vector(9 downto 0) := "0000000000";
     ES_PRESCALE : std_logic_vector(4 downto 0) := "00000";
     ES_QUALIFIER0 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUALIFIER1 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUALIFIER2 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUALIFIER3 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUALIFIER4 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUALIFIER5 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUALIFIER6 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUALIFIER7 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUALIFIER8 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUALIFIER9 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUAL_MASK0 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUAL_MASK1 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUAL_MASK2 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUAL_MASK3 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUAL_MASK4 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUAL_MASK5 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUAL_MASK6 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUAL_MASK7 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUAL_MASK8 : std_logic_vector(15 downto 0) := X"0000";
     ES_QUAL_MASK9 : std_logic_vector(15 downto 0) := X"0000";
     ES_SDATA_MASK0 : std_logic_vector(15 downto 0) := X"0000";
     ES_SDATA_MASK1 : std_logic_vector(15 downto 0) := X"0000";
     ES_SDATA_MASK2 : std_logic_vector(15 downto 0) := X"0000";
     ES_SDATA_MASK3 : std_logic_vector(15 downto 0) := X"0000";
     ES_SDATA_MASK4 : std_logic_vector(15 downto 0) := X"0000";
     ES_SDATA_MASK5 : std_logic_vector(15 downto 0) := X"0000";
     ES_SDATA_MASK6 : std_logic_vector(15 downto 0) := X"0000";
     ES_SDATA_MASK7 : std_logic_vector(15 downto 0) := X"0000";
     ES_SDATA_MASK8 : std_logic_vector(15 downto 0) := X"0000";
     ES_SDATA_MASK9 : std_logic_vector(15 downto 0) := X"0000";
     EVODD_PHI_CFG : std_logic_vector(10 downto 0) := "00000000000";
     EYE_SCAN_SWAP_EN : std_ulogic := '0';
     FTS_DESKEW_SEQ_ENABLE : std_logic_vector(3 downto 0) := "1111";
     FTS_LANE_DESKEW_CFG : std_logic_vector(3 downto 0) := "1111";
     FTS_LANE_DESKEW_EN : string := "FALSE";
     GEARBOX_MODE : std_logic_vector(4 downto 0) := "00000";
     GM_BIAS_SELECT : std_ulogic := '0';
     ISCAN_CK_PH_SEL2 : std_ulogic := '0';
     LOCAL_MASTER : std_ulogic := '0';
     LOOP0_CFG : std_logic_vector(15 downto 0) := X"0000";
     LOOP10_CFG : std_logic_vector(15 downto 0) := X"0000";
     LOOP11_CFG : std_logic_vector(15 downto 0) := X"0000";
     LOOP12_CFG : std_logic_vector(15 downto 0) := X"0000";
     LOOP13_CFG : std_logic_vector(15 downto 0) := X"0000";
     LOOP1_CFG : std_logic_vector(15 downto 0) := X"0000";
     LOOP2_CFG : std_logic_vector(15 downto 0) := X"0000";
     LOOP3_CFG : std_logic_vector(15 downto 0) := X"0000";
     LOOP4_CFG : std_logic_vector(15 downto 0) := X"0000";
     LOOP5_CFG : std_logic_vector(15 downto 0) := X"0000";
     LOOP6_CFG : std_logic_vector(15 downto 0) := X"0000";
     LOOP7_CFG : std_logic_vector(15 downto 0) := X"0000";
     LOOP8_CFG : std_logic_vector(15 downto 0) := X"0000";
     LOOP9_CFG : std_logic_vector(15 downto 0) := X"0000";
     LPBK_BIAS_CTRL : std_logic_vector(2 downto 0) := "000";
     LPBK_EN_RCAL_B : std_ulogic := '0';
     LPBK_EXT_RCAL : std_logic_vector(3 downto 0) := "0000";
     LPBK_RG_CTRL : std_logic_vector(3 downto 0) := "0000";
     OOBDIVCTL : std_logic_vector(1 downto 0) := "00";
     OOB_PWRUP : std_ulogic := '0';
     PCI3_AUTO_REALIGN : string := "FRST_SMPL";
     PCI3_PIPE_RX_ELECIDLE : std_ulogic := '1';
     PCI3_RX_ASYNC_EBUF_BYPASS : std_logic_vector(1 downto 0) := "00";
     PCI3_RX_ELECIDLE_EI2_ENABLE : std_ulogic := '0';
     PCI3_RX_ELECIDLE_H2L_COUNT : std_logic_vector(5 downto 0) := "000000";
     PCI3_RX_ELECIDLE_H2L_DISABLE : std_logic_vector(2 downto 0) := "000";
     PCI3_RX_ELECIDLE_HI_COUNT : std_logic_vector(5 downto 0) := "000000";
     PCI3_RX_ELECIDLE_LP4_DISABLE : std_ulogic := '0';
     PCI3_RX_FIFO_DISABLE : std_ulogic := '0';
     PCIE_BUFG_DIV_CTRL : std_logic_vector(15 downto 0) := X"0000";
     PCIE_RXPCS_CFG_GEN3 : std_logic_vector(15 downto 0) := X"0000";
     PCIE_RXPMA_CFG : std_logic_vector(15 downto 0) := X"0000";
     PCIE_TXPCS_CFG_GEN3 : std_logic_vector(15 downto 0) := X"0000";
     PCIE_TXPMA_CFG : std_logic_vector(15 downto 0) := X"0000";
     PCS_PCIE_EN : string := "FALSE";
     PCS_RSVD0 : std_logic_vector(15 downto 0) := "0000000000000000";
     PCS_RSVD1 : std_logic_vector(2 downto 0) := "000";
     PD_TRANS_TIME_FROM_P2 : std_logic_vector(11 downto 0) := X"03C";
     PD_TRANS_TIME_NONE_P2 : std_logic_vector(7 downto 0) := X"19";
     PD_TRANS_TIME_TO_P2 : std_logic_vector(7 downto 0) := X"64";
     PLL_SEL_MODE_GEN12 : std_logic_vector(1 downto 0) := "00";
     PLL_SEL_MODE_GEN3 : std_logic_vector(1 downto 0) := "00";
     PMA_RSV0 : std_logic_vector(15 downto 0) := X"0000";
     PMA_RSV1 : std_logic_vector(15 downto 0) := X"0000";
     PREIQ_FREQ_BST : std_logic_vector(1 downto 0) := "00";
     PROCESS_PAR : std_logic_vector(2 downto 0) := "010";
     RATE_SW_USE_DRP : std_ulogic := '0';
     RESET_POWERSAVE_DISABLE : std_ulogic := '0';
     RXBUFRESET_TIME : std_logic_vector(4 downto 0) := "00001";
     RXBUF_ADDR_MODE : string := "FULL";
     RXBUF_EIDLE_HI_CNT : std_logic_vector(3 downto 0) := "1000";
     RXBUF_EIDLE_LO_CNT : std_logic_vector(3 downto 0) := "0000";
     RXBUF_EN : string := "TRUE";
     RXBUF_RESET_ON_CB_CHANGE : string := "TRUE";
     RXBUF_RESET_ON_COMMAALIGN : string := "FALSE";
     RXBUF_RESET_ON_EIDLE : string := "FALSE";
     RXBUF_RESET_ON_RATE_CHANGE : string := "TRUE";
     RXBUF_THRESH_OVFLW : integer := 0;
     RXBUF_THRESH_OVRD : string := "FALSE";
     RXBUF_THRESH_UNDFLW : integer := 4;
     RXCDRFREQRESET_TIME : std_logic_vector(4 downto 0) := "00001";
     RXCDRPHRESET_TIME : std_logic_vector(4 downto 0) := "00001";
     RXCDR_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXCDR_CFG0_GEN3 : std_logic_vector(15 downto 0) := X"0000";
     RXCDR_CFG1 : std_logic_vector(15 downto 0) := X"0080";
     RXCDR_CFG1_GEN3 : std_logic_vector(15 downto 0) := X"0000";
     RXCDR_CFG2 : std_logic_vector(15 downto 0) := X"07E6";
     RXCDR_CFG2_GEN3 : std_logic_vector(15 downto 0) := X"0000";
     RXCDR_CFG3 : std_logic_vector(15 downto 0) := X"0000";
     RXCDR_CFG3_GEN3 : std_logic_vector(15 downto 0) := X"0000";
     RXCDR_CFG4 : std_logic_vector(15 downto 0) := X"0000";
     RXCDR_CFG4_GEN3 : std_logic_vector(15 downto 0) := X"0000";
     RXCDR_CFG5 : std_logic_vector(15 downto 0) := X"0000";
     RXCDR_CFG5_GEN3 : std_logic_vector(15 downto 0) := X"0000";
     RXCDR_FR_RESET_ON_EIDLE : std_ulogic := '0';
     RXCDR_HOLD_DURING_EIDLE : std_ulogic := '0';
     RXCDR_LOCK_CFG0 : std_logic_vector(15 downto 0) := X"5080";
     RXCDR_LOCK_CFG1 : std_logic_vector(15 downto 0) := X"07E0";
     RXCDR_LOCK_CFG2 : std_logic_vector(15 downto 0) := X"7C42";
     RXCDR_LOCK_CFG3 : std_logic_vector(15 downto 0) := "0000000000000000";
     RXCDR_PH_RESET_ON_EIDLE : std_ulogic := '0';
     RXCFOKDONE_SRC : std_logic_vector(1 downto 0) := "00";
     RXCFOK_CFG0 : std_logic_vector(15 downto 0) := X"4000";
     RXCFOK_CFG1 : std_logic_vector(15 downto 0) := X"0060";
     RXCFOK_CFG2 : std_logic_vector(15 downto 0) := X"000E";
     RXDFELPMRESET_TIME : std_logic_vector(6 downto 0) := "0001111";
     RXDFELPM_KL_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFELPM_KL_CFG1 : std_logic_vector(15 downto 0) := X"0032";
     RXDFELPM_KL_CFG2 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_CFG0 : std_logic_vector(15 downto 0) := X"0A00";
     RXDFE_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_GC_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_GC_CFG1 : std_logic_vector(15 downto 0) := X"7840";
     RXDFE_GC_CFG2 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_H2_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_H2_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_H3_CFG0 : std_logic_vector(15 downto 0) := X"4000";
     RXDFE_H3_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_H4_CFG0 : std_logic_vector(15 downto 0) := X"2000";
     RXDFE_H4_CFG1 : std_logic_vector(15 downto 0) := X"0003";
     RXDFE_H5_CFG0 : std_logic_vector(15 downto 0) := X"2000";
     RXDFE_H5_CFG1 : std_logic_vector(15 downto 0) := X"0003";
     RXDFE_H6_CFG0 : std_logic_vector(15 downto 0) := X"2000";
     RXDFE_H6_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_H7_CFG0 : std_logic_vector(15 downto 0) := X"2000";
     RXDFE_H7_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_H8_CFG0 : std_logic_vector(15 downto 0) := X"2000";
     RXDFE_H8_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_H9_CFG0 : std_logic_vector(15 downto 0) := X"2000";
     RXDFE_H9_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_HA_CFG0 : std_logic_vector(15 downto 0) := X"2000";
     RXDFE_HA_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_HB_CFG0 : std_logic_vector(15 downto 0) := X"2000";
     RXDFE_HB_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_HC_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_HC_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_HD_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_HD_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_HE_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_HE_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_HF_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_HF_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_OS_CFG0 : std_logic_vector(15 downto 0) := X"8000";
     RXDFE_OS_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     RXDFE_PWR_SAVING : std_ulogic := '0';
     RXDFE_UT_CFG0 : std_logic_vector(15 downto 0) := X"8000";
     RXDFE_UT_CFG1 : std_logic_vector(15 downto 0) := X"0003";
     RXDFE_VP_CFG0 : std_logic_vector(15 downto 0) := X"AA00";
     RXDFE_VP_CFG1 : std_logic_vector(15 downto 0) := X"0033";
     RXDLY_CFG : std_logic_vector(15 downto 0) := X"001F";
     RXDLY_LCFG : std_logic_vector(15 downto 0) := X"0030";
     RXELECIDLE_CFG : string := "Sigcfg_4";
     RXGBOX_FIFO_INIT_RD_ADDR : integer := 4;
     RXGEARBOX_EN : string := "FALSE";
     RXISCANRESET_TIME : std_logic_vector(4 downto 0) := "00001";
     RXLPM_CFG : std_logic_vector(15 downto 0) := X"0000";
     RXLPM_GC_CFG : std_logic_vector(15 downto 0) := X"0000";
     RXLPM_KH_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     RXLPM_KH_CFG1 : std_logic_vector(15 downto 0) := X"0002";
     RXLPM_OS_CFG0 : std_logic_vector(15 downto 0) := X"8000";
     RXLPM_OS_CFG1 : std_logic_vector(15 downto 0) := X"0002";
     RXOOB_CFG : std_logic_vector(8 downto 0) := "000000110";
     RXOOB_CLK_CFG : string := "PMA";
     RXOSCALRESET_TIME : std_logic_vector(4 downto 0) := "00011";
     RXOUT_DIV : integer := 4;
     RXPCSRESET_TIME : std_logic_vector(4 downto 0) := "00001";
     RXPHBEACON_CFG : std_logic_vector(15 downto 0) := X"0000";
     RXPHDLY_CFG : std_logic_vector(15 downto 0) := X"2020";
     RXPHSAMP_CFG : std_logic_vector(15 downto 0) := X"2100";
     RXPHSLIP_CFG : std_logic_vector(15 downto 0) := X"9933";
     RXPH_MONITOR_SEL : std_logic_vector(4 downto 0) := "00000";
     RXPI_AUTO_BW_SEL_BYPASS : std_ulogic := '0';
     RXPI_CFG : std_logic_vector(15 downto 0) := X"0100";
     RXPI_LPM : std_ulogic := '0';
     RXPI_RSV0 : std_logic_vector(15 downto 0) := X"0000";
     RXPI_SEL_LC : std_logic_vector(1 downto 0) := "00";
     RXPI_STARTCODE : std_logic_vector(1 downto 0) := "00";
     RXPI_VREFSEL : std_ulogic := '0';
     RXPMACLK_SEL : string := "DATA";
     RXPMARESET_TIME : std_logic_vector(4 downto 0) := "00001";
     RXPRBS_ERR_LOOPBACK : std_ulogic := '0';
     RXPRBS_LINKACQ_CNT : integer := 15;
     RXSLIDE_AUTO_WAIT : integer := 7;
     RXSLIDE_MODE : string := "OFF";
     RXSYNC_MULTILANE : std_ulogic := '0';
     RXSYNC_OVRD : std_ulogic := '0';
     RXSYNC_SKIP_DA : std_ulogic := '0';
     RX_AFE_CM_EN : std_ulogic := '0';
     RX_BIAS_CFG0 : std_logic_vector(15 downto 0) := X"0AD4";
     RX_BUFFER_CFG : std_logic_vector(5 downto 0) := "000000";
     RX_CAPFF_SARC_ENB : std_ulogic := '0';
     RX_CLK25_DIV : integer := 8;
     RX_CLKMUX_EN : std_ulogic := '1';
     RX_CLK_SLIP_OVRD : std_logic_vector(4 downto 0) := "00000";
     RX_CM_BUF_CFG : std_logic_vector(3 downto 0) := "0000";
     RX_CM_BUF_PD : std_ulogic := '0';
     RX_CM_SEL : std_logic_vector(1 downto 0) := "11";
     RX_CM_TRIM : std_logic_vector(3 downto 0) := "0100";
     RX_CTLE1_KHKL : std_ulogic := '0';
     RX_CTLE2_KHKL : std_ulogic := '0';
     RX_CTLE3_AGC : std_ulogic := '0';
     RX_DATA_WIDTH : integer := 20;
     RX_DDI_SEL : std_logic_vector(5 downto 0) := "000000";
     RX_DEFER_RESET_BUF_EN : string := "TRUE";
     RX_DEGEN_CTRL : std_logic_vector(2 downto 0) := "000";
     RX_DFELPM_CFG0 : std_logic_vector(3 downto 0) := "0110";
     RX_DFELPM_CFG1 : std_ulogic := '0';
     RX_DFELPM_KLKH_AGC_STUP_EN : std_ulogic := '1';
     RX_DFE_AGC_CFG0 : std_logic_vector(1 downto 0) := "00";
     RX_DFE_AGC_CFG1 : std_logic_vector(2 downto 0) := "100";
     RX_DFE_KL_LPM_KH_CFG0 : std_logic_vector(1 downto 0) := "01";
     RX_DFE_KL_LPM_KH_CFG1 : std_logic_vector(2 downto 0) := "010";
     RX_DFE_KL_LPM_KL_CFG0 : std_logic_vector(1 downto 0) := "01";
     RX_DFE_KL_LPM_KL_CFG1 : std_logic_vector(2 downto 0) := "010";
     RX_DFE_LPM_HOLD_DURING_EIDLE : std_ulogic := '0';
     RX_DISPERR_SEQ_MATCH : string := "TRUE";
     RX_DIV2_MODE_B : std_ulogic := '0';
     RX_DIVRESET_TIME : std_logic_vector(4 downto 0) := "00001";
     RX_EN_CTLE_RCAL_B : std_ulogic := '0';
     RX_EN_HI_LR : std_ulogic := '0';
     RX_EXT_RL_CTRL : std_logic_vector(8 downto 0) := "000000000";
     RX_EYESCAN_VS_CODE : std_logic_vector(6 downto 0) := "0000000";
     RX_EYESCAN_VS_NEG_DIR : std_ulogic := '0';
     RX_EYESCAN_VS_RANGE : std_logic_vector(1 downto 0) := "00";
     RX_EYESCAN_VS_UT_SIGN : std_ulogic := '0';
     RX_FABINT_USRCLK_FLOP : std_ulogic := '0';
     RX_INT_DATAWIDTH : integer := 1;
     RX_PMA_POWER_SAVE : std_ulogic := '0';
     RX_PROGDIV_CFG : real := 0.0;
     RX_PROGDIV_RATE : std_logic_vector(15 downto 0) := X"0001";
     RX_RESLOAD_CTRL : std_logic_vector(3 downto 0) := "0000";
     RX_RESLOAD_OVRD : std_ulogic := '0';
     RX_SAMPLE_PERIOD : std_logic_vector(2 downto 0) := "101";
     RX_SIG_VALID_DLY : integer := 11;
     RX_SUM_DFETAPREP_EN : std_ulogic := '0';
     RX_SUM_IREF_TUNE : std_logic_vector(3 downto 0) := "0000";
     RX_SUM_VCMTUNE : std_logic_vector(3 downto 0) := "0000";
     RX_SUM_VCM_OVWR : std_ulogic := '0';
     RX_SUM_VREF_TUNE : std_logic_vector(2 downto 0) := "000";
     RX_TUNE_AFE_OS : std_logic_vector(1 downto 0) := "00";
     RX_VREG_CTRL : std_logic_vector(2 downto 0) := "000";
     RX_VREG_PDB : std_ulogic := '0';
     RX_WIDEMODE_CDR : std_logic_vector(1 downto 0) := "00";
     RX_XCLK_SEL : string := "RXDES";
     RX_XMODE_SEL : std_ulogic := '0';
     SAS_MAX_COM : integer := 64;
     SAS_MIN_COM : integer := 36;
     SATA_BURST_SEQ_LEN : std_logic_vector(3 downto 0) := "1111";
     SATA_BURST_VAL : std_logic_vector(2 downto 0) := "100";
     SATA_CPLL_CFG : string := "VCO_3000MHZ";
     SATA_EIDLE_VAL : std_logic_vector(2 downto 0) := "100";
     SATA_MAX_BURST : integer := 8;
     SATA_MAX_INIT : integer := 21;
     SATA_MAX_WAKE : integer := 7;
     SATA_MIN_BURST : integer := 4;
     SATA_MIN_INIT : integer := 12;
     SATA_MIN_WAKE : integer := 4;
     SHOW_REALIGN_COMMA : string := "TRUE";
     SIM_CPLLREFCLK_SEL : std_logic_vector(2 downto 0) := "001";
     SIM_RECEIVER_DETECT_PASS : string := "TRUE";
     SIM_RESET_SPEEDUP : string := "TRUE";
     SIM_TX_EIDLE_DRIVE_LEVEL : std_ulogic := '0';
     SIM_VERSION : string := "Ver_1";
     TAPDLY_SET_TX : std_logic_vector(1 downto 0) := "00";
     TEMPERATURE_PAR : std_logic_vector(3 downto 0) := "0010";
     TERM_RCAL_CFG : std_logic_vector(14 downto 0) := "100001000010000";
     TERM_RCAL_OVRD : std_logic_vector(2 downto 0) := "000";
     TRANS_TIME_RATE : std_logic_vector(7 downto 0) := X"0E";
     TST_RSV0 : std_logic_vector(7 downto 0) := X"00";
     TST_RSV1 : std_logic_vector(7 downto 0) := X"00";
     TXBUF_EN : string := "TRUE";
     TXBUF_RESET_ON_RATE_CHANGE : string := "FALSE";
     TXDLY_CFG : std_logic_vector(15 downto 0) := X"001F";
     TXDLY_LCFG : std_logic_vector(15 downto 0) := X"0030";
     TXFIFO_ADDR_CFG : string := "LOW";
     TXGBOX_FIFO_INIT_RD_ADDR : integer := 4;
     TXGEARBOX_EN : string := "FALSE";
     TXOUT_DIV : integer := 4;
     TXPCSRESET_TIME : std_logic_vector(4 downto 0) := "00001";
     TXPHDLY_CFG0 : std_logic_vector(15 downto 0) := X"2020";
     TXPHDLY_CFG1 : std_logic_vector(15 downto 0) := X"0001";
     TXPH_CFG : std_logic_vector(15 downto 0) := X"0123";
     TXPH_CFG2 : std_logic_vector(15 downto 0) := X"0000";
     TXPH_MONITOR_SEL : std_logic_vector(4 downto 0) := "00000";
     TXPI_CFG0 : std_logic_vector(1 downto 0) := "00";
     TXPI_CFG1 : std_logic_vector(1 downto 0) := "00";
     TXPI_CFG2 : std_logic_vector(1 downto 0) := "00";
     TXPI_CFG3 : std_ulogic := '0';
     TXPI_CFG4 : std_ulogic := '1';
     TXPI_CFG5 : std_logic_vector(2 downto 0) := "000";
     TXPI_GRAY_SEL : std_ulogic := '0';
     TXPI_INVSTROBE_SEL : std_ulogic := '0';
     TXPI_LPM : std_ulogic := '0';
     TXPI_PPMCLK_SEL : string := "TXUSRCLK2";
     TXPI_PPM_CFG : std_logic_vector(7 downto 0) := "00000000";
     TXPI_RSV0 : std_logic_vector(15 downto 0) := X"0000";
     TXPI_SYNFREQ_PPM : std_logic_vector(2 downto 0) := "000";
     TXPI_VREFSEL : std_ulogic := '0';
     TXPMARESET_TIME : std_logic_vector(4 downto 0) := "00001";
     TXSYNC_MULTILANE : std_ulogic := '0';
     TXSYNC_OVRD : std_ulogic := '0';
     TXSYNC_SKIP_DA : std_ulogic := '0';
     TX_CLK25_DIV : integer := 8;
     TX_CLKMUX_EN : std_ulogic := '1';
     TX_CLKREG_PDB : std_ulogic := '0';
     TX_CLKREG_SET : std_logic_vector(2 downto 0) := "000";
     TX_DATA_WIDTH : integer := 20;
     TX_DCD_CFG : std_logic_vector(5 downto 0) := "000010";
     TX_DCD_EN : std_ulogic := '0';
     TX_DEEMPH0 : std_logic_vector(5 downto 0) := "000000";
     TX_DEEMPH1 : std_logic_vector(5 downto 0) := "000000";
     TX_DIVRESET_TIME : std_logic_vector(4 downto 0) := "00001";
     TX_DRIVE_MODE : string := "DIRECT";
     TX_DRVMUX_CTRL : std_logic_vector(1 downto 0) := "00";
     TX_EIDLE_ASSERT_DELAY : std_logic_vector(2 downto 0) := "110";
     TX_EIDLE_DEASSERT_DELAY : std_logic_vector(2 downto 0) := "100";
     TX_EML_PHI_TUNE : std_ulogic := '0';
     TX_FABINT_USRCLK_FLOP : std_ulogic := '0';
     TX_FIFO_BYP_EN : std_ulogic := '0';
     TX_IDLE_DATA_ZERO : std_ulogic := '0';
     TX_INT_DATAWIDTH : integer := 1;
     TX_LOOPBACK_DRIVE_HIZ : string := "FALSE";
     TX_MAINCURSOR_SEL : std_ulogic := '0';
     TX_MARGIN_FULL_0 : std_logic_vector(6 downto 0) := "1001110";
     TX_MARGIN_FULL_1 : std_logic_vector(6 downto 0) := "1001001";
     TX_MARGIN_FULL_2 : std_logic_vector(6 downto 0) := "1000101";
     TX_MARGIN_FULL_3 : std_logic_vector(6 downto 0) := "1000010";
     TX_MARGIN_FULL_4 : std_logic_vector(6 downto 0) := "1000000";
     TX_MARGIN_LOW_0 : std_logic_vector(6 downto 0) := "1000110";
     TX_MARGIN_LOW_1 : std_logic_vector(6 downto 0) := "1000100";
     TX_MARGIN_LOW_2 : std_logic_vector(6 downto 0) := "1000010";
     TX_MARGIN_LOW_3 : std_logic_vector(6 downto 0) := "1000000";
     TX_MARGIN_LOW_4 : std_logic_vector(6 downto 0) := "1000000";
     TX_MODE_SEL : std_logic_vector(2 downto 0) := "000";
     TX_PHICAL_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     TX_PHICAL_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     TX_PHICAL_CFG2 : std_logic_vector(15 downto 0) := X"0000";
     TX_PI_BIASSET : std_logic_vector(1 downto 0) := "00";
     TX_PI_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     TX_PI_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     TX_PI_DIV2_MODE_B : std_ulogic := '0';
     TX_PI_SEL_QPLL0 : std_ulogic := '0';
     TX_PI_SEL_QPLL1 : std_ulogic := '0';
     TX_PMADATA_OPT : std_ulogic := '0';
     TX_PMA_POWER_SAVE : std_ulogic := '0';
     TX_PREDRV_CTRL : std_logic_vector(1 downto 0) := "00";
     TX_PROGCLK_SEL : string := "POSTPI";
     TX_PROGDIV_CFG : real := 0.0;
     TX_PROGDIV_RATE : std_logic_vector(15 downto 0) := X"0001";
     TX_RXDETECT_CFG : std_logic_vector(13 downto 0) := "00" & X"032";
     TX_RXDETECT_REF : std_logic_vector(2 downto 0) := "100";
     TX_SAMPLE_PERIOD : std_logic_vector(2 downto 0) := "101";
     TX_SARC_LPBK_ENB : std_ulogic := '0';
     TX_XCLK_SEL : string := "TXOUT";
     USE_PCS_CLK_PHASE_SEL : std_ulogic := '0'
  );
  port (
     BUFGTCE : out std_logic_vector(2 downto 0);
     BUFGTCEMASK : out std_logic_vector(2 downto 0);
     BUFGTDIV : out std_logic_vector(8 downto 0);
     BUFGTRESET : out std_logic_vector(2 downto 0);
     BUFGTRSTMASK : out std_logic_vector(2 downto 0);
     CPLLFBCLKLOST : out std_ulogic;
     CPLLLOCK : out std_ulogic;
     CPLLREFCLKLOST : out std_ulogic;
     DMONITOROUT : out std_logic_vector(16 downto 0);
     DRPDO : out std_logic_vector(15 downto 0);
     DRPRDY : out std_ulogic;
     EYESCANDATAERROR : out std_ulogic;
     GTPOWERGOOD : out std_ulogic;
     GTREFCLKMONITOR : out std_ulogic;
     GTYTXN : out std_ulogic;
     GTYTXP : out std_ulogic;
     PCIERATEGEN3 : out std_ulogic;
     PCIERATEIDLE : out std_ulogic;
     PCIERATEQPLLPD : out std_logic_vector(1 downto 0);
     PCIERATEQPLLRESET : out std_logic_vector(1 downto 0);
     PCIESYNCTXSYNCDONE : out std_ulogic;
     PCIEUSERGEN3RDY : out std_ulogic;
     PCIEUSERPHYSTATUSRST : out std_ulogic;
     PCIEUSERRATESTART : out std_ulogic;
     PCSRSVDOUT : out std_logic_vector(15 downto 0);
     PHYSTATUS : out std_ulogic;
     PINRSRVDAS : out std_logic_vector(7 downto 0);
     RESETEXCEPTION : out std_ulogic;
     RXBUFSTATUS : out std_logic_vector(2 downto 0);
     RXBYTEISALIGNED : out std_ulogic;
     RXBYTEREALIGN : out std_ulogic;
     RXCDRLOCK : out std_ulogic;
     RXCDRPHDONE : out std_ulogic;
     RXCHANBONDSEQ : out std_ulogic;
     RXCHANISALIGNED : out std_ulogic;
     RXCHANREALIGN : out std_ulogic;
     RXCHBONDO : out std_logic_vector(4 downto 0);
     RXCKOKDONE : out std_ulogic;
     RXCLKCORCNT : out std_logic_vector(1 downto 0);
     RXCOMINITDET : out std_ulogic;
     RXCOMMADET : out std_ulogic;
     RXCOMSASDET : out std_ulogic;
     RXCOMWAKEDET : out std_ulogic;
     RXCTRL0 : out std_logic_vector(15 downto 0);
     RXCTRL1 : out std_logic_vector(15 downto 0);
     RXCTRL2 : out std_logic_vector(7 downto 0);
     RXCTRL3 : out std_logic_vector(7 downto 0);
     RXDATA : out std_logic_vector(127 downto 0);
     RXDATAEXTENDRSVD : out std_logic_vector(7 downto 0);
     RXDATAVALID : out std_logic_vector(1 downto 0);
     RXDLYSRESETDONE : out std_ulogic;
     RXELECIDLE : out std_ulogic;
     RXHEADER : out std_logic_vector(5 downto 0);
     RXHEADERVALID : out std_logic_vector(1 downto 0);
     RXMONITOROUT : out std_logic_vector(6 downto 0);
     RXOSINTDONE : out std_ulogic;
     RXOSINTSTARTED : out std_ulogic;
     RXOSINTSTROBEDONE : out std_ulogic;
     RXOSINTSTROBESTARTED : out std_ulogic;
     RXOUTCLK : out std_ulogic;
     RXOUTCLKFABRIC : out std_ulogic;
     RXOUTCLKPCS : out std_ulogic;
     RXPHALIGNDONE : out std_ulogic;
     RXPHALIGNERR : out std_ulogic;
     RXPMARESETDONE : out std_ulogic;
     RXPRBSERR : out std_ulogic;
     RXPRBSLOCKED : out std_ulogic;
     RXPRGDIVRESETDONE : out std_ulogic;
     RXRATEDONE : out std_ulogic;
     RXRECCLKOUT : out std_ulogic;
     RXRESETDONE : out std_ulogic;
     RXSLIDERDY : out std_ulogic;
     RXSLIPDONE : out std_ulogic;
     RXSLIPOUTCLKRDY : out std_ulogic;
     RXSLIPPMARDY : out std_ulogic;
     RXSTARTOFSEQ : out std_logic_vector(1 downto 0);
     RXSTATUS : out std_logic_vector(2 downto 0);
     RXSYNCDONE : out std_ulogic;
     RXSYNCOUT : out std_ulogic;
     RXVALID : out std_ulogic;
     TXBUFSTATUS : out std_logic_vector(1 downto 0);
     TXCOMFINISH : out std_ulogic;
     TXDCCDONE : out std_ulogic;
     TXDLYSRESETDONE : out std_ulogic;
     TXOUTCLK : out std_ulogic;
     TXOUTCLKFABRIC : out std_ulogic;
     TXOUTCLKPCS : out std_ulogic;
     TXPHALIGNDONE : out std_ulogic;
     TXPHINITDONE : out std_ulogic;
     TXPMARESETDONE : out std_ulogic;
     TXPRGDIVRESETDONE : out std_ulogic;
     TXRATEDONE : out std_ulogic;
     TXRESETDONE : out std_ulogic;
     TXSYNCDONE : out std_ulogic;
     TXSYNCOUT : out std_ulogic;
     CDRSTEPDIR : in std_ulogic;
     CDRSTEPSQ : in std_ulogic;
     CDRSTEPSX : in std_ulogic;
     CFGRESET : in std_ulogic;
     CLKRSVD0 : in std_ulogic;
     CLKRSVD1 : in std_ulogic;
     CPLLLOCKDETCLK : in std_ulogic;
     CPLLLOCKEN : in std_ulogic;
     CPLLPD : in std_ulogic;
     CPLLREFCLKSEL : in std_logic_vector(2 downto 0);
     CPLLRESET : in std_ulogic;
     DMONFIFORESET : in std_ulogic;
     DMONITORCLK : in std_ulogic;
     DRPADDR : in std_logic_vector(9 downto 0);
     DRPCLK : in std_ulogic;
     DRPDI : in std_logic_vector(15 downto 0);
     DRPEN : in std_ulogic;
     DRPWE : in std_ulogic;
     ELPCALDVORWREN : in std_ulogic;
     ELPCALPAORWREN : in std_ulogic;
     EVODDPHICALDONE : in std_ulogic;
     EVODDPHICALSTART : in std_ulogic;
     EVODDPHIDRDEN : in std_ulogic;
     EVODDPHIDWREN : in std_ulogic;
     EVODDPHIXRDEN : in std_ulogic;
     EVODDPHIXWREN : in std_ulogic;
     EYESCANMODE : in std_ulogic;
     EYESCANRESET : in std_ulogic;
     EYESCANTRIGGER : in std_ulogic;
     GTGREFCLK : in std_ulogic;
     GTNORTHREFCLK0 : in std_ulogic;
     GTNORTHREFCLK1 : in std_ulogic;
     GTREFCLK0 : in std_ulogic;
     GTREFCLK1 : in std_ulogic;
     GTRESETSEL : in std_ulogic;
     GTRSVD : in std_logic_vector(15 downto 0);
     GTRXRESET : in std_ulogic;
     GTSOUTHREFCLK0 : in std_ulogic;
     GTSOUTHREFCLK1 : in std_ulogic;
     GTTXRESET : in std_ulogic;
     GTYRXN : in std_ulogic;
     GTYRXP : in std_ulogic;
     LOOPBACK : in std_logic_vector(2 downto 0);
     LOOPRSVD : in std_logic_vector(15 downto 0);
     LPBKRXTXSEREN : in std_ulogic;
     LPBKTXRXSEREN : in std_ulogic;
     PCIEEQRXEQADAPTDONE : in std_ulogic;
     PCIERSTIDLE : in std_ulogic;
     PCIERSTTXSYNCSTART : in std_ulogic;
     PCIEUSERRATEDONE : in std_ulogic;
     PCSRSVDIN : in std_logic_vector(15 downto 0);
     PCSRSVDIN2 : in std_logic_vector(4 downto 0);
     PMARSVDIN : in std_logic_vector(4 downto 0);
     QPLL0CLK : in std_ulogic;
     QPLL0REFCLK : in std_ulogic;
     QPLL1CLK : in std_ulogic;
     QPLL1REFCLK : in std_ulogic;
     RESETOVRD : in std_ulogic;
     RSTCLKENTX : in std_ulogic;
     RX8B10BEN : in std_ulogic;
     RXBUFRESET : in std_ulogic;
     RXCDRFREQRESET : in std_ulogic;
     RXCDRHOLD : in std_ulogic;
     RXCDROVRDEN : in std_ulogic;
     RXCDRRESET : in std_ulogic;
     RXCDRRESETRSV : in std_ulogic;
     RXCHBONDEN : in std_ulogic;
     RXCHBONDI : in std_logic_vector(4 downto 0);
     RXCHBONDLEVEL : in std_logic_vector(2 downto 0);
     RXCHBONDMASTER : in std_ulogic;
     RXCHBONDSLAVE : in std_ulogic;
     RXCKOKRESET : in std_ulogic;
     RXCOMMADETEN : in std_ulogic;
     RXDCCFORCESTART : in std_ulogic;
     RXDFEAGCHOLD : in std_ulogic;
     RXDFEAGCOVRDEN : in std_ulogic;
     RXDFELFHOLD : in std_ulogic;
     RXDFELFOVRDEN : in std_ulogic;
     RXDFELPMRESET : in std_ulogic;
     RXDFETAP10HOLD : in std_ulogic;
     RXDFETAP10OVRDEN : in std_ulogic;
     RXDFETAP11HOLD : in std_ulogic;
     RXDFETAP11OVRDEN : in std_ulogic;
     RXDFETAP12HOLD : in std_ulogic;
     RXDFETAP12OVRDEN : in std_ulogic;
     RXDFETAP13HOLD : in std_ulogic;
     RXDFETAP13OVRDEN : in std_ulogic;
     RXDFETAP14HOLD : in std_ulogic;
     RXDFETAP14OVRDEN : in std_ulogic;
     RXDFETAP15HOLD : in std_ulogic;
     RXDFETAP15OVRDEN : in std_ulogic;
     RXDFETAP2HOLD : in std_ulogic;
     RXDFETAP2OVRDEN : in std_ulogic;
     RXDFETAP3HOLD : in std_ulogic;
     RXDFETAP3OVRDEN : in std_ulogic;
     RXDFETAP4HOLD : in std_ulogic;
     RXDFETAP4OVRDEN : in std_ulogic;
     RXDFETAP5HOLD : in std_ulogic;
     RXDFETAP5OVRDEN : in std_ulogic;
     RXDFETAP6HOLD : in std_ulogic;
     RXDFETAP6OVRDEN : in std_ulogic;
     RXDFETAP7HOLD : in std_ulogic;
     RXDFETAP7OVRDEN : in std_ulogic;
     RXDFETAP8HOLD : in std_ulogic;
     RXDFETAP8OVRDEN : in std_ulogic;
     RXDFETAP9HOLD : in std_ulogic;
     RXDFETAP9OVRDEN : in std_ulogic;
     RXDFEUTHOLD : in std_ulogic;
     RXDFEUTOVRDEN : in std_ulogic;
     RXDFEVPHOLD : in std_ulogic;
     RXDFEVPOVRDEN : in std_ulogic;
     RXDFEVSEN : in std_ulogic;
     RXDFEXYDEN : in std_ulogic;
     RXDLYBYPASS : in std_ulogic;
     RXDLYEN : in std_ulogic;
     RXDLYOVRDEN : in std_ulogic;
     RXDLYSRESET : in std_ulogic;
     RXELECIDLEMODE : in std_logic_vector(1 downto 0);
     RXGEARBOXSLIP : in std_ulogic;
     RXLATCLK : in std_ulogic;
     RXLPMEN : in std_ulogic;
     RXLPMGCHOLD : in std_ulogic;
     RXLPMGCOVRDEN : in std_ulogic;
     RXLPMHFHOLD : in std_ulogic;
     RXLPMHFOVRDEN : in std_ulogic;
     RXLPMLFHOLD : in std_ulogic;
     RXLPMLFKLOVRDEN : in std_ulogic;
     RXLPMOSHOLD : in std_ulogic;
     RXLPMOSOVRDEN : in std_ulogic;
     RXMCOMMAALIGNEN : in std_ulogic;
     RXMONITORSEL : in std_logic_vector(1 downto 0);
     RXOOBRESET : in std_ulogic;
     RXOSCALRESET : in std_ulogic;
     RXOSHOLD : in std_ulogic;
     RXOSINTCFG : in std_logic_vector(3 downto 0);
     RXOSINTEN : in std_ulogic;
     RXOSINTHOLD : in std_ulogic;
     RXOSINTOVRDEN : in std_ulogic;
     RXOSINTSTROBE : in std_ulogic;
     RXOSINTTESTOVRDEN : in std_ulogic;
     RXOSOVRDEN : in std_ulogic;
     RXOUTCLKSEL : in std_logic_vector(2 downto 0);
     RXPCOMMAALIGNEN : in std_ulogic;
     RXPCSRESET : in std_ulogic;
     RXPD : in std_logic_vector(1 downto 0);
     RXPHALIGN : in std_ulogic;
     RXPHALIGNEN : in std_ulogic;
     RXPHDLYPD : in std_ulogic;
     RXPHDLYRESET : in std_ulogic;
     RXPHOVRDEN : in std_ulogic;
     RXPLLCLKSEL : in std_logic_vector(1 downto 0);
     RXPMARESET : in std_ulogic;
     RXPOLARITY : in std_ulogic;
     RXPRBSCNTRESET : in std_ulogic;
     RXPRBSSEL : in std_logic_vector(3 downto 0);
     RXPROGDIVRESET : in std_ulogic;
     RXRATE : in std_logic_vector(2 downto 0);
     RXRATEMODE : in std_ulogic;
     RXSLIDE : in std_ulogic;
     RXSLIPOUTCLK : in std_ulogic;
     RXSLIPPMA : in std_ulogic;
     RXSYNCALLIN : in std_ulogic;
     RXSYNCIN : in std_ulogic;
     RXSYNCMODE : in std_ulogic;
     RXSYSCLKSEL : in std_logic_vector(1 downto 0);
     RXUSERRDY : in std_ulogic;
     RXUSRCLK : in std_ulogic;
     RXUSRCLK2 : in std_ulogic;
     SIGVALIDCLK : in std_ulogic;
     TSTIN : in std_logic_vector(19 downto 0);
     TX8B10BBYPASS : in std_logic_vector(7 downto 0);
     TX8B10BEN : in std_ulogic;
     TXBUFDIFFCTRL : in std_logic_vector(2 downto 0);
     TXCOMINIT : in std_ulogic;
     TXCOMSAS : in std_ulogic;
     TXCOMWAKE : in std_ulogic;
     TXCTRL0 : in std_logic_vector(15 downto 0);
     TXCTRL1 : in std_logic_vector(15 downto 0);
     TXCTRL2 : in std_logic_vector(7 downto 0);
     TXDATA : in std_logic_vector(127 downto 0);
     TXDATAEXTENDRSVD : in std_logic_vector(7 downto 0);
     TXDCCFORCESTART : in std_ulogic;
     TXDCCRESET : in std_ulogic;
     TXDEEMPH : in std_ulogic;
     TXDETECTRX : in std_ulogic;
     TXDIFFCTRL : in std_logic_vector(4 downto 0);
     TXDIFFPD : in std_ulogic;
     TXDLYBYPASS : in std_ulogic;
     TXDLYEN : in std_ulogic;
     TXDLYHOLD : in std_ulogic;
     TXDLYOVRDEN : in std_ulogic;
     TXDLYSRESET : in std_ulogic;
     TXDLYUPDOWN : in std_ulogic;
     TXELECIDLE : in std_ulogic;
     TXELFORCESTART : in std_ulogic;
     TXHEADER : in std_logic_vector(5 downto 0);
     TXINHIBIT : in std_ulogic;
     TXLATCLK : in std_ulogic;
     TXMAINCURSOR : in std_logic_vector(6 downto 0);
     TXMARGIN : in std_logic_vector(2 downto 0);
     TXOUTCLKSEL : in std_logic_vector(2 downto 0);
     TXPCSRESET : in std_ulogic;
     TXPD : in std_logic_vector(1 downto 0);
     TXPDELECIDLEMODE : in std_ulogic;
     TXPHALIGN : in std_ulogic;
     TXPHALIGNEN : in std_ulogic;
     TXPHDLYPD : in std_ulogic;
     TXPHDLYRESET : in std_ulogic;
     TXPHDLYTSTCLK : in std_ulogic;
     TXPHINIT : in std_ulogic;
     TXPHOVRDEN : in std_ulogic;
     TXPIPPMEN : in std_ulogic;
     TXPIPPMOVRDEN : in std_ulogic;
     TXPIPPMPD : in std_ulogic;
     TXPIPPMSEL : in std_ulogic;
     TXPIPPMSTEPSIZE : in std_logic_vector(4 downto 0);
     TXPISOPD : in std_ulogic;
     TXPLLCLKSEL : in std_logic_vector(1 downto 0);
     TXPMARESET : in std_ulogic;
     TXPOLARITY : in std_ulogic;
     TXPOSTCURSOR : in std_logic_vector(4 downto 0);
     TXPRBSFORCEERR : in std_ulogic;
     TXPRBSSEL : in std_logic_vector(3 downto 0);
     TXPRECURSOR : in std_logic_vector(4 downto 0);
     TXPROGDIVRESET : in std_ulogic;
     TXRATE : in std_logic_vector(2 downto 0);
     TXRATEMODE : in std_ulogic;
     TXSEQUENCE : in std_logic_vector(6 downto 0);
     TXSWING : in std_ulogic;
     TXSYNCALLIN : in std_ulogic;
     TXSYNCIN : in std_ulogic;
     TXSYNCMODE : in std_ulogic;
     TXSYSCLKSEL : in std_logic_vector(1 downto 0);
     TXUSERRDY : in std_ulogic;
     TXUSRCLK : in std_ulogic;
     TXUSRCLK2 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  GTYE3_CHANNEL : component is "PRIMITIVE";

----- component GTYE3_COMMON -----
component GTYE3_COMMON
  generic (
     A_SDM1DATA1_0 : std_logic_vector(15 downto 0) := "0000000000000000";
     A_SDM1DATA1_1 : std_logic_vector(8 downto 0) := "000000000";
     BIAS_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     BIAS_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     BIAS_CFG2 : std_logic_vector(15 downto 0) := X"0000";
     BIAS_CFG3 : std_logic_vector(15 downto 0) := X"0000";
     BIAS_CFG4 : std_logic_vector(15 downto 0) := X"0000";
     BIAS_CFG_RSVD : std_logic_vector(9 downto 0) := "0000000000";
     COMMON_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     COMMON_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     POR_CFG : std_logic_vector(15 downto 0) := X"0004";
     PPF0_CFG : std_logic_vector(15 downto 0) := X"0FFF";
     PPF1_CFG : std_logic_vector(15 downto 0) := X"0FFF";
     QPLL0CLKOUT_RATE : string := "FULL";
     QPLL0_CFG0 : std_logic_vector(15 downto 0) := X"301C";
     QPLL0_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     QPLL0_CFG1_G3 : std_logic_vector(15 downto 0) := X"0020";
     QPLL0_CFG2 : std_logic_vector(15 downto 0) := X"0780";
     QPLL0_CFG2_G3 : std_logic_vector(15 downto 0) := X"0780";
     QPLL0_CFG3 : std_logic_vector(15 downto 0) := X"0120";
     QPLL0_CFG4 : std_logic_vector(15 downto 0) := X"0021";
     QPLL0_CP : std_logic_vector(9 downto 0) := "0000011111";
     QPLL0_CP_G3 : std_logic_vector(9 downto 0) := "0000011111";
     QPLL0_FBDIV : integer := 66;
     QPLL0_FBDIV_G3 : integer := 80;
     QPLL0_INIT_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     QPLL0_INIT_CFG1 : std_logic_vector(7 downto 0) := X"00";
     QPLL0_LOCK_CFG : std_logic_vector(15 downto 0) := X"21E8";
     QPLL0_LOCK_CFG_G3 : std_logic_vector(15 downto 0) := X"21E8";
     QPLL0_LPF : std_logic_vector(9 downto 0) := "1111111111";
     QPLL0_LPF_G3 : std_logic_vector(9 downto 0) := "1111111111";
     QPLL0_REFCLK_DIV : integer := 2;
     QPLL0_SDM_CFG0 : std_logic_vector(15 downto 0) := "0000000001000000";
     QPLL0_SDM_CFG1 : std_logic_vector(15 downto 0) := "0000000000000000";
     QPLL0_SDM_CFG2 : std_logic_vector(15 downto 0) := "0000000000000000";
     QPLL1CLKOUT_RATE : string := "FULL";
     QPLL1_CFG0 : std_logic_vector(15 downto 0) := X"301C";
     QPLL1_CFG1 : std_logic_vector(15 downto 0) := X"0000";
     QPLL1_CFG1_G3 : std_logic_vector(15 downto 0) := X"0020";
     QPLL1_CFG2 : std_logic_vector(15 downto 0) := X"0780";
     QPLL1_CFG2_G3 : std_logic_vector(15 downto 0) := X"0780";
     QPLL1_CFG3 : std_logic_vector(15 downto 0) := X"0120";
     QPLL1_CFG4 : std_logic_vector(15 downto 0) := X"0021";
     QPLL1_CP : std_logic_vector(9 downto 0) := "0000011111";
     QPLL1_CP_G3 : std_logic_vector(9 downto 0) := "0000011111";
     QPLL1_FBDIV : integer := 66;
     QPLL1_FBDIV_G3 : integer := 80;
     QPLL1_INIT_CFG0 : std_logic_vector(15 downto 0) := X"0000";
     QPLL1_INIT_CFG1 : std_logic_vector(7 downto 0) := X"00";
     QPLL1_LOCK_CFG : std_logic_vector(15 downto 0) := X"21E8";
     QPLL1_LOCK_CFG_G3 : std_logic_vector(15 downto 0) := X"21E8";
     QPLL1_LPF : std_logic_vector(9 downto 0) := "1111111111";
     QPLL1_LPF_G3 : std_logic_vector(9 downto 0) := "1111111111";
     QPLL1_REFCLK_DIV : integer := 2;
     QPLL1_SDM_CFG0 : std_logic_vector(15 downto 0) := "0000000001000000";
     QPLL1_SDM_CFG1 : std_logic_vector(15 downto 0) := "0000000000000000";
     QPLL1_SDM_CFG2 : std_logic_vector(15 downto 0) := "0000000000000000";
     RSVD_ATTR0 : std_logic_vector(15 downto 0) := X"0000";
     RSVD_ATTR1 : std_logic_vector(15 downto 0) := X"0000";
     RSVD_ATTR2 : std_logic_vector(15 downto 0) := X"0000";
     RSVD_ATTR3 : std_logic_vector(15 downto 0) := X"0000";
     RXRECCLKOUT0_SEL : std_logic_vector(1 downto 0) := "00";
     RXRECCLKOUT1_SEL : std_logic_vector(1 downto 0) := "00";
     SARC_EN : std_ulogic := '1';
     SARC_SEL : std_ulogic := '0';
     SDM0INITSEED0_0 : std_logic_vector(15 downto 0) := "0000000000000000";
     SDM0INITSEED0_1 : std_logic_vector(8 downto 0) := "000000000";
     SDM1INITSEED0_0 : std_logic_vector(15 downto 0) := "0000000000000000";
     SDM1INITSEED0_1 : std_logic_vector(8 downto 0) := "000000000";
     SIM_QPLL0REFCLK_SEL : std_logic_vector(2 downto 0) := "001";
     SIM_QPLL1REFCLK_SEL : std_logic_vector(2 downto 0) := "001";
     SIM_RESET_SPEEDUP : string := "TRUE";
     SIM_VERSION : string := "Ver_1"
  );
  port (
     DRPDO : out std_logic_vector(15 downto 0);
     DRPRDY : out std_ulogic;
     PMARSVDOUT0 : out std_logic_vector(7 downto 0);
     PMARSVDOUT1 : out std_logic_vector(7 downto 0);
     QPLL0FBCLKLOST : out std_ulogic;
     QPLL0LOCK : out std_ulogic;
     QPLL0OUTCLK : out std_ulogic;
     QPLL0OUTREFCLK : out std_ulogic;
     QPLL0REFCLKLOST : out std_ulogic;
     QPLL1FBCLKLOST : out std_ulogic;
     QPLL1LOCK : out std_ulogic;
     QPLL1OUTCLK : out std_ulogic;
     QPLL1OUTREFCLK : out std_ulogic;
     QPLL1REFCLKLOST : out std_ulogic;
     QPLLDMONITOR0 : out std_logic_vector(7 downto 0);
     QPLLDMONITOR1 : out std_logic_vector(7 downto 0);
     REFCLKOUTMONITOR0 : out std_ulogic;
     REFCLKOUTMONITOR1 : out std_ulogic;
     RXRECCLK0_SEL : out std_logic_vector(1 downto 0);
     RXRECCLK1_SEL : out std_logic_vector(1 downto 0);
     SDM0FINALOUT : out std_logic_vector(3 downto 0);
     SDM0TESTDATA : out std_logic_vector(14 downto 0);
     SDM1FINALOUT : out std_logic_vector(3 downto 0);
     SDM1TESTDATA : out std_logic_vector(14 downto 0);
     BGBYPASSB : in std_ulogic;
     BGMONITORENB : in std_ulogic;
     BGPDB : in std_ulogic;
     BGRCALOVRD : in std_logic_vector(4 downto 0);
     BGRCALOVRDENB : in std_ulogic;
     DRPADDR : in std_logic_vector(9 downto 0);
     DRPCLK : in std_ulogic;
     DRPDI : in std_logic_vector(15 downto 0);
     DRPEN : in std_ulogic;
     DRPWE : in std_ulogic;
     GTGREFCLK0 : in std_ulogic;
     GTGREFCLK1 : in std_ulogic;
     GTNORTHREFCLK00 : in std_ulogic;
     GTNORTHREFCLK01 : in std_ulogic;
     GTNORTHREFCLK10 : in std_ulogic;
     GTNORTHREFCLK11 : in std_ulogic;
     GTREFCLK00 : in std_ulogic;
     GTREFCLK01 : in std_ulogic;
     GTREFCLK10 : in std_ulogic;
     GTREFCLK11 : in std_ulogic;
     GTSOUTHREFCLK00 : in std_ulogic;
     GTSOUTHREFCLK01 : in std_ulogic;
     GTSOUTHREFCLK10 : in std_ulogic;
     GTSOUTHREFCLK11 : in std_ulogic;
     PMARSVD0 : in std_logic_vector(7 downto 0);
     PMARSVD1 : in std_logic_vector(7 downto 0);
     QPLL0CLKRSVD0 : in std_ulogic;
     QPLL0LOCKDETCLK : in std_ulogic;
     QPLL0LOCKEN : in std_ulogic;
     QPLL0PD : in std_ulogic;
     QPLL0REFCLKSEL : in std_logic_vector(2 downto 0);
     QPLL0RESET : in std_ulogic;
     QPLL1CLKRSVD0 : in std_ulogic;
     QPLL1LOCKDETCLK : in std_ulogic;
     QPLL1LOCKEN : in std_ulogic;
     QPLL1PD : in std_ulogic;
     QPLL1REFCLKSEL : in std_logic_vector(2 downto 0);
     QPLL1RESET : in std_ulogic;
     QPLLRSVD1 : in std_logic_vector(7 downto 0);
     QPLLRSVD2 : in std_logic_vector(4 downto 0);
     QPLLRSVD3 : in std_logic_vector(4 downto 0);
     QPLLRSVD4 : in std_logic_vector(7 downto 0);
     RCALENB : in std_ulogic;
     SDM0DATA : in std_logic_vector(24 downto 0);
     SDM0RESET : in std_ulogic;
     SDM0WIDTH : in std_logic_vector(1 downto 0);
     SDM1DATA : in std_logic_vector(24 downto 0);
     SDM1RESET : in std_ulogic;
     SDM1WIDTH : in std_logic_vector(1 downto 0)
  );
end component;
attribute BOX_TYPE of
  GTYE3_COMMON : component is "PRIMITIVE";

----- component HARD_SYNC -----
component HARD_SYNC
  generic (
     INIT : std_ulogic := '0';
     IS_CLK_INVERTED : std_ulogic := '0';
     LATENCY : integer := 2
  );
  port (
     DOUT : out std_ulogic;
     CLK : in std_ulogic;
     DIN : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  HARD_SYNC : component is "PRIMITIVE";

----- component HPIO_VREF -----
component HPIO_VREF
  generic (
     VREF_CNTR : string := "OFF"
  );
  port (
     VREF : out std_ulogic;
     FABRIC_VREF_TUNE : in std_logic_vector(6 downto 0)
  );
end component;
attribute BOX_TYPE of
  HPIO_VREF : component is "PRIMITIVE";

----- component IBUF -----
component IBUF
  generic (
     CAPACITANCE : string := "DONT_CARE";
     IBUF_DELAY_VALUE : string := "0";
     IBUF_LOW_PWR : boolean := TRUE;
     IFD_DELAY_VALUE : string := "AUTO";
     IOSTANDARD : string := "DEFAULT"
  );
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUF : component is "PRIMITIVE";

----- component IBUFCTRL -----
component IBUFCTRL
  generic (
     ISTANDARD : string := "UNUSED";
     USE_IBUFDISABLE : string := "FALSE"
  );
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     IBUFDISABLE : in std_ulogic;
     INTERMDISABLE : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFCTRL : component is "PRIMITIVE";

----- component IBUFDS -----
component IBUFDS
  generic (
     CAPACITANCE : string := "DONT_CARE";
     DIFF_TERM : boolean := FALSE;
     DQS_BIAS : string := "FALSE";
     IBUF_DELAY_VALUE : string := "0";
     IBUF_LOW_PWR : boolean := TRUE;
     IFD_DELAY_VALUE : string := "AUTO";
     IOSTANDARD : string := "DEFAULT"
  );
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     IB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFDS : component is "PRIMITIVE";

----- component IBUFDSE3 -----
component IBUFDSE3
  generic (
     DQS_BIAS : string := "FALSE";
     IBUF_LOW_PWR : boolean := TRUE;
     IOSTANDARD : string := "DEFAULT";
     SIM_INPUT_BUFFER_OFFSET : integer := 0
  );
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     IB : in std_ulogic;
     OSC : in std_logic_vector(3 downto 0);
     OSC_EN : in std_logic_vector(1 downto 0);
     VREF : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFDSE3 : component is "PRIMITIVE";

----- component IBUFDS_DIFF_OUT -----
component IBUFDS_DIFF_OUT
  generic (
     DIFF_TERM : boolean := FALSE;
     IBUF_LOW_PWR : boolean := TRUE;
     IOSTANDARD : string := "DEFAULT"
  );
  port (
     O : out STD_ULOGIC;
     OB : out STD_ULOGIC;
     I : in STD_ULOGIC;
     IB : in STD_ULOGIC
  );
end component;
attribute BOX_TYPE of
  IBUFDS_DIFF_OUT : component is "PRIMITIVE";

----- component IBUFDS_DIFF_OUT_IBUFDISABLE -----
component IBUFDS_DIFF_OUT_IBUFDISABLE
  generic (
     DIFF_TERM : string := "FALSE";
     IBUF_LOW_PWR : string := "TRUE";
     IOSTANDARD : string := "DEFAULT";
     USE_IBUFDISABLE : string := "TRUE"
  );
  port (
     O : out STD_ULOGIC;
     OB : out STD_ULOGIC;
     I : in STD_ULOGIC;
     IB : in STD_ULOGIC;
     IBUFDISABLE : in STD_ULOGIC
  );
end component;
attribute BOX_TYPE of
  IBUFDS_DIFF_OUT_IBUFDISABLE : component is "PRIMITIVE";

----- component IBUFDS_DIFF_OUT_INTERMDISABLE -----
component IBUFDS_DIFF_OUT_INTERMDISABLE
  generic (
     DIFF_TERM : string := "FALSE";
     IBUF_LOW_PWR : string := "TRUE";
     IOSTANDARD : string := "DEFAULT";
     USE_IBUFDISABLE : string := "TRUE"
  );
  port (
     O : out STD_ULOGIC;
     OB : out STD_ULOGIC;
     I : in STD_ULOGIC;
     IB : in STD_ULOGIC;
     IBUFDISABLE : in STD_ULOGIC;
     INTERMDISABLE : in STD_ULOGIC
  );
end component;
attribute BOX_TYPE of
  IBUFDS_DIFF_OUT_INTERMDISABLE : component is "PRIMITIVE";

----- component IBUFDS_GTE2 -----
component IBUFDS_GTE2
  generic (
     CLKCM_CFG : boolean := TRUE;
     CLKRCV_TRST : boolean := TRUE;
     CLKSWING_CFG : bit_vector := "11"
  );
  port (
     O : out std_ulogic;
     ODIV2 : out std_ulogic;
     CEB : in std_ulogic;
     I : in std_ulogic;
     IB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFDS_GTE2 : component is "PRIMITIVE";

----- component IBUFDS_GTE3 -----
component IBUFDS_GTE3
  generic (
     REFCLK_EN_TX_PATH : std_ulogic := '0';
     REFCLK_HROW_CK_SEL : std_logic_vector (1 downto 0) := "00";
     REFCLK_ICNTL_RX : std_logic_vector (1 downto 0) := "00"
  );
  port (
     O : out std_ulogic;
     ODIV2 : out std_ulogic;
     CEB : in std_ulogic;
     I : in std_ulogic;
     IB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFDS_GTE3 : component is "PRIMITIVE";

----- component IBUFDS_IBUFDISABLE -----
component IBUFDS_IBUFDISABLE
  generic (
     DIFF_TERM : string := "FALSE";
     DQS_BIAS : string := "FALSE";
     IBUF_LOW_PWR : string := "TRUE";
     IOSTANDARD : string := "DEFAULT";
     USE_IBUFDISABLE : string := "TRUE"
  );
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     IB : in std_ulogic;
     IBUFDISABLE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFDS_IBUFDISABLE : component is "PRIMITIVE";

----- component IBUFDS_IBUFDISABLE_INT -----
component IBUFDS_IBUFDISABLE_INT
  generic (
     DIFF_TERM : string := "FALSE";
     DQS_BIAS : string := "FALSE";
     IBUF_LOW_PWR : string := "TRUE";
     IOSTANDARD : string := "DEFAULT";
     USE_IBUFDISABLE : string := "TRUE"
  );
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     IB : in std_ulogic;
     IBUFDISABLE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFDS_IBUFDISABLE_INT : component is "PRIMITIVE";

----- component IBUFDS_INTERMDISABLE -----
component IBUFDS_INTERMDISABLE
  generic (
     DIFF_TERM : string := "FALSE";
     DQS_BIAS : string := "FALSE";
     IBUF_LOW_PWR : string := "TRUE";
     IOSTANDARD : string := "DEFAULT";
     USE_IBUFDISABLE : string := "TRUE"
  );
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     IB : in std_ulogic;
     IBUFDISABLE : in std_ulogic;
     INTERMDISABLE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFDS_INTERMDISABLE : component is "PRIMITIVE";

----- component IBUFDS_INTERMDISABLE_INT -----
component IBUFDS_INTERMDISABLE_INT
  generic (
     DIFF_TERM : string := "FALSE";
     DQS_BIAS : string := "FALSE";
     IBUF_LOW_PWR : string := "TRUE";
     IOSTANDARD : string := "DEFAULT";
     USE_IBUFDISABLE : string := "TRUE"
  );
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     IB : in std_ulogic;
     IBUFDISABLE : in std_ulogic;
     INTERMDISABLE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFDS_INTERMDISABLE_INT : component is "PRIMITIVE";

----- component IBUFE3 -----
component IBUFE3
  generic (
     IBUF_LOW_PWR : boolean := TRUE;
     IOSTANDARD : string := "DEFAULT";
     SIM_INPUT_BUFFER_OFFSET : integer := 0
  );
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     OSC : in std_logic_vector(3 downto 0);
     OSC_EN : in std_ulogic;
     VREF : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUFE3 : component is "PRIMITIVE";

----- component IBUF_ANALOG -----
component IBUF_ANALOG
  port (
     O : out std_ulogic := 'L';
     I : in std_ulogic := 'L'
  );
end component;
attribute BOX_TYPE of
  IBUF_ANALOG : component is "PRIMITIVE";

----- component IBUF_IBUFDISABLE -----
component IBUF_IBUFDISABLE
  generic (
     IBUF_LOW_PWR : string := "TRUE";
     IOSTANDARD : string := "DEFAULT";
     USE_IBUFDISABLE : string := "TRUE"
  );
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     IBUFDISABLE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUF_IBUFDISABLE : component is "PRIMITIVE";

----- component IBUF_INTERMDISABLE -----
component IBUF_INTERMDISABLE
  generic (
     IBUF_LOW_PWR : string := "TRUE";
     IOSTANDARD : string := "DEFAULT";
     USE_IBUFDISABLE : string := "TRUE"
  );
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     IBUFDISABLE : in std_ulogic;
     INTERMDISABLE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IBUF_INTERMDISABLE : component is "PRIMITIVE";

----- component ICAPE2 -----
component ICAPE2
  generic (
     DEVICE_ID : bit_vector := X"03651093";
     ICAP_WIDTH : string := "X32";
     SIM_CFG_FILE_NAME : string := "NONE"
  );
  port (
     O : out std_logic_vector(31 downto 0);
     CLK : in std_ulogic;
     CSIB : in std_ulogic;
     I : in std_logic_vector(31 downto 0);
     RDWRB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  ICAPE2 : component is "PRIMITIVE";

----- component ICAPE3 -----
component ICAPE3
  generic (
     DEVICE_ID : bit_vector := X"03628093";
     ICAP_AUTO_SWITCH : string := "DISABLE";
     SIM_CFG_FILE_NAME : string := "NONE"
  );
  port (
     AVAIL : out std_ulogic := '0';
     O : out std_logic_vector(31 downto 0);
     PRDONE : out std_ulogic;
     PRERROR : out std_ulogic;
     CLK : in std_ulogic;
     CSIB : in std_ulogic;
     I : in std_logic_vector(31 downto 0);
     RDWRB : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  ICAPE3 : component is "PRIMITIVE";

----- component IDDR -----
component IDDR
  generic (
     DDR_CLK_EDGE : string := "OPPOSITE_EDGE";
     INIT_Q1 : bit := '0';
     INIT_Q2 : bit := '0';
     IS_C_INVERTED : std_ulogic := '0';
     IS_D_INVERTED : std_ulogic := '0';
     SRTYPE : string := "SYNC"
  );
  port (
     Q1 : out std_ulogic;
     Q2 : out std_ulogic;
     C : in std_ulogic;
     CE : in std_ulogic;
     D : in std_ulogic;
     R : in std_ulogic := 'L';
     S : in std_ulogic := 'L'
  );
end component;
attribute BOX_TYPE of
  IDDR : component is "PRIMITIVE";

----- component IDDRE1 -----
component IDDRE1
  generic (
     DDR_CLK_EDGE : string := "OPPOSITE_EDGE";
     IS_C_INVERTED : std_ulogic := '0'
  );
  port (
     Q1 : out std_ulogic;
     Q2 : out std_ulogic;
     C : in std_ulogic;
     CB : in std_ulogic;
     D : in std_ulogic;
     R : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IDDRE1 : component is "PRIMITIVE";

----- component IDDR_2CLK -----
component IDDR_2CLK
  generic (
     DDR_CLK_EDGE : string := "OPPOSITE_EDGE";
     INIT_Q1 : bit := '0';
     INIT_Q2 : bit := '0';
     IS_CB_INVERTED : std_ulogic := '0';
     IS_C_INVERTED : std_ulogic := '0';
     IS_D_INVERTED : std_ulogic := '0';
     SRTYPE : string := "SYNC"
  );
  port (
     Q1 : out std_ulogic;
     Q2 : out std_ulogic;
     C : in std_ulogic;
     CB : in std_ulogic;
     CE : in std_ulogic;
     D : in std_ulogic;
     R : in std_ulogic;
     S : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IDDR_2CLK : component is "PRIMITIVE";

----- component IDELAYCTRL -----
component IDELAYCTRL
  port (
     RDY : out std_ulogic;
     REFCLK : in std_ulogic;
     RST : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IDELAYCTRL : component is "PRIMITIVE";

----- component IDELAYE2 -----
component IDELAYE2
  generic (
     CINVCTRL_SEL : string := "FALSE";
     DELAY_SRC : string := "IDATAIN";
     HIGH_PERFORMANCE_MODE : string := "FALSE";
     IDELAY_TYPE : string := "FIXED";
     IDELAY_VALUE : integer := 0;
     IS_C_INVERTED : std_ulogic := '0';
     IS_DATAIN_INVERTED : std_ulogic := '0';
     IS_IDATAIN_INVERTED : std_ulogic := '0';
     PIPE_SEL : string := "FALSE";
     REFCLK_FREQUENCY : real := 200.0;
     SIGNAL_PATTERN : string := "DATA"
  );
  port (
     CNTVALUEOUT : out std_logic_vector(4 downto 0);
     DATAOUT : out std_ulogic;
     C : in std_ulogic;
     CE : in std_ulogic;
     CINVCTRL : in std_ulogic;
     CNTVALUEIN : in std_logic_vector(4 downto 0);
     DATAIN : in std_ulogic;
     IDATAIN : in std_ulogic;
     INC : in std_ulogic;
     LD : in std_ulogic;
     LDPIPEEN : in std_ulogic;
     REGRST : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IDELAYE2 : component is "PRIMITIVE";

----- component IDELAYE2_FINEDELAY -----
component IDELAYE2_FINEDELAY
  generic (
     CINVCTRL_SEL : string := "FALSE";
     DELAY_SRC : string := "IDATAIN";
     FINEDELAY : string := "BYPASS";
     HIGH_PERFORMANCE_MODE : string := "FALSE";
     IDELAY_TYPE : string := "FIXED";
     IDELAY_VALUE : integer := 0;
     IS_C_INVERTED : std_ulogic := '0';
     IS_DATAIN_INVERTED : std_ulogic := '0';
     IS_IDATAIN_INVERTED : std_ulogic := '0';
     PIPE_SEL : string := "FALSE";
     REFCLK_FREQUENCY : real := 200.0;
     SIGNAL_PATTERN : string := "DATA"
  );
  port (
     CNTVALUEOUT : out std_logic_vector(4 downto 0);
     DATAOUT : out std_ulogic;
     C : in std_ulogic;
     CE : in std_ulogic;
     CINVCTRL : in std_ulogic;
     CNTVALUEIN : in std_logic_vector(4 downto 0);
     DATAIN : in std_ulogic;
     IDATAIN : in std_ulogic;
     IFDLY : in std_logic_vector(2 downto 0);
     INC : in std_ulogic;
     LD : in std_ulogic;
     LDPIPEEN : in std_ulogic;
     REGRST : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IDELAYE2_FINEDELAY : component is "PRIMITIVE";

----- component IDELAYE3 -----
component IDELAYE3
  generic (
     CASCADE : string := "NONE";
     DELAY_FORMAT : string := "TIME";
     DELAY_SRC : string := "IDATAIN";
     DELAY_TYPE : string := "FIXED";
     DELAY_VALUE : integer := 0;
     IS_CLK_INVERTED : std_ulogic := '0';
     IS_RST_INVERTED : std_ulogic := '0';
     REFCLK_FREQUENCY : real := 300.0;
     UPDATE_MODE : string := "ASYNC"
  );
  port (
     CASC_OUT : out std_ulogic;
     CNTVALUEOUT : out std_logic_vector(8 downto 0);
     DATAOUT : out std_ulogic;
     CASC_IN : in std_ulogic;
     CASC_RETURN : in std_ulogic;
     CE : in std_ulogic;
     CLK : in std_ulogic;
     CNTVALUEIN : in std_logic_vector(8 downto 0);
     DATAIN : in std_ulogic;
     EN_VTC : in std_ulogic;
     IDATAIN : in std_ulogic;
     INC : in std_ulogic;
     LOAD : in std_ulogic;
     RST : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IDELAYE3 : component is "PRIMITIVE";

----- component ILKN -----
component ILKN
  generic (
     BYPASS : string := "FALSE";
     CTL_RX_BURSTMAX : std_logic_vector(1 downto 0) := "11";
     CTL_RX_CHAN_EXT : std_logic_vector(1 downto 0) := "00";
     CTL_RX_LAST_LANE : std_logic_vector(3 downto 0) := X"B";
     CTL_RX_MFRAMELEN_MINUS1 : std_logic_vector(15 downto 0) := X"07FF";
     CTL_RX_PACKET_MODE : string := "TRUE";
     CTL_RX_RETRANS_MULT : std_logic_vector(2 downto 0) := "000";
     CTL_RX_RETRANS_RETRY : std_logic_vector(3 downto 0) := X"2";
     CTL_RX_RETRANS_TIMER1 : std_logic_vector(15 downto 0) := X"0000";
     CTL_RX_RETRANS_TIMER2 : std_logic_vector(15 downto 0) := X"0008";
     CTL_RX_RETRANS_WDOG : std_logic_vector(11 downto 0) := X"000";
     CTL_RX_RETRANS_WRAP_TIMER : std_logic_vector(7 downto 0) := X"00";
     CTL_TEST_MODE_PIN_CHAR : string := "FALSE";
     CTL_TX_BURSTMAX : std_logic_vector(1 downto 0) := "11";
     CTL_TX_BURSTSHORT : std_logic_vector(2 downto 0) := "001";
     CTL_TX_CHAN_EXT : std_logic_vector(1 downto 0) := "00";
     CTL_TX_DISABLE_SKIPWORD : string := "TRUE";
     CTL_TX_FC_CALLEN : std_logic_vector(6 downto 0) := "000" & X"0";
     CTL_TX_LAST_LANE : std_logic_vector(3 downto 0) := X"B";
     CTL_TX_MFRAMELEN_MINUS1 : std_logic_vector(15 downto 0) := X"07FF";
     CTL_TX_RETRANS_DEPTH : std_logic_vector(13 downto 0) := "00" & X"800";
     CTL_TX_RETRANS_MULT : std_logic_vector(2 downto 0) := "000";
     CTL_TX_RETRANS_RAM_BANKS : std_logic_vector(1 downto 0) := "11";
     MODE : string := "TRUE";
     TEST_MODE_PIN_CHAR : string := "FALSE"
  );
  port (
     DRP_DO : out std_logic_vector(15 downto 0);
     DRP_RDY : out std_ulogic;
     RX_BYPASS_DATAOUT00 : out std_logic_vector(65 downto 0);
     RX_BYPASS_DATAOUT01 : out std_logic_vector(65 downto 0);
     RX_BYPASS_DATAOUT02 : out std_logic_vector(65 downto 0);
     RX_BYPASS_DATAOUT03 : out std_logic_vector(65 downto 0);
     RX_BYPASS_DATAOUT04 : out std_logic_vector(65 downto 0);
     RX_BYPASS_DATAOUT05 : out std_logic_vector(65 downto 0);
     RX_BYPASS_DATAOUT06 : out std_logic_vector(65 downto 0);
     RX_BYPASS_DATAOUT07 : out std_logic_vector(65 downto 0);
     RX_BYPASS_DATAOUT08 : out std_logic_vector(65 downto 0);
     RX_BYPASS_DATAOUT09 : out std_logic_vector(65 downto 0);
     RX_BYPASS_DATAOUT10 : out std_logic_vector(65 downto 0);
     RX_BYPASS_DATAOUT11 : out std_logic_vector(65 downto 0);
     RX_BYPASS_ENAOUT : out std_logic_vector(11 downto 0);
     RX_BYPASS_IS_AVAILOUT : out std_logic_vector(11 downto 0);
     RX_BYPASS_IS_BADLYFRAMEDOUT : out std_logic_vector(11 downto 0);
     RX_BYPASS_IS_OVERFLOWOUT : out std_logic_vector(11 downto 0);
     RX_BYPASS_IS_SYNCEDOUT : out std_logic_vector(11 downto 0);
     RX_BYPASS_IS_SYNCWORDOUT : out std_logic_vector(11 downto 0);
     RX_CHANOUT0 : out std_logic_vector(10 downto 0);
     RX_CHANOUT1 : out std_logic_vector(10 downto 0);
     RX_CHANOUT2 : out std_logic_vector(10 downto 0);
     RX_CHANOUT3 : out std_logic_vector(10 downto 0);
     RX_DATAOUT0 : out std_logic_vector(127 downto 0);
     RX_DATAOUT1 : out std_logic_vector(127 downto 0);
     RX_DATAOUT2 : out std_logic_vector(127 downto 0);
     RX_DATAOUT3 : out std_logic_vector(127 downto 0);
     RX_ENAOUT0 : out std_ulogic;
     RX_ENAOUT1 : out std_ulogic;
     RX_ENAOUT2 : out std_ulogic;
     RX_ENAOUT3 : out std_ulogic;
     RX_EOPOUT0 : out std_ulogic;
     RX_EOPOUT1 : out std_ulogic;
     RX_EOPOUT2 : out std_ulogic;
     RX_EOPOUT3 : out std_ulogic;
     RX_ERROUT0 : out std_ulogic;
     RX_ERROUT1 : out std_ulogic;
     RX_ERROUT2 : out std_ulogic;
     RX_ERROUT3 : out std_ulogic;
     RX_MTYOUT0 : out std_logic_vector(3 downto 0);
     RX_MTYOUT1 : out std_logic_vector(3 downto 0);
     RX_MTYOUT2 : out std_logic_vector(3 downto 0);
     RX_MTYOUT3 : out std_logic_vector(3 downto 0);
     RX_OVFOUT : out std_ulogic;
     RX_SOPOUT0 : out std_ulogic;
     RX_SOPOUT1 : out std_ulogic;
     RX_SOPOUT2 : out std_ulogic;
     RX_SOPOUT3 : out std_ulogic;
     STAT_RX_ALIGNED : out std_ulogic;
     STAT_RX_ALIGNED_ERR : out std_ulogic;
     STAT_RX_BAD_TYPE_ERR : out std_logic_vector(11 downto 0);
     STAT_RX_BURSTMAX_ERR : out std_ulogic;
     STAT_RX_BURST_ERR : out std_ulogic;
     STAT_RX_CRC24_ERR : out std_ulogic;
     STAT_RX_CRC32_ERR : out std_logic_vector(11 downto 0);
     STAT_RX_CRC32_VALID : out std_logic_vector(11 downto 0);
     STAT_RX_DESCRAM_ERR : out std_logic_vector(11 downto 0);
     STAT_RX_DIAGWORD_INTFSTAT : out std_logic_vector(11 downto 0);
     STAT_RX_DIAGWORD_LANESTAT : out std_logic_vector(11 downto 0);
     STAT_RX_FC_STAT : out std_logic_vector(255 downto 0);
     STAT_RX_FRAMING_ERR : out std_logic_vector(11 downto 0);
     STAT_RX_MEOP_ERR : out std_ulogic;
     STAT_RX_MF_ERR : out std_logic_vector(11 downto 0);
     STAT_RX_MF_LEN_ERR : out std_logic_vector(11 downto 0);
     STAT_RX_MF_REPEAT_ERR : out std_logic_vector(11 downto 0);
     STAT_RX_MISALIGNED : out std_ulogic;
     STAT_RX_MSOP_ERR : out std_ulogic;
     STAT_RX_MUBITS : out std_logic_vector(7 downto 0);
     STAT_RX_MUBITS_UPDATED : out std_ulogic;
     STAT_RX_OVERFLOW_ERR : out std_ulogic;
     STAT_RX_RETRANS_CRC24_ERR : out std_ulogic;
     STAT_RX_RETRANS_DISC : out std_ulogic;
     STAT_RX_RETRANS_LATENCY : out std_logic_vector(15 downto 0);
     STAT_RX_RETRANS_REQ : out std_ulogic;
     STAT_RX_RETRANS_RETRY_ERR : out std_ulogic;
     STAT_RX_RETRANS_SEQ : out std_logic_vector(7 downto 0);
     STAT_RX_RETRANS_SEQ_UPDATED : out std_ulogic;
     STAT_RX_RETRANS_STATE : out std_logic_vector(2 downto 0);
     STAT_RX_RETRANS_SUBSEQ : out std_logic_vector(4 downto 0);
     STAT_RX_RETRANS_WDOG_ERR : out std_ulogic;
     STAT_RX_RETRANS_WRAP_ERR : out std_ulogic;
     STAT_RX_SYNCED : out std_logic_vector(11 downto 0);
     STAT_RX_SYNCED_ERR : out std_logic_vector(11 downto 0);
     STAT_RX_WORD_SYNC : out std_logic_vector(11 downto 0);
     STAT_TX_BURST_ERR : out std_ulogic;
     STAT_TX_ERRINJ_BITERR_DONE : out std_ulogic;
     STAT_TX_OVERFLOW_ERR : out std_ulogic;
     STAT_TX_RETRANS_BURST_ERR : out std_ulogic;
     STAT_TX_RETRANS_BUSY : out std_ulogic;
     STAT_TX_RETRANS_RAM_PERROUT : out std_ulogic;
     STAT_TX_RETRANS_RAM_RADDR : out std_logic_vector(8 downto 0);
     STAT_TX_RETRANS_RAM_RD_B0 : out std_ulogic;
     STAT_TX_RETRANS_RAM_RD_B1 : out std_ulogic;
     STAT_TX_RETRANS_RAM_RD_B2 : out std_ulogic;
     STAT_TX_RETRANS_RAM_RD_B3 : out std_ulogic;
     STAT_TX_RETRANS_RAM_RSEL : out std_logic_vector(1 downto 0);
     STAT_TX_RETRANS_RAM_WADDR : out std_logic_vector(8 downto 0);
     STAT_TX_RETRANS_RAM_WDATA : out std_logic_vector(643 downto 0);
     STAT_TX_RETRANS_RAM_WE_B0 : out std_ulogic;
     STAT_TX_RETRANS_RAM_WE_B1 : out std_ulogic;
     STAT_TX_RETRANS_RAM_WE_B2 : out std_ulogic;
     STAT_TX_RETRANS_RAM_WE_B3 : out std_ulogic;
     STAT_TX_UNDERFLOW_ERR : out std_ulogic;
     TX_OVFOUT : out std_ulogic;
     TX_RDYOUT : out std_ulogic;
     TX_SERDES_DATA00 : out std_logic_vector(63 downto 0);
     TX_SERDES_DATA01 : out std_logic_vector(63 downto 0);
     TX_SERDES_DATA02 : out std_logic_vector(63 downto 0);
     TX_SERDES_DATA03 : out std_logic_vector(63 downto 0);
     TX_SERDES_DATA04 : out std_logic_vector(63 downto 0);
     TX_SERDES_DATA05 : out std_logic_vector(63 downto 0);
     TX_SERDES_DATA06 : out std_logic_vector(63 downto 0);
     TX_SERDES_DATA07 : out std_logic_vector(63 downto 0);
     TX_SERDES_DATA08 : out std_logic_vector(63 downto 0);
     TX_SERDES_DATA09 : out std_logic_vector(63 downto 0);
     TX_SERDES_DATA10 : out std_logic_vector(63 downto 0);
     TX_SERDES_DATA11 : out std_logic_vector(63 downto 0);
     CORE_CLK : in std_ulogic;
     CTL_RX_FORCE_RESYNC : in std_ulogic;
     CTL_RX_RETRANS_ACK : in std_ulogic;
     CTL_RX_RETRANS_ENABLE : in std_ulogic;
     CTL_RX_RETRANS_ERRIN : in std_ulogic;
     CTL_RX_RETRANS_FORCE_REQ : in std_ulogic;
     CTL_RX_RETRANS_RESET : in std_ulogic;
     CTL_RX_RETRANS_RESET_MODE : in std_ulogic;
     CTL_TX_DIAGWORD_INTFSTAT : in std_ulogic;
     CTL_TX_DIAGWORD_LANESTAT : in std_logic_vector(11 downto 0);
     CTL_TX_ENABLE : in std_ulogic;
     CTL_TX_ERRINJ_BITERR_GO : in std_ulogic;
     CTL_TX_ERRINJ_BITERR_LANE : in std_logic_vector(3 downto 0);
     CTL_TX_FC_STAT : in std_logic_vector(255 downto 0);
     CTL_TX_MUBITS : in std_logic_vector(7 downto 0);
     CTL_TX_RETRANS_ENABLE : in std_ulogic;
     CTL_TX_RETRANS_RAM_PERRIN : in std_ulogic;
     CTL_TX_RETRANS_RAM_RDATA : in std_logic_vector(643 downto 0);
     CTL_TX_RETRANS_REQ : in std_ulogic;
     CTL_TX_RETRANS_REQ_VALID : in std_ulogic;
     CTL_TX_RLIM_DELTA : in std_logic_vector(11 downto 0);
     CTL_TX_RLIM_ENABLE : in std_ulogic;
     CTL_TX_RLIM_INTV : in std_logic_vector(7 downto 0);
     CTL_TX_RLIM_MAX : in std_logic_vector(11 downto 0);
     DRP_ADDR : in std_logic_vector(9 downto 0);
     DRP_CLK : in std_ulogic;
     DRP_DI : in std_logic_vector(15 downto 0);
     DRP_EN : in std_ulogic;
     DRP_WE : in std_ulogic;
     LBUS_CLK : in std_ulogic;
     RX_BYPASS_FORCE_REALIGNIN : in std_ulogic;
     RX_BYPASS_RDIN : in std_ulogic;
     RX_RESET : in std_ulogic;
     RX_SERDES_CLK : in std_logic_vector(11 downto 0);
     RX_SERDES_DATA00 : in std_logic_vector(63 downto 0);
     RX_SERDES_DATA01 : in std_logic_vector(63 downto 0);
     RX_SERDES_DATA02 : in std_logic_vector(63 downto 0);
     RX_SERDES_DATA03 : in std_logic_vector(63 downto 0);
     RX_SERDES_DATA04 : in std_logic_vector(63 downto 0);
     RX_SERDES_DATA05 : in std_logic_vector(63 downto 0);
     RX_SERDES_DATA06 : in std_logic_vector(63 downto 0);
     RX_SERDES_DATA07 : in std_logic_vector(63 downto 0);
     RX_SERDES_DATA08 : in std_logic_vector(63 downto 0);
     RX_SERDES_DATA09 : in std_logic_vector(63 downto 0);
     RX_SERDES_DATA10 : in std_logic_vector(63 downto 0);
     RX_SERDES_DATA11 : in std_logic_vector(63 downto 0);
     RX_SERDES_RESET : in std_logic_vector(11 downto 0);
     TX_BCTLIN0 : in std_ulogic;
     TX_BCTLIN1 : in std_ulogic;
     TX_BCTLIN2 : in std_ulogic;
     TX_BCTLIN3 : in std_ulogic;
     TX_BYPASS_CTRLIN : in std_logic_vector(11 downto 0);
     TX_BYPASS_DATAIN00 : in std_logic_vector(63 downto 0);
     TX_BYPASS_DATAIN01 : in std_logic_vector(63 downto 0);
     TX_BYPASS_DATAIN02 : in std_logic_vector(63 downto 0);
     TX_BYPASS_DATAIN03 : in std_logic_vector(63 downto 0);
     TX_BYPASS_DATAIN04 : in std_logic_vector(63 downto 0);
     TX_BYPASS_DATAIN05 : in std_logic_vector(63 downto 0);
     TX_BYPASS_DATAIN06 : in std_logic_vector(63 downto 0);
     TX_BYPASS_DATAIN07 : in std_logic_vector(63 downto 0);
     TX_BYPASS_DATAIN08 : in std_logic_vector(63 downto 0);
     TX_BYPASS_DATAIN09 : in std_logic_vector(63 downto 0);
     TX_BYPASS_DATAIN10 : in std_logic_vector(63 downto 0);
     TX_BYPASS_DATAIN11 : in std_logic_vector(63 downto 0);
     TX_BYPASS_ENAIN : in std_ulogic;
     TX_BYPASS_GEARBOX_SEQIN : in std_logic_vector(7 downto 0);
     TX_BYPASS_MFRAMER_STATEIN : in std_logic_vector(3 downto 0);
     TX_CHANIN0 : in std_logic_vector(10 downto 0);
     TX_CHANIN1 : in std_logic_vector(10 downto 0);
     TX_CHANIN2 : in std_logic_vector(10 downto 0);
     TX_CHANIN3 : in std_logic_vector(10 downto 0);
     TX_DATAIN0 : in std_logic_vector(127 downto 0);
     TX_DATAIN1 : in std_logic_vector(127 downto 0);
     TX_DATAIN2 : in std_logic_vector(127 downto 0);
     TX_DATAIN3 : in std_logic_vector(127 downto 0);
     TX_ENAIN0 : in std_ulogic;
     TX_ENAIN1 : in std_ulogic;
     TX_ENAIN2 : in std_ulogic;
     TX_ENAIN3 : in std_ulogic;
     TX_EOPIN0 : in std_ulogic;
     TX_EOPIN1 : in std_ulogic;
     TX_EOPIN2 : in std_ulogic;
     TX_EOPIN3 : in std_ulogic;
     TX_ERRIN0 : in std_ulogic;
     TX_ERRIN1 : in std_ulogic;
     TX_ERRIN2 : in std_ulogic;
     TX_ERRIN3 : in std_ulogic;
     TX_MTYIN0 : in std_logic_vector(3 downto 0);
     TX_MTYIN1 : in std_logic_vector(3 downto 0);
     TX_MTYIN2 : in std_logic_vector(3 downto 0);
     TX_MTYIN3 : in std_logic_vector(3 downto 0);
     TX_RESET : in std_ulogic;
     TX_SERDES_REFCLK : in std_ulogic;
     TX_SERDES_REFCLK_RESET : in std_ulogic;
     TX_SOPIN0 : in std_ulogic;
     TX_SOPIN1 : in std_ulogic;
     TX_SOPIN2 : in std_ulogic;
     TX_SOPIN3 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  ILKN : component is "PRIMITIVE";

----- component INBUF -----
component INBUF
  generic (
     DQS_BIAS : string := "FALSE";
     IBUF_LOW_PWR : string := "TRUE";
     ISTANDARD : string := "UNUSED";
     SIM_INPUT_BUFFER_OFFSET : integer := 0
  );
  port (
     O : out std_ulogic;
     OSC : in std_logic_vector(3 downto 0);
     OSC_EN : in std_ulogic;
     PAD : in std_ulogic;
     VREF : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  INBUF : component is "PRIMITIVE";

----- component INV -----
component INV
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  INV : component is "PRIMITIVE";

----- component IN_FIFO -----
component IN_FIFO
  generic (
     ALMOST_EMPTY_VALUE : integer := 1;
     ALMOST_FULL_VALUE : integer := 1;
     ARRAY_MODE : string := "ARRAY_MODE_4_X_8";
     SYNCHRONOUS_MODE : string := "FALSE"
  );
  port (
     ALMOSTEMPTY : out std_ulogic;
     ALMOSTFULL : out std_ulogic;
     EMPTY : out std_ulogic;
     FULL : out std_ulogic;
     Q0 : out std_logic_vector(7 downto 0);
     Q1 : out std_logic_vector(7 downto 0);
     Q2 : out std_logic_vector(7 downto 0);
     Q3 : out std_logic_vector(7 downto 0);
     Q4 : out std_logic_vector(7 downto 0);
     Q5 : out std_logic_vector(7 downto 0);
     Q6 : out std_logic_vector(7 downto 0);
     Q7 : out std_logic_vector(7 downto 0);
     Q8 : out std_logic_vector(7 downto 0);
     Q9 : out std_logic_vector(7 downto 0);
     D0 : in std_logic_vector(3 downto 0);
     D1 : in std_logic_vector(3 downto 0);
     D2 : in std_logic_vector(3 downto 0);
     D3 : in std_logic_vector(3 downto 0);
     D4 : in std_logic_vector(3 downto 0);
     D5 : in std_logic_vector(7 downto 0);
     D6 : in std_logic_vector(7 downto 0);
     D7 : in std_logic_vector(3 downto 0);
     D8 : in std_logic_vector(3 downto 0);
     D9 : in std_logic_vector(3 downto 0);
     RDCLK : in std_ulogic;
     RDEN : in std_ulogic;
     RESET : in std_ulogic;
     WRCLK : in std_ulogic;
     WREN : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IN_FIFO : component is "PRIMITIVE";

----- component IOBUF -----
component IOBUF
  generic (
     DRIVE : integer := 12;
     IBUF_LOW_PWR : boolean := TRUE;
     IOSTANDARD : string := "DEFAULT";
     SLEW : string := "SLOW"
  );
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF : component is "PRIMITIVE";

----- component IOBUFDS -----
component IOBUFDS
  generic (
     DQS_BIAS : string := "FALSE";
     IBUF_LOW_PWR : boolean := TRUE;
     IOSTANDARD : string := "DEFAULT";
     SLEW : string := "SLOW"
  );
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     IOB : inout std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUFDS : component is "PRIMITIVE";

----- component IOBUFDSE3 -----
component IOBUFDSE3
  generic (
     DQS_BIAS : string := "FALSE";
     IBUF_LOW_PWR : boolean := TRUE;
     IOSTANDARD : string := "DEFAULT";
     SIM_INPUT_BUFFER_OFFSET : integer := 0
  );
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     IOB : inout std_ulogic;
     I : in std_ulogic;
     OSC : in std_logic_vector(3 downto 0);
     OSC_EN : in std_logic_vector(1 downto 0);
     T : in std_ulogic;
     VREF : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUFDSE3 : component is "PRIMITIVE";

----- component IOBUFDS_DCIEN -----
component IOBUFDS_DCIEN
  generic (
     DIFF_TERM : string := "FALSE";
     DQS_BIAS : string := "FALSE";
     IBUF_LOW_PWR : string := "TRUE";
     IOSTANDARD : string := "DEFAULT";
     SLEW : string := "SLOW";
     USE_IBUFDISABLE : string := "TRUE"
  );
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     IOB : inout std_ulogic;
     DCITERMDISABLE : in std_ulogic;
     I : in std_ulogic;
     IBUFDISABLE : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUFDS_DCIEN : component is "PRIMITIVE";

----- component IOBUFDS_DIFF_OUT -----
component IOBUFDS_DIFF_OUT
  generic (
     DIFF_TERM : boolean := FALSE;
     IBUF_LOW_PWR : boolean := TRUE;
     IOSTANDARD : string := "DEFAULT"
  );
  port (
     O : out std_ulogic;
     OB : out std_ulogic;
     IO : inout std_ulogic;
     IOB : inout std_ulogic;
     I : in std_ulogic;
     TM : in std_ulogic;
     TS : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUFDS_DIFF_OUT : component is "PRIMITIVE";

----- component IOBUFDS_DIFF_OUT_DCIEN -----
component IOBUFDS_DIFF_OUT_DCIEN
  generic (
     DIFF_TERM : string := "FALSE";
     IBUF_LOW_PWR : string := "TRUE";
     IOSTANDARD : string := "DEFAULT";
     USE_IBUFDISABLE : string := "TRUE"
  );
  port (
     O : out std_ulogic;
     OB : out std_ulogic;
     IO : inout std_ulogic;
     IOB : inout std_ulogic;
     DCITERMDISABLE : in std_ulogic;
     I : in std_ulogic;
     IBUFDISABLE : in std_ulogic;
     TM : in std_ulogic;
     TS : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUFDS_DIFF_OUT_DCIEN : component is "PRIMITIVE";

----- component IOBUFDS_DIFF_OUT_INTERMDISABLE -----
component IOBUFDS_DIFF_OUT_INTERMDISABLE
  generic (
     DIFF_TERM : string := "FALSE";
     IBUF_LOW_PWR : string := "TRUE";
     IOSTANDARD : string := "DEFAULT";
     USE_IBUFDISABLE : string := "TRUE"
  );
  port (
     O : out std_ulogic;
     OB : out std_ulogic;
     IO : inout std_ulogic;
     IOB : inout std_ulogic;
     I : in std_ulogic;
     IBUFDISABLE : in std_ulogic;
     INTERMDISABLE : in std_ulogic;
     TM : in std_ulogic;
     TS : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUFDS_DIFF_OUT_INTERMDISABLE : component is "PRIMITIVE";

----- component IOBUFDS_INTERMDISABLE -----
component IOBUFDS_INTERMDISABLE
  generic (
     DIFF_TERM : string := "FALSE";
     DQS_BIAS : string := "FALSE";
     IBUF_LOW_PWR : string := "TRUE";
     IOSTANDARD : string := "DEFAULT";
     SLEW : string := "SLOW";
     USE_IBUFDISABLE : string := "TRUE"
  );
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     IOB : inout std_ulogic;
     I : in std_ulogic;
     IBUFDISABLE : in std_ulogic;
     INTERMDISABLE : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUFDS_INTERMDISABLE : component is "PRIMITIVE";

----- component IOBUFE3 -----
component IOBUFE3
  generic (
     DRIVE : integer := 12;
     IBUF_LOW_PWR : boolean := TRUE;
     IOSTANDARD : string := "DEFAULT";
     SIM_INPUT_BUFFER_OFFSET : integer := 0
  );
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     OSC : in std_logic_vector(3 downto 0);
     OSC_EN : in std_ulogic;
     T : in std_ulogic;
     VREF : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUFE3 : component is "PRIMITIVE";

----- component IOBUF_DCIEN -----
component IOBUF_DCIEN
  generic (
     DRIVE : integer := 12;
     IBUF_LOW_PWR : string := "TRUE";
     IOSTANDARD : string := "DEFAULT";
     SLEW : string := "SLOW";
     USE_IBUFDISABLE : string := "TRUE"
  );
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     DCITERMDISABLE : in std_ulogic;
     I : in std_ulogic;
     IBUFDISABLE : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_DCIEN : component is "PRIMITIVE";

----- component IOBUF_INTERMDISABLE -----
component IOBUF_INTERMDISABLE
  generic (
     DRIVE : integer := 12;
     IBUF_LOW_PWR : string := "TRUE";
     IOSTANDARD : string := "DEFAULT";
     SLEW : string := "SLOW";
     USE_IBUFDISABLE : string := "TRUE"
  );
  port (
     O : out std_ulogic;
     IO : inout std_ulogic;
     I : in std_ulogic;
     IBUFDISABLE : in std_ulogic;
     INTERMDISABLE : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  IOBUF_INTERMDISABLE : component is "PRIMITIVE";

----- component ISERDES -----
component ISERDES
  generic (
     BITSLIP_ENABLE : boolean := false;
     DATA_RATE : string := "DDR";
     DATA_WIDTH : integer := 4;
     INIT_Q1 : bit := '0';
     INIT_Q2 : bit := '0';
     INIT_Q3 : bit := '0';
     INIT_Q4 : bit := '0';
     INTERFACE_TYPE : string := "MEMORY";
     IOBDELAY : string := "NONE";
     IOBDELAY_TYPE : string := "DEFAULT";
     IOBDELAY_VALUE : integer := 0;
     NUM_CE : integer := 2;
     SERDES_MODE : string := "MASTER";
     SRVAL_Q1 : bit := '0';
     SRVAL_Q2 : bit := '0';
     SRVAL_Q3 : bit := '0';
     SRVAL_Q4 : bit := '0'
  );
  port (
     O : out std_ulogic;
     Q1 : out std_ulogic;
     Q2 : out std_ulogic;
     Q3 : out std_ulogic;
     Q4 : out std_ulogic;
     Q5 : out std_ulogic;
     Q6 : out std_ulogic;
     SHIFTOUT1 : out std_ulogic;
     SHIFTOUT2 : out std_ulogic;
     BITSLIP : in std_ulogic;
     CE1 : in std_ulogic;
     CE2 : in std_ulogic;
     CLK : in std_ulogic;
     CLKDIV : in std_ulogic;
     D : in std_ulogic;
     DLYCE : in std_ulogic;
     DLYINC : in std_ulogic;
     DLYRST : in std_ulogic;
     OCLK : in std_ulogic;
     REV : in std_ulogic;
     SHIFTIN1 : in std_ulogic;
     SHIFTIN2 : in std_ulogic;
     SR : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  ISERDES : component is "PRIMITIVE";

----- component ISERDESE1 -----
component ISERDESE1
  generic (
     DATA_RATE : string := "DDR";
     DATA_WIDTH : integer := 4;
     DYN_CLKDIV_INV_EN : boolean := FALSE;
     DYN_CLK_INV_EN : boolean := FALSE;
     INIT_Q1 : bit := '0';
     INIT_Q2 : bit := '0';
     INIT_Q3 : bit := '0';
     INIT_Q4 : bit := '0';
     INTERFACE_TYPE : string := "MEMORY";
     IOBDELAY : string := "NONE";
     NUM_CE : integer := 2;
     OFB_USED : boolean := FALSE;
     SERDES_MODE : string := "MASTER";
     SRVAL_Q1 : bit := '0';
     SRVAL_Q2 : bit := '0';
     SRVAL_Q3 : bit := '0';
     SRVAL_Q4 : bit := '0'
  );
  port (
     O : out std_ulogic;
     Q1 : out std_ulogic;
     Q2 : out std_ulogic;
     Q3 : out std_ulogic;
     Q4 : out std_ulogic;
     Q5 : out std_ulogic;
     Q6 : out std_ulogic;
     SHIFTOUT1 : out std_ulogic;
     SHIFTOUT2 : out std_ulogic;
     BITSLIP : in std_ulogic;
     CE1 : in std_ulogic;
     CE2 : in std_ulogic;
     CLK : in std_ulogic;
     CLKB : in std_ulogic;
     CLKDIV : in std_ulogic;
     D : in std_ulogic;
     DDLY : in std_ulogic;
     DYNCLKDIVSEL : in std_ulogic;
     DYNCLKSEL : in std_ulogic;
     OCLK : in std_ulogic;
     OFB : in std_ulogic;
     RST : in std_ulogic;
     SHIFTIN1 : in std_ulogic;
     SHIFTIN2 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  ISERDESE1 : component is "PRIMITIVE";

----- component ISERDESE2 -----
component ISERDESE2
  generic (
     DATA_RATE : string := "DDR";
     DATA_WIDTH : integer := 4;
     DYN_CLKDIV_INV_EN : string := "FALSE";
     DYN_CLK_INV_EN : string := "FALSE";
     INIT_Q1 : bit := '0';
     INIT_Q2 : bit := '0';
     INIT_Q3 : bit := '0';
     INIT_Q4 : bit := '0';
     INTERFACE_TYPE : string := "MEMORY";
     IOBDELAY : string := "NONE";
     IS_CLKB_INVERTED : std_ulogic := '0';
     IS_CLKDIVP_INVERTED : std_ulogic := '0';
     IS_CLKDIV_INVERTED : std_ulogic := '0';
     IS_CLK_INVERTED : std_ulogic := '0';
     IS_D_INVERTED : std_ulogic := '0';
     IS_OCLKB_INVERTED : std_ulogic := '0';
     IS_OCLK_INVERTED : std_ulogic := '0';
     NUM_CE : integer := 2;
     OFB_USED : string := "FALSE";
     SERDES_MODE : string := "MASTER";
     SRVAL_Q1 : bit := '0';
     SRVAL_Q2 : bit := '0';
     SRVAL_Q3 : bit := '0';
     SRVAL_Q4 : bit := '0'
  );
  port (
     O : out std_ulogic;
     Q1 : out std_ulogic;
     Q2 : out std_ulogic;
     Q3 : out std_ulogic;
     Q4 : out std_ulogic;
     Q5 : out std_ulogic;
     Q6 : out std_ulogic;
     Q7 : out std_ulogic;
     Q8 : out std_ulogic;
     SHIFTOUT1 : out std_ulogic;
     SHIFTOUT2 : out std_ulogic;
     BITSLIP : in std_ulogic;
     CE1 : in std_ulogic;
     CE2 : in std_ulogic;
     CLK : in std_ulogic;
     CLKB : in std_ulogic;
     CLKDIV : in std_ulogic;
     CLKDIVP : in std_ulogic;
     D : in std_ulogic;
     DDLY : in std_ulogic;
     DYNCLKDIVSEL : in std_ulogic;
     DYNCLKSEL : in std_ulogic;
     OCLK : in std_ulogic;
     OCLKB : in std_ulogic;
     OFB : in std_ulogic;
     RST : in std_ulogic;
     SHIFTIN1 : in std_ulogic;
     SHIFTIN2 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  ISERDESE2 : component is "PRIMITIVE";

----- component ISERDESE3 -----
component ISERDESE3
  generic (
     DATA_WIDTH : integer := 8;
     DDR_CLK_EDGE : string := "OPPOSITE_EDGE";
     FIFO_ENABLE : string := "FALSE";
     FIFO_SYNC_MODE : string := "FALSE";
     IDDR_MODE : string := "FALSE";
     IS_CLK_B_INVERTED : std_ulogic := '0';
     IS_CLK_INVERTED : std_ulogic := '0';
     IS_RST_INVERTED : std_ulogic := '0'
  );
  port (
     FIFO_EMPTY : out std_ulogic;
     Q : out std_logic_vector(7 downto 0);
     CLK : in std_ulogic;
     CLKDIV : in std_ulogic;
     CLK_B : in std_ulogic;
     D : in std_ulogic;
     FIFO_RD_CLK : in std_ulogic;
     FIFO_RD_EN : in std_ulogic;
     RST : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  ISERDESE3 : component is "PRIMITIVE";

----- component ISERDES_NODELAY -----
component ISERDES_NODELAY
  generic (
     BITSLIP_ENABLE : boolean := false;
     DATA_RATE : string := "DDR";
     DATA_WIDTH : integer := 4;
     INIT_Q1 : bit := '0';
     INIT_Q2 : bit := '0';
     INIT_Q3 : bit := '0';
     INIT_Q4 : bit := '0';
     INTERFACE_TYPE : string := "MEMORY";
     NUM_CE : integer := 2;
     SERDES_MODE : string := "MASTER"
  );
  port (
     Q1 : out std_ulogic;
     Q2 : out std_ulogic;
     Q3 : out std_ulogic;
     Q4 : out std_ulogic;
     Q5 : out std_ulogic;
     Q6 : out std_ulogic;
     SHIFTOUT1 : out std_ulogic;
     SHIFTOUT2 : out std_ulogic;
     BITSLIP : in std_ulogic;
     CE1 : in std_ulogic;
     CE2 : in std_ulogic;
     CLK : in std_ulogic;
     CLKB : in std_ulogic;
     CLKDIV : in std_ulogic;
     D : in std_ulogic;
     OCLK : in std_ulogic;
     RST : in std_ulogic;
     SHIFTIN1 : in std_ulogic;
     SHIFTIN2 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  ISERDES_NODELAY : component is "PRIMITIVE";

----- component JTAG_SIME2 -----
component JTAG_SIME2
  generic (
     PART_NAME : string := "7A8"
  );
  port (
     TDO : out std_ulogic;
     TCK : in std_ulogic;
     TDI : in std_ulogic;
     TMS : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  JTAG_SIME2 : component is "PRIMITIVE";

----- component KEEPER -----
component KEEPER
  port (
     O : inout std_ulogic := 'W'
  );
end component;
attribute BOX_TYPE of
  KEEPER : component is "PRIMITIVE";

----- component LDCE -----
component LDCE
  generic (
     INIT : bit := '0';
     IS_CLR_INVERTED : std_ulogic := '0';
     IS_G_INVERTED : std_ulogic := '0'
  );
  port (
     Q : out std_ulogic;
     CLR : in std_ulogic;
     D : in std_ulogic;
     G : in std_ulogic;
     GE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  LDCE : component is "PRIMITIVE";

----- component LDPE -----
component LDPE
  generic (
     INIT : bit := '1';
     IS_G_INVERTED : std_ulogic := '0';
     IS_PRE_INVERTED : std_ulogic := '0'
  );
  port (
     Q : out std_ulogic;
     D : in std_ulogic;
     G : in std_ulogic;
     GE : in std_ulogic;
     PRE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  LDPE : component is "PRIMITIVE";

----- component LUT1 -----
component LUT1
  generic (
     INIT : bit_vector := X"0"
  );
  port (
     O : out std_ulogic;
     I0 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  LUT1 : component is "PRIMITIVE";

----- component LUT2 -----
component LUT2
  generic (
     INIT : bit_vector := X"0"
  );
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  LUT2 : component is "PRIMITIVE";

----- component LUT3 -----
component LUT3
  generic (
     INIT : bit_vector := X"00"
  );
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  LUT3 : component is "PRIMITIVE";

----- component LUT4 -----
component LUT4
  generic (
     INIT : bit_vector := X"0000"
  );
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  LUT4 : component is "PRIMITIVE";

----- component LUT5 -----
component LUT5
  generic (
     INIT : bit_vector := X"00000000"
  );
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic;
     I4 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  LUT5 : component is "PRIMITIVE";

----- component LUT6 -----
component LUT6
  generic (
     INIT : bit_vector := X"0000000000000000"
  );
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic;
     I4 : in std_ulogic;
     I5 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  LUT6 : component is "PRIMITIVE";

----- component LUT6_2 -----
component LUT6_2
  generic (
     INIT : bit_vector := X"0000000000000000"
  );
  port (
     O5 : out std_ulogic;
     O6 : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     I2 : in std_ulogic;
     I3 : in std_ulogic;
     I4 : in std_ulogic;
     I5 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  LUT6_2 : component is "PRIMITIVE";

----- component MASTER_JTAG -----
component MASTER_JTAG
  port (
     TDO : out std_ulogic;
     TCK : in std_ulogic;
     TDI : in std_ulogic;
     TMS : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  MASTER_JTAG : component is "PRIMITIVE";

----- component MMCME2_ADV -----
component MMCME2_ADV
  generic (
     BANDWIDTH : string := "OPTIMIZED";
     CLKFBOUT_MULT_F : real := 5.000;
     CLKFBOUT_PHASE : real := 0.000;
     CLKFBOUT_USE_FINE_PS : boolean := FALSE;
     CLKIN1_PERIOD : real := 0.000;
     CLKIN2_PERIOD : real := 0.000;
     CLKOUT0_DIVIDE_F : real := 1.000;
     CLKOUT0_DUTY_CYCLE : real := 0.500;
     CLKOUT0_PHASE : real := 0.000;
     CLKOUT0_USE_FINE_PS : boolean := FALSE;
     CLKOUT1_DIVIDE : integer := 1;
     CLKOUT1_DUTY_CYCLE : real := 0.500;
     CLKOUT1_PHASE : real := 0.000;
     CLKOUT1_USE_FINE_PS : boolean := FALSE;
     CLKOUT2_DIVIDE : integer := 1;
     CLKOUT2_DUTY_CYCLE : real := 0.500;
     CLKOUT2_PHASE : real := 0.000;
     CLKOUT2_USE_FINE_PS : boolean := FALSE;
     CLKOUT3_DIVIDE : integer := 1;
     CLKOUT3_DUTY_CYCLE : real := 0.500;
     CLKOUT3_PHASE : real := 0.000;
     CLKOUT3_USE_FINE_PS : boolean := FALSE;
     CLKOUT4_CASCADE : boolean := FALSE;
     CLKOUT4_DIVIDE : integer := 1;
     CLKOUT4_DUTY_CYCLE : real := 0.500;
     CLKOUT4_PHASE : real := 0.000;
     CLKOUT4_USE_FINE_PS : boolean := FALSE;
     CLKOUT5_DIVIDE : integer := 1;
     CLKOUT5_DUTY_CYCLE : real := 0.500;
     CLKOUT5_PHASE : real := 0.000;
     CLKOUT5_USE_FINE_PS : boolean := FALSE;
     CLKOUT6_DIVIDE : integer := 1;
     CLKOUT6_DUTY_CYCLE : real := 0.500;
     CLKOUT6_PHASE : real := 0.000;
     CLKOUT6_USE_FINE_PS : boolean := FALSE;
     COMPENSATION : string := "ZHOLD";
     DIVCLK_DIVIDE : integer := 1;
     IS_CLKINSEL_INVERTED : std_ulogic := '0';
     IS_PSEN_INVERTED : std_ulogic := '0';
     IS_PSINCDEC_INVERTED : std_ulogic := '0';
     IS_PWRDWN_INVERTED : std_ulogic := '0';
     IS_RST_INVERTED : std_ulogic := '0';
     REF_JITTER1 : real := 0.0;
     REF_JITTER2 : real := 0.0;
     SS_EN : string := "FALSE";
     SS_MODE : string := "CENTER_HIGH";
     SS_MOD_PERIOD : integer := 10000;
     STARTUP_WAIT : boolean := FALSE
  );
  port (
     CLKFBOUT : out std_ulogic := '0';
     CLKFBOUTB : out std_ulogic := '0';
     CLKFBSTOPPED : out std_ulogic := '0';
     CLKINSTOPPED : out std_ulogic := '0';
     CLKOUT0 : out std_ulogic := '0';
     CLKOUT0B : out std_ulogic := '0';
     CLKOUT1 : out std_ulogic := '0';
     CLKOUT1B : out std_ulogic := '0';
     CLKOUT2 : out std_ulogic := '0';
     CLKOUT2B : out std_ulogic := '0';
     CLKOUT3 : out std_ulogic := '0';
     CLKOUT3B : out std_ulogic := '0';
     CLKOUT4 : out std_ulogic := '0';
     CLKOUT5 : out std_ulogic := '0';
     CLKOUT6 : out std_ulogic := '0';
     DO : out std_logic_vector (15 downto 0);
     DRDY : out std_ulogic := '0';
     LOCKED : out std_ulogic := '0';
     PSDONE : out std_ulogic := '0';
     CLKFBIN : in std_ulogic;
     CLKIN1 : in std_ulogic;
     CLKIN2 : in std_ulogic;
     CLKINSEL : in std_ulogic;
     DADDR : in std_logic_vector(6 downto 0);
     DCLK : in std_ulogic;
     DEN : in std_ulogic;
     DI : in std_logic_vector(15 downto 0);
     DWE : in std_ulogic;
     PSCLK : in std_ulogic;
     PSEN : in std_ulogic;
     PSINCDEC : in std_ulogic;
     PWRDWN : in std_ulogic;
     RST : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  MMCME2_ADV : component is "PRIMITIVE";

----- component MMCME2_BASE -----
component MMCME2_BASE
  generic (
     BANDWIDTH : string := "OPTIMIZED";
     CLKFBOUT_MULT_F : real := 5.000;
     CLKFBOUT_PHASE : real := 0.000;
     CLKIN1_PERIOD : real := 0.000;
     CLKOUT0_DIVIDE_F : real := 1.000;
     CLKOUT0_DUTY_CYCLE : real := 0.500;
     CLKOUT0_PHASE : real := 0.000;
     CLKOUT1_DIVIDE : integer := 1;
     CLKOUT1_DUTY_CYCLE : real := 0.500;
     CLKOUT1_PHASE : real := 0.000;
     CLKOUT2_DIVIDE : integer := 1;
     CLKOUT2_DUTY_CYCLE : real := 0.500;
     CLKOUT2_PHASE : real := 0.000;
     CLKOUT3_DIVIDE : integer := 1;
     CLKOUT3_DUTY_CYCLE : real := 0.500;
     CLKOUT3_PHASE : real := 0.000;
     CLKOUT4_CASCADE : boolean := FALSE;
     CLKOUT4_DIVIDE : integer := 1;
     CLKOUT4_DUTY_CYCLE : real := 0.500;
     CLKOUT4_PHASE : real := 0.000;
     CLKOUT5_DIVIDE : integer := 1;
     CLKOUT5_DUTY_CYCLE : real := 0.500;
     CLKOUT5_PHASE : real := 0.000;
     CLKOUT6_DIVIDE : integer := 1;
     CLKOUT6_DUTY_CYCLE : real := 0.500;
     CLKOUT6_PHASE : real := 0.000;
     DIVCLK_DIVIDE : integer := 1;
     REF_JITTER1 : real := 0.010;
     STARTUP_WAIT : boolean := FALSE
  );
  port (
     CLKFBOUT : out std_ulogic;
     CLKFBOUTB : out std_ulogic;
     CLKOUT0 : out std_ulogic;
     CLKOUT0B : out std_ulogic;
     CLKOUT1 : out std_ulogic;
     CLKOUT1B : out std_ulogic;
     CLKOUT2 : out std_ulogic;
     CLKOUT2B : out std_ulogic;
     CLKOUT3 : out std_ulogic;
     CLKOUT3B : out std_ulogic;
     CLKOUT4 : out std_ulogic;
     CLKOUT5 : out std_ulogic;
     CLKOUT6 : out std_ulogic;
     LOCKED : out std_ulogic;
     CLKFBIN : in std_ulogic;
     CLKIN1 : in std_ulogic;
     PWRDWN : in std_ulogic;
     RST : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  MMCME2_BASE : component is "PRIMITIVE";

----- component MMCME3_ADV -----
component MMCME3_ADV
  generic (
     BANDWIDTH : string := "OPTIMIZED";
     CLKFBOUT_MULT_F : real := 5.000;
     CLKFBOUT_PHASE : real := 0.000;
     CLKFBOUT_USE_FINE_PS : string := "FALSE";
     CLKIN1_PERIOD : real := 0.000;
     CLKIN2_PERIOD : real := 0.000;
     CLKOUT0_DIVIDE_F : real := 1.000;
     CLKOUT0_DUTY_CYCLE : real := 0.500;
     CLKOUT0_PHASE : real := 0.000;
     CLKOUT0_USE_FINE_PS : string := "FALSE";
     CLKOUT1_DIVIDE : integer := 1;
     CLKOUT1_DUTY_CYCLE : real := 0.500;
     CLKOUT1_PHASE : real := 0.000;
     CLKOUT1_USE_FINE_PS : string := "FALSE";
     CLKOUT2_DIVIDE : integer := 1;
     CLKOUT2_DUTY_CYCLE : real := 0.500;
     CLKOUT2_PHASE : real := 0.000;
     CLKOUT2_USE_FINE_PS : string := "FALSE";
     CLKOUT3_DIVIDE : integer := 1;
     CLKOUT3_DUTY_CYCLE : real := 0.500;
     CLKOUT3_PHASE : real := 0.000;
     CLKOUT3_USE_FINE_PS : string := "FALSE";
     CLKOUT4_CASCADE : string := "FALSE";
     CLKOUT4_DIVIDE : integer := 1;
     CLKOUT4_DUTY_CYCLE : real := 0.500;
     CLKOUT4_PHASE : real := 0.000;
     CLKOUT4_USE_FINE_PS : string := "FALSE";
     CLKOUT5_DIVIDE : integer := 1;
     CLKOUT5_DUTY_CYCLE : real := 0.500;
     CLKOUT5_PHASE : real := 0.000;
     CLKOUT5_USE_FINE_PS : string := "FALSE";
     CLKOUT6_DIVIDE : integer := 1;
     CLKOUT6_DUTY_CYCLE : real := 0.500;
     CLKOUT6_PHASE : real := 0.000;
     CLKOUT6_USE_FINE_PS : string := "FALSE";
     COMPENSATION : string := "AUTO";
     DIVCLK_DIVIDE : integer := 1;
     IS_CLKFBIN_INVERTED : std_ulogic := '0';
     IS_CLKIN1_INVERTED : std_ulogic := '0';
     IS_CLKIN2_INVERTED : std_ulogic := '0';
     IS_CLKINSEL_INVERTED : std_ulogic := '0';
     IS_PSEN_INVERTED : std_ulogic := '0';
     IS_PSINCDEC_INVERTED : std_ulogic := '0';
     IS_PWRDWN_INVERTED : std_ulogic := '0';
     IS_RST_INVERTED : std_ulogic := '0';
     REF_JITTER1 : real := 0.010;
     REF_JITTER2 : real := 0.010;
     SS_EN : string := "FALSE";
     SS_MODE : string := "CENTER_HIGH";
     SS_MOD_PERIOD : integer := 10000;
     STARTUP_WAIT : string := "FALSE"
  );
  port (
     CDDCDONE : out std_ulogic;
     CLKFBOUT : out std_ulogic;
     CLKFBOUTB : out std_ulogic;
     CLKFBSTOPPED : out std_ulogic;
     CLKINSTOPPED : out std_ulogic;
     CLKOUT0 : out std_ulogic;
     CLKOUT0B : out std_ulogic;
     CLKOUT1 : out std_ulogic;
     CLKOUT1B : out std_ulogic;
     CLKOUT2 : out std_ulogic;
     CLKOUT2B : out std_ulogic;
     CLKOUT3 : out std_ulogic;
     CLKOUT3B : out std_ulogic;
     CLKOUT4 : out std_ulogic;
     CLKOUT5 : out std_ulogic;
     CLKOUT6 : out std_ulogic;
     DO : out std_logic_vector(15 downto 0);
     DRDY : out std_ulogic;
     LOCKED : out std_ulogic;
     PSDONE : out std_ulogic;
     CDDCREQ : in std_ulogic;
     CLKFBIN : in std_ulogic;
     CLKIN1 : in std_ulogic;
     CLKIN2 : in std_ulogic;
     CLKINSEL : in std_ulogic;
     DADDR : in std_logic_vector(6 downto 0);
     DCLK : in std_ulogic;
     DEN : in std_ulogic;
     DI : in std_logic_vector(15 downto 0);
     DWE : in std_ulogic;
     PSCLK : in std_ulogic;
     PSEN : in std_ulogic;
     PSINCDEC : in std_ulogic;
     PWRDWN : in std_ulogic;
     RST : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  MMCME3_ADV : component is "PRIMITIVE";

----- component MMCME3_BASE -----
component MMCME3_BASE
  generic (
     BANDWIDTH : string := "OPTIMIZED";
     CLKFBOUT_MULT_F : real := 5.000;
     CLKFBOUT_PHASE : real := 0.000;
     CLKIN1_PERIOD : real := 0.000;
     CLKOUT0_DIVIDE_F : real := 1.000;
     CLKOUT0_DUTY_CYCLE : real := 0.500;
     CLKOUT0_PHASE : real := 0.000;
     CLKOUT1_DIVIDE : integer := 1;
     CLKOUT1_DUTY_CYCLE : real := 0.500;
     CLKOUT1_PHASE : real := 0.000;
     CLKOUT2_DIVIDE : integer := 1;
     CLKOUT2_DUTY_CYCLE : real := 0.500;
     CLKOUT2_PHASE : real := 0.000;
     CLKOUT3_DIVIDE : integer := 1;
     CLKOUT3_DUTY_CYCLE : real := 0.500;
     CLKOUT3_PHASE : real := 0.000;
     CLKOUT4_CASCADE : string := "FALSE";
     CLKOUT4_DIVIDE : integer := 1;
     CLKOUT4_DUTY_CYCLE : real := 0.500;
     CLKOUT4_PHASE : real := 0.000;
     CLKOUT5_DIVIDE : integer := 1;
     CLKOUT5_DUTY_CYCLE : real := 0.500;
     CLKOUT5_PHASE : real := 0.000;
     CLKOUT6_DIVIDE : integer := 1;
     CLKOUT6_DUTY_CYCLE : real := 0.500;
     CLKOUT6_PHASE : real := 0.000;
     DIVCLK_DIVIDE : integer := 1;
     IS_CLKFBIN_INVERTED : std_ulogic := '0';
     IS_CLKIN1_INVERTED : std_ulogic := '0';
     IS_PWRDWN_INVERTED : std_ulogic := '0';
     IS_RST_INVERTED : std_ulogic := '0';
     REF_JITTER1 : real := 0.010;
     STARTUP_WAIT : string := "FALSE"
  );
  port (
     CLKFBOUT : out std_ulogic;
     CLKFBOUTB : out std_ulogic;
     CLKOUT0 : out std_ulogic;
     CLKOUT0B : out std_ulogic;
     CLKOUT1 : out std_ulogic;
     CLKOUT1B : out std_ulogic;
     CLKOUT2 : out std_ulogic;
     CLKOUT2B : out std_ulogic;
     CLKOUT3 : out std_ulogic;
     CLKOUT3B : out std_ulogic;
     CLKOUT4 : out std_ulogic;
     CLKOUT5 : out std_ulogic;
     CLKOUT6 : out std_ulogic;
     LOCKED : out std_ulogic;
     CLKFBIN : in std_ulogic;
     CLKIN1 : in std_ulogic;
     PWRDWN : in std_ulogic;
     RST : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  MMCME3_BASE : component is "PRIMITIVE";

----- component MUXCY -----
component MUXCY
  port (
     O : out std_ulogic;
     CI : in std_ulogic;
     DI : in std_ulogic;
     S : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  MUXCY : component is "PRIMITIVE";

----- component MUXF7 -----
component MUXF7
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     S : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  MUXF7 : component is "PRIMITIVE";

----- component MUXF8 -----
component MUXF8
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     S : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  MUXF8 : component is "PRIMITIVE";

----- component MUXF9 -----
component MUXF9
  port (
     O : out std_ulogic;
     I0 : in std_ulogic;
     I1 : in std_ulogic;
     S : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  MUXF9 : component is "PRIMITIVE";

----- component OBUF -----
component OBUF
  generic (
     CAPACITANCE : string := "DONT_CARE";
     DRIVE : integer := 12;
     IOSTANDARD : string := "DEFAULT";
     SLEW : string := "SLOW"
  );
  port (
     O : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUF : component is "PRIMITIVE";

----- component OBUFDS -----
component OBUFDS
  generic (
     CAPACITANCE : string := "DONT_CARE";
     IOSTANDARD : string := "DEFAULT";
     SLEW : string := "SLOW"
  );
  port (
     O : out std_ulogic;
     OB : out std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFDS : component is "PRIMITIVE";

----- component OBUFDS_GTE3 -----
component OBUFDS_GTE3
  generic (
     REFCLK_EN_TX_PATH : std_ulogic := '0';
     REFCLK_ICNTL_TX : std_logic_vector (4 downto 0) := "00000"
  );
  port (
     O : out std_ulogic;
     OB : out std_ulogic;
     CEB : in std_ulogic;
     I : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFDS_GTE3 : component is "PRIMITIVE";

----- component OBUFDS_GTE3_ADV -----
component OBUFDS_GTE3_ADV
  generic (
     REFCLK_EN_TX_PATH : std_ulogic := '0';
     REFCLK_ICNTL_TX : std_logic_vector(4 downto 0) := "00000"
  );
  port (
     O : out std_ulogic;
     OB : out std_ulogic;
     CEB : in std_ulogic;
     I : in std_logic_vector(3 downto 0);
     RXRECCLK_SEL : in std_logic_vector(1 downto 0)
  );
end component;
attribute BOX_TYPE of
  OBUFDS_GTE3_ADV : component is "PRIMITIVE";

----- component OBUFT -----
component OBUFT
  generic (
     CAPACITANCE : string := "DONT_CARE";
     DRIVE : integer := 12;
     IOSTANDARD : string := "DEFAULT";
     SLEW : string := "SLOW"
  );
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT : component is "PRIMITIVE";

----- component OBUFTDS -----
component OBUFTDS
  generic (
     CAPACITANCE : string := "DONT_CARE";
     IOSTANDARD : string := "DEFAULT";
     SLEW : string := "SLOW"
  );
  port (
     O : out std_ulogic;
     OB : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFTDS : component is "PRIMITIVE";

----- component OBUFTDSE3 -----
component OBUFTDSE3
  generic (
     IOSTANDARD : string := "DEFAULT"
  );
  port (
     O : out std_ulogic;
     OB : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFTDSE3 : component is "PRIMITIVE";

----- component OBUFTDS_DCIEN -----
component OBUFTDS_DCIEN
  generic (
     IOSTANDARD : string := "DEFAULT";
     SLEW : string := "SLOW"
  );
  port (
     O : out std_ulogic;
     OB : out std_ulogic;
     DCITERMDISABLE : in std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFTDS_DCIEN : component is "PRIMITIVE";

----- component OBUFTE3 -----
component OBUFTE3
  generic (
     DRIVE : integer := 12;
     IOSTANDARD : string := "DEFAULT"
  );
  port (
     O : out std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFTE3 : component is "PRIMITIVE";

----- component OBUFT_DCIEN -----
component OBUFT_DCIEN
  generic (
     DRIVE : integer := 12;
     IOSTANDARD : string := "DEFAULT";
     SLEW : string := "SLOW"
  );
  port (
     O : out std_ulogic;
     DCITERMDISABLE : in std_ulogic;
     I : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OBUFT_DCIEN : component is "PRIMITIVE";

----- component ODDR -----
component ODDR
  generic (
     DDR_CLK_EDGE : string := "OPPOSITE_EDGE";
     INIT : bit := '0';
     IS_C_INVERTED : std_ulogic := '0';
     IS_D1_INVERTED : std_ulogic := '0';
     IS_D2_INVERTED : std_ulogic := '0';
     SRTYPE : string := "SYNC"
  );
  port (
     Q : out std_ulogic;
     C : in std_ulogic;
     CE : in std_ulogic;
     D1 : in std_ulogic;
     D2 : in std_ulogic;
     R : in std_ulogic := 'L';
     S : in std_ulogic := 'L'
  );
end component;
attribute BOX_TYPE of
  ODDR : component is "PRIMITIVE";

----- component ODDRE1 -----
component ODDRE1
  generic (
     IS_C_INVERTED : std_ulogic := '0';
     IS_D1_INVERTED : std_ulogic := '0';
     IS_D2_INVERTED : std_ulogic := '0';
     SRVAL : std_ulogic := '0'
  );
  port (
     Q : out std_ulogic;
     C : in std_ulogic;
     D1 : in std_ulogic;
     D2 : in std_ulogic;
     SR : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  ODDRE1 : component is "PRIMITIVE";

----- component ODELAYE2 -----
component ODELAYE2
  generic (
     CINVCTRL_SEL : string := "FALSE";
     DELAY_SRC : string := "ODATAIN";
     HIGH_PERFORMANCE_MODE : string := "FALSE";
     IS_C_INVERTED : std_ulogic := '0';
     IS_ODATAIN_INVERTED : std_ulogic := '0';
     ODELAY_TYPE : string := "FIXED";
     ODELAY_VALUE : integer := 0;
     PIPE_SEL : string := "FALSE";
     REFCLK_FREQUENCY : real := 200.0;
     SIGNAL_PATTERN : string := "DATA"
  );
  port (
     CNTVALUEOUT : out std_logic_vector(4 downto 0);
     DATAOUT : out std_ulogic;
     C : in std_ulogic;
     CE : in std_ulogic;
     CINVCTRL : in std_ulogic;
     CLKIN : in std_ulogic;
     CNTVALUEIN : in std_logic_vector(4 downto 0);
     INC : in std_ulogic;
     LD : in std_ulogic;
     LDPIPEEN : in std_ulogic;
     ODATAIN : in std_ulogic;
     REGRST : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  ODELAYE2 : component is "PRIMITIVE";

----- component ODELAYE2_FINEDELAY -----
component ODELAYE2_FINEDELAY
  generic (
     CINVCTRL_SEL : string := "FALSE";
     DELAY_SRC : string := "ODATAIN";
     FINEDELAY : string := "BYPASS";
     HIGH_PERFORMANCE_MODE : string := "FALSE";
     IS_C_INVERTED : std_ulogic := '0';
     IS_ODATAIN_INVERTED : std_ulogic := '0';
     ODELAY_TYPE : string := "FIXED";
     ODELAY_VALUE : integer := 0;
     PIPE_SEL : string := "FALSE";
     REFCLK_FREQUENCY : real := 200.0;
     SIGNAL_PATTERN : string := "DATA"
  );
  port (
     CNTVALUEOUT : out std_logic_vector(4 downto 0);
     DATAOUT : out std_ulogic;
     C : in std_ulogic;
     CE : in std_ulogic;
     CINVCTRL : in std_ulogic;
     CLKIN : in std_ulogic;
     CNTVALUEIN : in std_logic_vector(4 downto 0);
     INC : in std_ulogic;
     LD : in std_ulogic;
     LDPIPEEN : in std_ulogic;
     ODATAIN : in std_ulogic;
     OFDLY : in std_logic_vector(2 downto 0);
     REGRST : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  ODELAYE2_FINEDELAY : component is "PRIMITIVE";

----- component ODELAYE3 -----
component ODELAYE3
  generic (
     CASCADE : string := "NONE";
     DELAY_FORMAT : string := "TIME";
     DELAY_TYPE : string := "FIXED";
     DELAY_VALUE : integer := 0;
     IS_CLK_INVERTED : std_ulogic := '0';
     IS_RST_INVERTED : std_ulogic := '0';
     REFCLK_FREQUENCY : real := 300.0;
     UPDATE_MODE : string := "ASYNC"
  );
  port (
     CASC_OUT : out std_ulogic;
     CNTVALUEOUT : out std_logic_vector(8 downto 0);
     DATAOUT : out std_ulogic;
     CASC_IN : in std_ulogic;
     CASC_RETURN : in std_ulogic;
     CE : in std_ulogic;
     CLK : in std_ulogic;
     CNTVALUEIN : in std_logic_vector(8 downto 0);
     EN_VTC : in std_ulogic;
     INC : in std_ulogic;
     LOAD : in std_ulogic;
     ODATAIN : in std_ulogic;
     RST : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  ODELAYE3 : component is "PRIMITIVE";

----- component OR2L -----
component OR2L
  generic (
     IS_SRI_INVERTED : std_ulogic := '0'
  );
  port (
     O : out std_ulogic;
     DI : in std_ulogic;
     SRI : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OR2L : component is "PRIMITIVE";

----- component OSERDES -----
component OSERDES
  generic (
     DATA_RATE_OQ : string := "DDR";
     DATA_RATE_TQ : string := "DDR";
     DATA_WIDTH : integer := 4;
     INIT_OQ : bit := '0';
     INIT_TQ : bit := '0';
     SERDES_MODE : string := "MASTER";
     SRVAL_OQ : bit := '0';
     SRVAL_TQ : bit := '0';
     TRISTATE_WIDTH : integer := 4
  );
  port (
     OQ : out std_ulogic;
     SHIFTOUT1 : out std_ulogic;
     SHIFTOUT2 : out std_ulogic;
     TQ : out std_ulogic;
     CLK : in std_ulogic;
     CLKDIV : in std_ulogic;
     D1 : in std_ulogic;
     D2 : in std_ulogic;
     D3 : in std_ulogic;
     D4 : in std_ulogic;
     D5 : in std_ulogic;
     D6 : in std_ulogic;
     OCE : in std_ulogic;
     REV : in std_ulogic;
     SHIFTIN1 : in std_ulogic;
     SHIFTIN2 : in std_ulogic;
     SR : in std_ulogic;
     T1 : in std_ulogic;
     T2 : in std_ulogic;
     T3 : in std_ulogic;
     T4 : in std_ulogic;
     TCE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OSERDES : component is "PRIMITIVE";

----- component OSERDESE1 -----
component OSERDESE1
  generic (
     DATA_RATE_OQ : string := "DDR";
     DATA_RATE_TQ : string := "DDR";
     DATA_WIDTH : integer := 4;
     DDR3_DATA : integer := 1;
     INIT_OQ : bit := '0';
     INIT_TQ : bit := '0';
     INTERFACE_TYPE : string := "DEFAULT";
     ODELAY_USED : integer := 0;
     SERDES_MODE : string := "MASTER";
     SRVAL_OQ : bit := '0';
     SRVAL_TQ : bit := '0';
     TRISTATE_WIDTH : integer := 4
  );
  port (
     OCBEXTEND : out std_ulogic;
     OFB : out std_ulogic;
     OQ : out std_ulogic;
     SHIFTOUT1 : out std_ulogic;
     SHIFTOUT2 : out std_ulogic;
     TFB : out std_ulogic;
     TQ : out std_ulogic;
     CLK : in std_ulogic;
     CLKDIV : in std_ulogic;
     CLKPERF : in std_ulogic;
     CLKPERFDELAY : in std_ulogic;
     D1 : in std_ulogic;
     D2 : in std_ulogic;
     D3 : in std_ulogic;
     D4 : in std_ulogic;
     D5 : in std_ulogic;
     D6 : in std_ulogic;
     OCE : in std_ulogic;
     ODV : in std_ulogic;
     RST : in std_ulogic;
     SHIFTIN1 : in std_ulogic;
     SHIFTIN2 : in std_ulogic;
     T1 : in std_ulogic;
     T2 : in std_ulogic;
     T3 : in std_ulogic;
     T4 : in std_ulogic;
     TCE : in std_ulogic;
     WC : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OSERDESE1 : component is "PRIMITIVE";

----- component OSERDESE2 -----
component OSERDESE2
  generic (
     DATA_RATE_OQ : string := "DDR";
     DATA_RATE_TQ : string := "DDR";
     DATA_WIDTH : integer := 4;
     INIT_OQ : bit := '0';
     INIT_TQ : bit := '0';
     IS_CLKDIV_INVERTED : std_ulogic := '0';
     IS_CLK_INVERTED : std_ulogic := '0';
     IS_D1_INVERTED : std_ulogic := '0';
     IS_D2_INVERTED : std_ulogic := '0';
     IS_D3_INVERTED : std_ulogic := '0';
     IS_D4_INVERTED : std_ulogic := '0';
     IS_D5_INVERTED : std_ulogic := '0';
     IS_D6_INVERTED : std_ulogic := '0';
     IS_D7_INVERTED : std_ulogic := '0';
     IS_D8_INVERTED : std_ulogic := '0';
     IS_T1_INVERTED : std_ulogic := '0';
     IS_T2_INVERTED : std_ulogic := '0';
     IS_T3_INVERTED : std_ulogic := '0';
     IS_T4_INVERTED : std_ulogic := '0';
     SERDES_MODE : string := "MASTER";
     SRVAL_OQ : bit := '0';
     SRVAL_TQ : bit := '0';
     TBYTE_CTL : string := "FALSE";
     TBYTE_SRC : string := "FALSE";
     TRISTATE_WIDTH : integer := 4
  );
  port (
     OFB : out std_ulogic;
     OQ : out std_ulogic;
     SHIFTOUT1 : out std_ulogic;
     SHIFTOUT2 : out std_ulogic;
     TBYTEOUT : out std_ulogic;
     TFB : out std_ulogic;
     TQ : out std_ulogic;
     CLK : in std_ulogic;
     CLKDIV : in std_ulogic;
     D1 : in std_ulogic;
     D2 : in std_ulogic;
     D3 : in std_ulogic;
     D4 : in std_ulogic;
     D5 : in std_ulogic;
     D6 : in std_ulogic;
     D7 : in std_ulogic;
     D8 : in std_ulogic;
     OCE : in std_ulogic;
     RST : in std_ulogic;
     SHIFTIN1 : in std_ulogic;
     SHIFTIN2 : in std_ulogic;
     T1 : in std_ulogic;
     T2 : in std_ulogic;
     T3 : in std_ulogic;
     T4 : in std_ulogic;
     TBYTEIN : in std_ulogic;
     TCE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OSERDESE2 : component is "PRIMITIVE";

----- component OSERDESE3 -----
component OSERDESE3
  generic (
     DATA_WIDTH : integer := 8;
     INIT : std_ulogic := '0';
     IS_CLKDIV_INVERTED : std_ulogic := '0';
     IS_CLK_INVERTED : std_ulogic := '0';
     IS_RST_INVERTED : std_ulogic := '0';
     ODDR_MODE : string := "FALSE";
     OSERDES_D_BYPASS : string := "FALSE";
     OSERDES_T_BYPASS : string := "FALSE"
  );
  port (
     OQ : out std_ulogic;
     T_OUT : out std_ulogic;
     CLK : in std_ulogic;
     CLKDIV : in std_ulogic;
     D : in std_logic_vector(7 downto 0);
     RST : in std_ulogic;
     T : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OSERDESE3 : component is "PRIMITIVE";

----- component OUT_FIFO -----
component OUT_FIFO
  generic (
     ALMOST_EMPTY_VALUE : integer := 1;
     ALMOST_FULL_VALUE : integer := 1;
     ARRAY_MODE : string := "ARRAY_MODE_8_X_4";
     OUTPUT_DISABLE : string := "FALSE";
     SYNCHRONOUS_MODE : string := "FALSE"
  );
  port (
     ALMOSTEMPTY : out std_ulogic;
     ALMOSTFULL : out std_ulogic;
     EMPTY : out std_ulogic;
     FULL : out std_ulogic;
     Q0 : out std_logic_vector(3 downto 0);
     Q1 : out std_logic_vector(3 downto 0);
     Q2 : out std_logic_vector(3 downto 0);
     Q3 : out std_logic_vector(3 downto 0);
     Q4 : out std_logic_vector(3 downto 0);
     Q5 : out std_logic_vector(7 downto 0);
     Q6 : out std_logic_vector(7 downto 0);
     Q7 : out std_logic_vector(3 downto 0);
     Q8 : out std_logic_vector(3 downto 0);
     Q9 : out std_logic_vector(3 downto 0);
     D0 : in std_logic_vector(7 downto 0);
     D1 : in std_logic_vector(7 downto 0);
     D2 : in std_logic_vector(7 downto 0);
     D3 : in std_logic_vector(7 downto 0);
     D4 : in std_logic_vector(7 downto 0);
     D5 : in std_logic_vector(7 downto 0);
     D6 : in std_logic_vector(7 downto 0);
     D7 : in std_logic_vector(7 downto 0);
     D8 : in std_logic_vector(7 downto 0);
     D9 : in std_logic_vector(7 downto 0);
     RDCLK : in std_ulogic;
     RDEN : in std_ulogic;
     RESET : in std_ulogic;
     WRCLK : in std_ulogic;
     WREN : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  OUT_FIFO : component is "PRIMITIVE";

----- component PCIE_2_1 -----
component PCIE_2_1
  generic (
     AER_BASE_PTR : bit_vector := X"140";
     AER_CAP_ECRC_CHECK_CAPABLE : string := "FALSE";
     AER_CAP_ECRC_GEN_CAPABLE : string := "FALSE";
     AER_CAP_ID : bit_vector := X"0001";
     AER_CAP_MULTIHEADER : string := "FALSE";
     AER_CAP_NEXTPTR : bit_vector := X"178";
     AER_CAP_ON : string := "FALSE";
     AER_CAP_OPTIONAL_ERR_SUPPORT : bit_vector := X"000000";
     AER_CAP_PERMIT_ROOTERR_UPDATE : string := "TRUE";
     AER_CAP_VERSION : bit_vector := X"2";
     ALLOW_X8_GEN2 : string := "FALSE";
     BAR0 : bit_vector := X"FFFFFF00";
     BAR1 : bit_vector := X"FFFF0000";
     BAR2 : bit_vector := X"FFFF000C";
     BAR3 : bit_vector := X"FFFFFFFF";
     BAR4 : bit_vector := X"00000000";
     BAR5 : bit_vector := X"00000000";
     CAPABILITIES_PTR : bit_vector := X"40";
     CARDBUS_CIS_POINTER : bit_vector := X"00000000";
     CFG_ECRC_ERR_CPLSTAT : integer := 0;
     CLASS_CODE : bit_vector := X"000000";
     CMD_INTX_IMPLEMENTED : string := "TRUE";
     CPL_TIMEOUT_DISABLE_SUPPORTED : string := "FALSE";
     CPL_TIMEOUT_RANGES_SUPPORTED : bit_vector := X"0";
     CRM_MODULE_RSTS : bit_vector := X"00";
     DEV_CAP2_ARI_FORWARDING_SUPPORTED : string := "FALSE";
     DEV_CAP2_ATOMICOP32_COMPLETER_SUPPORTED : string := "FALSE";
     DEV_CAP2_ATOMICOP64_COMPLETER_SUPPORTED : string := "FALSE";
     DEV_CAP2_ATOMICOP_ROUTING_SUPPORTED : string := "FALSE";
     DEV_CAP2_CAS128_COMPLETER_SUPPORTED : string := "FALSE";
     DEV_CAP2_ENDEND_TLP_PREFIX_SUPPORTED : string := "FALSE";
     DEV_CAP2_EXTENDED_FMT_FIELD_SUPPORTED : string := "FALSE";
     DEV_CAP2_LTR_MECHANISM_SUPPORTED : string := "FALSE";
     DEV_CAP2_MAX_ENDEND_TLP_PREFIXES : bit_vector := X"0";
     DEV_CAP2_NO_RO_ENABLED_PRPR_PASSING : string := "FALSE";
     DEV_CAP2_TPH_COMPLETER_SUPPORTED : bit_vector := X"0";
     DEV_CAP_ENABLE_SLOT_PWR_LIMIT_SCALE : string := "TRUE";
     DEV_CAP_ENABLE_SLOT_PWR_LIMIT_VALUE : string := "TRUE";
     DEV_CAP_ENDPOINT_L0S_LATENCY : integer := 0;
     DEV_CAP_ENDPOINT_L1_LATENCY : integer := 0;
     DEV_CAP_EXT_TAG_SUPPORTED : string := "TRUE";
     DEV_CAP_FUNCTION_LEVEL_RESET_CAPABLE : string := "FALSE";
     DEV_CAP_MAX_PAYLOAD_SUPPORTED : integer := 2;
     DEV_CAP_PHANTOM_FUNCTIONS_SUPPORT : integer := 0;
     DEV_CAP_ROLE_BASED_ERROR : string := "TRUE";
     DEV_CAP_RSVD_14_12 : integer := 0;
     DEV_CAP_RSVD_17_16 : integer := 0;
     DEV_CAP_RSVD_31_29 : integer := 0;
     DEV_CONTROL_AUX_POWER_SUPPORTED : string := "FALSE";
     DEV_CONTROL_EXT_TAG_DEFAULT : string := "FALSE";
     DISABLE_ASPM_L1_TIMER : string := "FALSE";
     DISABLE_BAR_FILTERING : string := "FALSE";
     DISABLE_ERR_MSG : string := "FALSE";
     DISABLE_ID_CHECK : string := "FALSE";
     DISABLE_LANE_REVERSAL : string := "FALSE";
     DISABLE_LOCKED_FILTER : string := "FALSE";
     DISABLE_PPM_FILTER : string := "FALSE";
     DISABLE_RX_POISONED_RESP : string := "FALSE";
     DISABLE_RX_TC_FILTER : string := "FALSE";
     DISABLE_SCRAMBLING : string := "FALSE";
     DNSTREAM_LINK_NUM : bit_vector := X"00";
     DSN_BASE_PTR : bit_vector := X"100";
     DSN_CAP_ID : bit_vector := X"0003";
     DSN_CAP_NEXTPTR : bit_vector := X"10C";
     DSN_CAP_ON : string := "TRUE";
     DSN_CAP_VERSION : bit_vector := X"1";
     ENABLE_MSG_ROUTE : bit_vector := X"000";
     ENABLE_RX_TD_ECRC_TRIM : string := "FALSE";
     ENDEND_TLP_PREFIX_FORWARDING_SUPPORTED : string := "FALSE";
     ENTER_RVRY_EI_L0 : string := "TRUE";
     EXIT_LOOPBACK_ON_EI : string := "TRUE";
     EXPANSION_ROM : bit_vector := X"FFFFF001";
     EXT_CFG_CAP_PTR : bit_vector := X"3F";
     EXT_CFG_XP_CAP_PTR : bit_vector := X"3FF";
     HEADER_TYPE : bit_vector := X"00";
     INFER_EI : bit_vector := X"00";
     INTERRUPT_PIN : bit_vector := X"01";
     INTERRUPT_STAT_AUTO : string := "TRUE";
     IS_SWITCH : string := "FALSE";
     LAST_CONFIG_DWORD : bit_vector := X"3FF";
     LINK_CAP_ASPM_OPTIONALITY : string := "TRUE";
     LINK_CAP_ASPM_SUPPORT : integer := 1;
     LINK_CAP_CLOCK_POWER_MANAGEMENT : string := "FALSE";
     LINK_CAP_DLL_LINK_ACTIVE_REPORTING_CAP : string := "FALSE";
     LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN1 : integer := 7;
     LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN2 : integer := 7;
     LINK_CAP_L0S_EXIT_LATENCY_GEN1 : integer := 7;
     LINK_CAP_L0S_EXIT_LATENCY_GEN2 : integer := 7;
     LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN1 : integer := 7;
     LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN2 : integer := 7;
     LINK_CAP_L1_EXIT_LATENCY_GEN1 : integer := 7;
     LINK_CAP_L1_EXIT_LATENCY_GEN2 : integer := 7;
     LINK_CAP_LINK_BANDWIDTH_NOTIFICATION_CAP : string := "FALSE";
     LINK_CAP_MAX_LINK_SPEED : bit_vector := X"1";
     LINK_CAP_MAX_LINK_WIDTH : bit_vector := X"08";
     LINK_CAP_RSVD_23 : integer := 0;
     LINK_CAP_SURPRISE_DOWN_ERROR_CAPABLE : string := "FALSE";
     LINK_CONTROL_RCB : integer := 0;
     LINK_CTRL2_DEEMPHASIS : string := "FALSE";
     LINK_CTRL2_HW_AUTONOMOUS_SPEED_DISABLE : string := "FALSE";
     LINK_CTRL2_TARGET_LINK_SPEED : bit_vector := X"2";
     LINK_STATUS_SLOT_CLOCK_CONFIG : string := "TRUE";
     LL_ACK_TIMEOUT : bit_vector := X"0000";
     LL_ACK_TIMEOUT_EN : string := "FALSE";
     LL_ACK_TIMEOUT_FUNC : integer := 0;
     LL_REPLAY_TIMEOUT : bit_vector := X"0000";
     LL_REPLAY_TIMEOUT_EN : string := "FALSE";
     LL_REPLAY_TIMEOUT_FUNC : integer := 0;
     LTSSM_MAX_LINK_WIDTH : bit_vector := X"01";
     MPS_FORCE : string := "FALSE";
     MSIX_BASE_PTR : bit_vector := X"9C";
     MSIX_CAP_ID : bit_vector := X"11";
     MSIX_CAP_NEXTPTR : bit_vector := X"00";
     MSIX_CAP_ON : string := "FALSE";
     MSIX_CAP_PBA_BIR : integer := 0;
     MSIX_CAP_PBA_OFFSET : bit_vector := X"00000050";
     MSIX_CAP_TABLE_BIR : integer := 0;
     MSIX_CAP_TABLE_OFFSET : bit_vector := X"00000040";
     MSIX_CAP_TABLE_SIZE : bit_vector := X"000";
     MSI_BASE_PTR : bit_vector := X"48";
     MSI_CAP_64_BIT_ADDR_CAPABLE : string := "TRUE";
     MSI_CAP_ID : bit_vector := X"05";
     MSI_CAP_MULTIMSGCAP : integer := 0;
     MSI_CAP_MULTIMSG_EXTENSION : integer := 0;
     MSI_CAP_NEXTPTR : bit_vector := X"60";
     MSI_CAP_ON : string := "FALSE";
     MSI_CAP_PER_VECTOR_MASKING_CAPABLE : string := "TRUE";
     N_FTS_COMCLK_GEN1 : integer := 255;
     N_FTS_COMCLK_GEN2 : integer := 255;
     N_FTS_GEN1 : integer := 255;
     N_FTS_GEN2 : integer := 255;
     PCIE_BASE_PTR : bit_vector := X"60";
     PCIE_CAP_CAPABILITY_ID : bit_vector := X"10";
     PCIE_CAP_CAPABILITY_VERSION : bit_vector := X"2";
     PCIE_CAP_DEVICE_PORT_TYPE : bit_vector := X"0";
     PCIE_CAP_NEXTPTR : bit_vector := X"9C";
     PCIE_CAP_ON : string := "TRUE";
     PCIE_CAP_RSVD_15_14 : integer := 0;
     PCIE_CAP_SLOT_IMPLEMENTED : string := "FALSE";
     PCIE_REVISION : integer := 2;
     PL_AUTO_CONFIG : integer := 0;
     PL_FAST_TRAIN : string := "FALSE";
     PM_ASPML0S_TIMEOUT : bit_vector := X"0000";
     PM_ASPML0S_TIMEOUT_EN : string := "FALSE";
     PM_ASPML0S_TIMEOUT_FUNC : integer := 0;
     PM_ASPM_FASTEXIT : string := "FALSE";
     PM_BASE_PTR : bit_vector := X"40";
     PM_CAP_AUXCURRENT : integer := 0;
     PM_CAP_D1SUPPORT : string := "TRUE";
     PM_CAP_D2SUPPORT : string := "TRUE";
     PM_CAP_DSI : string := "FALSE";
     PM_CAP_ID : bit_vector := X"01";
     PM_CAP_NEXTPTR : bit_vector := X"48";
     PM_CAP_ON : string := "TRUE";
     PM_CAP_PMESUPPORT : bit_vector := X"0F";
     PM_CAP_PME_CLOCK : string := "FALSE";
     PM_CAP_RSVD_04 : integer := 0;
     PM_CAP_VERSION : integer := 3;
     PM_CSR_B2B3 : string := "FALSE";
     PM_CSR_BPCCEN : string := "FALSE";
     PM_CSR_NOSOFTRST : string := "TRUE";
     PM_DATA0 : bit_vector := X"01";
     PM_DATA1 : bit_vector := X"01";
     PM_DATA2 : bit_vector := X"01";
     PM_DATA3 : bit_vector := X"01";
     PM_DATA4 : bit_vector := X"01";
     PM_DATA5 : bit_vector := X"01";
     PM_DATA6 : bit_vector := X"01";
     PM_DATA7 : bit_vector := X"01";
     PM_DATA_SCALE0 : bit_vector := X"1";
     PM_DATA_SCALE1 : bit_vector := X"1";
     PM_DATA_SCALE2 : bit_vector := X"1";
     PM_DATA_SCALE3 : bit_vector := X"1";
     PM_DATA_SCALE4 : bit_vector := X"1";
     PM_DATA_SCALE5 : bit_vector := X"1";
     PM_DATA_SCALE6 : bit_vector := X"1";
     PM_DATA_SCALE7 : bit_vector := X"1";
     PM_MF : string := "FALSE";
     RBAR_BASE_PTR : bit_vector := X"178";
     RBAR_CAP_CONTROL_ENCODEDBAR0 : bit_vector := X"00";
     RBAR_CAP_CONTROL_ENCODEDBAR1 : bit_vector := X"00";
     RBAR_CAP_CONTROL_ENCODEDBAR2 : bit_vector := X"00";
     RBAR_CAP_CONTROL_ENCODEDBAR3 : bit_vector := X"00";
     RBAR_CAP_CONTROL_ENCODEDBAR4 : bit_vector := X"00";
     RBAR_CAP_CONTROL_ENCODEDBAR5 : bit_vector := X"00";
     RBAR_CAP_ID : bit_vector := X"0015";
     RBAR_CAP_INDEX0 : bit_vector := X"0";
     RBAR_CAP_INDEX1 : bit_vector := X"0";
     RBAR_CAP_INDEX2 : bit_vector := X"0";
     RBAR_CAP_INDEX3 : bit_vector := X"0";
     RBAR_CAP_INDEX4 : bit_vector := X"0";
     RBAR_CAP_INDEX5 : bit_vector := X"0";
     RBAR_CAP_NEXTPTR : bit_vector := X"000";
     RBAR_CAP_ON : string := "FALSE";
     RBAR_CAP_SUP0 : bit_vector := X"00000000";
     RBAR_CAP_SUP1 : bit_vector := X"00000000";
     RBAR_CAP_SUP2 : bit_vector := X"00000000";
     RBAR_CAP_SUP3 : bit_vector := X"00000000";
     RBAR_CAP_SUP4 : bit_vector := X"00000000";
     RBAR_CAP_SUP5 : bit_vector := X"00000000";
     RBAR_CAP_VERSION : bit_vector := X"1";
     RBAR_NUM : bit_vector := X"1";
     RECRC_CHK : integer := 0;
     RECRC_CHK_TRIM : string := "FALSE";
     ROOT_CAP_CRS_SW_VISIBILITY : string := "FALSE";
     RP_AUTO_SPD : bit_vector := X"1";
     RP_AUTO_SPD_LOOPCNT : bit_vector := X"1F";
     SELECT_DLL_IF : string := "FALSE";
     SIM_VERSION : string := "1.0";
     SLOT_CAP_ATT_BUTTON_PRESENT : string := "FALSE";
     SLOT_CAP_ATT_INDICATOR_PRESENT : string := "FALSE";
     SLOT_CAP_ELEC_INTERLOCK_PRESENT : string := "FALSE";
     SLOT_CAP_HOTPLUG_CAPABLE : string := "FALSE";
     SLOT_CAP_HOTPLUG_SURPRISE : string := "FALSE";
     SLOT_CAP_MRL_SENSOR_PRESENT : string := "FALSE";
     SLOT_CAP_NO_CMD_COMPLETED_SUPPORT : string := "FALSE";
     SLOT_CAP_PHYSICAL_SLOT_NUM : bit_vector := X"0000";
     SLOT_CAP_POWER_CONTROLLER_PRESENT : string := "FALSE";
     SLOT_CAP_POWER_INDICATOR_PRESENT : string := "FALSE";
     SLOT_CAP_SLOT_POWER_LIMIT_SCALE : integer := 0;
     SLOT_CAP_SLOT_POWER_LIMIT_VALUE : bit_vector := X"00";
     SPARE_BIT0 : integer := 0;
     SPARE_BIT1 : integer := 0;
     SPARE_BIT2 : integer := 0;
     SPARE_BIT3 : integer := 0;
     SPARE_BIT4 : integer := 0;
     SPARE_BIT5 : integer := 0;
     SPARE_BIT6 : integer := 0;
     SPARE_BIT7 : integer := 0;
     SPARE_BIT8 : integer := 0;
     SPARE_BYTE0 : bit_vector := X"00";
     SPARE_BYTE1 : bit_vector := X"00";
     SPARE_BYTE2 : bit_vector := X"00";
     SPARE_BYTE3 : bit_vector := X"00";
     SPARE_WORD0 : bit_vector := X"00000000";
     SPARE_WORD1 : bit_vector := X"00000000";
     SPARE_WORD2 : bit_vector := X"00000000";
     SPARE_WORD3 : bit_vector := X"00000000";
     SSL_MESSAGE_AUTO : string := "FALSE";
     TECRC_EP_INV : string := "FALSE";
     TL_RBYPASS : string := "FALSE";
     TL_RX_RAM_RADDR_LATENCY : integer := 0;
     TL_RX_RAM_RDATA_LATENCY : integer := 2;
     TL_RX_RAM_WRITE_LATENCY : integer := 0;
     TL_TFC_DISABLE : string := "FALSE";
     TL_TX_CHECKS_DISABLE : string := "FALSE";
     TL_TX_RAM_RADDR_LATENCY : integer := 0;
     TL_TX_RAM_RDATA_LATENCY : integer := 2;
     TL_TX_RAM_WRITE_LATENCY : integer := 0;
     TRN_DW : string := "FALSE";
     TRN_NP_FC : string := "FALSE";
     UPCONFIG_CAPABLE : string := "TRUE";
     UPSTREAM_FACING : string := "TRUE";
     UR_ATOMIC : string := "TRUE";
     UR_CFG1 : string := "TRUE";
     UR_INV_REQ : string := "TRUE";
     UR_PRS_RESPONSE : string := "TRUE";
     USER_CLK2_DIV2 : string := "FALSE";
     USER_CLK_FREQ : integer := 3;
     USE_RID_PINS : string := "FALSE";
     VC0_CPL_INFINITE : string := "TRUE";
     VC0_RX_RAM_LIMIT : bit_vector := X"03FF";
     VC0_TOTAL_CREDITS_CD : integer := 127;
     VC0_TOTAL_CREDITS_CH : integer := 31;
     VC0_TOTAL_CREDITS_NPD : integer := 24;
     VC0_TOTAL_CREDITS_NPH : integer := 12;
     VC0_TOTAL_CREDITS_PD : integer := 288;
     VC0_TOTAL_CREDITS_PH : integer := 32;
     VC0_TX_LASTPACKET : integer := 31;
     VC_BASE_PTR : bit_vector := X"10C";
     VC_CAP_ID : bit_vector := X"0002";
     VC_CAP_NEXTPTR : bit_vector := X"000";
     VC_CAP_ON : string := "FALSE";
     VC_CAP_REJECT_SNOOP_TRANSACTIONS : string := "FALSE";
     VC_CAP_VERSION : bit_vector := X"1";
     VSEC_BASE_PTR : bit_vector := X"128";
     VSEC_CAP_HDR_ID : bit_vector := X"1234";
     VSEC_CAP_HDR_LENGTH : bit_vector := X"018";
     VSEC_CAP_HDR_REVISION : bit_vector := X"1";
     VSEC_CAP_ID : bit_vector := X"000B";
     VSEC_CAP_IS_LINK_VISIBLE : string := "TRUE";
     VSEC_CAP_NEXTPTR : bit_vector := X"140";
     VSEC_CAP_ON : string := "FALSE";
     VSEC_CAP_VERSION : bit_vector := X"1"
  );
  port (
     CFGAERECRCCHECKEN : out std_ulogic;
     CFGAERECRCGENEN : out std_ulogic;
     CFGAERROOTERRCORRERRRECEIVED : out std_ulogic;
     CFGAERROOTERRCORRERRREPORTINGEN : out std_ulogic;
     CFGAERROOTERRFATALERRRECEIVED : out std_ulogic;
     CFGAERROOTERRFATALERRREPORTINGEN : out std_ulogic;
     CFGAERROOTERRNONFATALERRRECEIVED : out std_ulogic;
     CFGAERROOTERRNONFATALERRREPORTINGEN : out std_ulogic;
     CFGBRIDGESERREN : out std_ulogic;
     CFGCOMMANDBUSMASTERENABLE : out std_ulogic;
     CFGCOMMANDINTERRUPTDISABLE : out std_ulogic;
     CFGCOMMANDIOENABLE : out std_ulogic;
     CFGCOMMANDMEMENABLE : out std_ulogic;
     CFGCOMMANDSERREN : out std_ulogic;
     CFGDEVCONTROL2ARIFORWARDEN : out std_ulogic;
     CFGDEVCONTROL2ATOMICEGRESSBLOCK : out std_ulogic;
     CFGDEVCONTROL2ATOMICREQUESTEREN : out std_ulogic;
     CFGDEVCONTROL2CPLTIMEOUTDIS : out std_ulogic;
     CFGDEVCONTROL2CPLTIMEOUTVAL : out std_logic_vector(3 downto 0);
     CFGDEVCONTROL2IDOCPLEN : out std_ulogic;
     CFGDEVCONTROL2IDOREQEN : out std_ulogic;
     CFGDEVCONTROL2LTREN : out std_ulogic;
     CFGDEVCONTROL2TLPPREFIXBLOCK : out std_ulogic;
     CFGDEVCONTROLAUXPOWEREN : out std_ulogic;
     CFGDEVCONTROLCORRERRREPORTINGEN : out std_ulogic;
     CFGDEVCONTROLENABLERO : out std_ulogic;
     CFGDEVCONTROLEXTTAGEN : out std_ulogic;
     CFGDEVCONTROLFATALERRREPORTINGEN : out std_ulogic;
     CFGDEVCONTROLMAXPAYLOAD : out std_logic_vector(2 downto 0);
     CFGDEVCONTROLMAXREADREQ : out std_logic_vector(2 downto 0);
     CFGDEVCONTROLNONFATALREPORTINGEN : out std_ulogic;
     CFGDEVCONTROLNOSNOOPEN : out std_ulogic;
     CFGDEVCONTROLPHANTOMEN : out std_ulogic;
     CFGDEVCONTROLURERRREPORTINGEN : out std_ulogic;
     CFGDEVSTATUSCORRERRDETECTED : out std_ulogic;
     CFGDEVSTATUSFATALERRDETECTED : out std_ulogic;
     CFGDEVSTATUSNONFATALERRDETECTED : out std_ulogic;
     CFGDEVSTATUSURDETECTED : out std_ulogic;
     CFGERRAERHEADERLOGSETN : out std_ulogic;
     CFGERRCPLRDYN : out std_ulogic;
     CFGINTERRUPTDO : out std_logic_vector(7 downto 0);
     CFGINTERRUPTMMENABLE : out std_logic_vector(2 downto 0);
     CFGINTERRUPTMSIENABLE : out std_ulogic;
     CFGINTERRUPTMSIXENABLE : out std_ulogic;
     CFGINTERRUPTMSIXFM : out std_ulogic;
     CFGINTERRUPTRDYN : out std_ulogic;
     CFGLINKCONTROLASPMCONTROL : out std_logic_vector(1 downto 0);
     CFGLINKCONTROLAUTOBANDWIDTHINTEN : out std_ulogic;
     CFGLINKCONTROLBANDWIDTHINTEN : out std_ulogic;
     CFGLINKCONTROLCLOCKPMEN : out std_ulogic;
     CFGLINKCONTROLCOMMONCLOCK : out std_ulogic;
     CFGLINKCONTROLEXTENDEDSYNC : out std_ulogic;
     CFGLINKCONTROLHWAUTOWIDTHDIS : out std_ulogic;
     CFGLINKCONTROLLINKDISABLE : out std_ulogic;
     CFGLINKCONTROLRCB : out std_ulogic;
     CFGLINKCONTROLRETRAINLINK : out std_ulogic;
     CFGLINKSTATUSAUTOBANDWIDTHSTATUS : out std_ulogic;
     CFGLINKSTATUSBANDWIDTHSTATUS : out std_ulogic;
     CFGLINKSTATUSCURRENTSPEED : out std_logic_vector(1 downto 0);
     CFGLINKSTATUSDLLACTIVE : out std_ulogic;
     CFGLINKSTATUSLINKTRAINING : out std_ulogic;
     CFGLINKSTATUSNEGOTIATEDWIDTH : out std_logic_vector(3 downto 0);
     CFGMGMTDO : out std_logic_vector(31 downto 0);
     CFGMGMTRDWRDONEN : out std_ulogic;
     CFGMSGDATA : out std_logic_vector(15 downto 0);
     CFGMSGRECEIVED : out std_ulogic;
     CFGMSGRECEIVEDASSERTINTA : out std_ulogic;
     CFGMSGRECEIVEDASSERTINTB : out std_ulogic;
     CFGMSGRECEIVEDASSERTINTC : out std_ulogic;
     CFGMSGRECEIVEDASSERTINTD : out std_ulogic;
     CFGMSGRECEIVEDDEASSERTINTA : out std_ulogic;
     CFGMSGRECEIVEDDEASSERTINTB : out std_ulogic;
     CFGMSGRECEIVEDDEASSERTINTC : out std_ulogic;
     CFGMSGRECEIVEDDEASSERTINTD : out std_ulogic;
     CFGMSGRECEIVEDERRCOR : out std_ulogic;
     CFGMSGRECEIVEDERRFATAL : out std_ulogic;
     CFGMSGRECEIVEDERRNONFATAL : out std_ulogic;
     CFGMSGRECEIVEDPMASNAK : out std_ulogic;
     CFGMSGRECEIVEDPMETO : out std_ulogic;
     CFGMSGRECEIVEDPMETOACK : out std_ulogic;
     CFGMSGRECEIVEDPMPME : out std_ulogic;
     CFGMSGRECEIVEDSETSLOTPOWERLIMIT : out std_ulogic;
     CFGMSGRECEIVEDUNLOCK : out std_ulogic;
     CFGPCIELINKSTATE : out std_logic_vector(2 downto 0);
     CFGPMCSRPMEEN : out std_ulogic;
     CFGPMCSRPMESTATUS : out std_ulogic;
     CFGPMCSRPOWERSTATE : out std_logic_vector(1 downto 0);
     CFGPMRCVASREQL1N : out std_ulogic;
     CFGPMRCVENTERL1N : out std_ulogic;
     CFGPMRCVENTERL23N : out std_ulogic;
     CFGPMRCVREQACKN : out std_ulogic;
     CFGROOTCONTROLPMEINTEN : out std_ulogic;
     CFGROOTCONTROLSYSERRCORRERREN : out std_ulogic;
     CFGROOTCONTROLSYSERRFATALERREN : out std_ulogic;
     CFGROOTCONTROLSYSERRNONFATALERREN : out std_ulogic;
     CFGSLOTCONTROLELECTROMECHILCTLPULSE : out std_ulogic;
     CFGTRANSACTION : out std_ulogic;
     CFGTRANSACTIONADDR : out std_logic_vector(6 downto 0);
     CFGTRANSACTIONTYPE : out std_ulogic;
     CFGVCTCVCMAP : out std_logic_vector(6 downto 0);
     DBGSCLRA : out std_ulogic;
     DBGSCLRB : out std_ulogic;
     DBGSCLRC : out std_ulogic;
     DBGSCLRD : out std_ulogic;
     DBGSCLRE : out std_ulogic;
     DBGSCLRF : out std_ulogic;
     DBGSCLRG : out std_ulogic;
     DBGSCLRH : out std_ulogic;
     DBGSCLRI : out std_ulogic;
     DBGSCLRJ : out std_ulogic;
     DBGSCLRK : out std_ulogic;
     DBGVECA : out std_logic_vector(63 downto 0);
     DBGVECB : out std_logic_vector(63 downto 0);
     DBGVECC : out std_logic_vector(11 downto 0);
     DRPDO : out std_logic_vector(15 downto 0);
     DRPRDY : out std_ulogic;
     LL2BADDLLPERR : out std_ulogic;
     LL2BADTLPERR : out std_ulogic;
     LL2LINKSTATUS : out std_logic_vector(4 downto 0);
     LL2PROTOCOLERR : out std_ulogic;
     LL2RECEIVERERR : out std_ulogic;
     LL2REPLAYROERR : out std_ulogic;
     LL2REPLAYTOERR : out std_ulogic;
     LL2SUSPENDOK : out std_ulogic;
     LL2TFCINIT1SEQ : out std_ulogic;
     LL2TFCINIT2SEQ : out std_ulogic;
     LL2TXIDLE : out std_ulogic;
     LNKCLKEN : out std_ulogic;
     MIMRXRADDR : out std_logic_vector(12 downto 0);
     MIMRXREN : out std_ulogic;
     MIMRXWADDR : out std_logic_vector(12 downto 0);
     MIMRXWDATA : out std_logic_vector(67 downto 0);
     MIMRXWEN : out std_ulogic;
     MIMTXRADDR : out std_logic_vector(12 downto 0);
     MIMTXREN : out std_ulogic;
     MIMTXWADDR : out std_logic_vector(12 downto 0);
     MIMTXWDATA : out std_logic_vector(68 downto 0);
     MIMTXWEN : out std_ulogic;
     PIPERX0POLARITY : out std_ulogic;
     PIPERX1POLARITY : out std_ulogic;
     PIPERX2POLARITY : out std_ulogic;
     PIPERX3POLARITY : out std_ulogic;
     PIPERX4POLARITY : out std_ulogic;
     PIPERX5POLARITY : out std_ulogic;
     PIPERX6POLARITY : out std_ulogic;
     PIPERX7POLARITY : out std_ulogic;
     PIPETX0CHARISK : out std_logic_vector(1 downto 0);
     PIPETX0COMPLIANCE : out std_ulogic;
     PIPETX0DATA : out std_logic_vector(15 downto 0);
     PIPETX0ELECIDLE : out std_ulogic;
     PIPETX0POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX1CHARISK : out std_logic_vector(1 downto 0);
     PIPETX1COMPLIANCE : out std_ulogic;
     PIPETX1DATA : out std_logic_vector(15 downto 0);
     PIPETX1ELECIDLE : out std_ulogic;
     PIPETX1POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX2CHARISK : out std_logic_vector(1 downto 0);
     PIPETX2COMPLIANCE : out std_ulogic;
     PIPETX2DATA : out std_logic_vector(15 downto 0);
     PIPETX2ELECIDLE : out std_ulogic;
     PIPETX2POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX3CHARISK : out std_logic_vector(1 downto 0);
     PIPETX3COMPLIANCE : out std_ulogic;
     PIPETX3DATA : out std_logic_vector(15 downto 0);
     PIPETX3ELECIDLE : out std_ulogic;
     PIPETX3POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX4CHARISK : out std_logic_vector(1 downto 0);
     PIPETX4COMPLIANCE : out std_ulogic;
     PIPETX4DATA : out std_logic_vector(15 downto 0);
     PIPETX4ELECIDLE : out std_ulogic;
     PIPETX4POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX5CHARISK : out std_logic_vector(1 downto 0);
     PIPETX5COMPLIANCE : out std_ulogic;
     PIPETX5DATA : out std_logic_vector(15 downto 0);
     PIPETX5ELECIDLE : out std_ulogic;
     PIPETX5POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX6CHARISK : out std_logic_vector(1 downto 0);
     PIPETX6COMPLIANCE : out std_ulogic;
     PIPETX6DATA : out std_logic_vector(15 downto 0);
     PIPETX6ELECIDLE : out std_ulogic;
     PIPETX6POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX7CHARISK : out std_logic_vector(1 downto 0);
     PIPETX7COMPLIANCE : out std_ulogic;
     PIPETX7DATA : out std_logic_vector(15 downto 0);
     PIPETX7ELECIDLE : out std_ulogic;
     PIPETX7POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETXDEEMPH : out std_ulogic;
     PIPETXMARGIN : out std_logic_vector(2 downto 0);
     PIPETXRATE : out std_ulogic;
     PIPETXRCVRDET : out std_ulogic;
     PIPETXRESET : out std_ulogic;
     PL2L0REQ : out std_ulogic;
     PL2LINKUP : out std_ulogic;
     PL2RECEIVERERR : out std_ulogic;
     PL2RECOVERY : out std_ulogic;
     PL2RXELECIDLE : out std_ulogic;
     PL2RXPMSTATE : out std_logic_vector(1 downto 0);
     PL2SUSPENDOK : out std_ulogic;
     PLDBGVEC : out std_logic_vector(11 downto 0);
     PLDIRECTEDCHANGEDONE : out std_ulogic;
     PLINITIALLINKWIDTH : out std_logic_vector(2 downto 0);
     PLLANEREVERSALMODE : out std_logic_vector(1 downto 0);
     PLLINKGEN2CAP : out std_ulogic;
     PLLINKPARTNERGEN2SUPPORTED : out std_ulogic;
     PLLINKUPCFGCAP : out std_ulogic;
     PLLTSSMSTATE : out std_logic_vector(5 downto 0);
     PLPHYLNKUPN : out std_ulogic;
     PLRECEIVEDHOTRST : out std_ulogic;
     PLRXPMSTATE : out std_logic_vector(1 downto 0);
     PLSELLNKRATE : out std_ulogic;
     PLSELLNKWIDTH : out std_logic_vector(1 downto 0);
     PLTXPMSTATE : out std_logic_vector(2 downto 0);
     RECEIVEDFUNCLVLRSTN : out std_ulogic;
     TL2ASPMSUSPENDCREDITCHECKOK : out std_ulogic;
     TL2ASPMSUSPENDREQ : out std_ulogic;
     TL2ERRFCPE : out std_ulogic;
     TL2ERRHDR : out std_logic_vector(63 downto 0);
     TL2ERRMALFORMED : out std_ulogic;
     TL2ERRRXOVERFLOW : out std_ulogic;
     TL2PPMSUSPENDOK : out std_ulogic;
     TRNFCCPLD : out std_logic_vector(11 downto 0);
     TRNFCCPLH : out std_logic_vector(7 downto 0);
     TRNFCNPD : out std_logic_vector(11 downto 0);
     TRNFCNPH : out std_logic_vector(7 downto 0);
     TRNFCPD : out std_logic_vector(11 downto 0);
     TRNFCPH : out std_logic_vector(7 downto 0);
     TRNLNKUP : out std_ulogic;
     TRNRBARHIT : out std_logic_vector(7 downto 0);
     TRNRD : out std_logic_vector(127 downto 0);
     TRNRDLLPDATA : out std_logic_vector(63 downto 0);
     TRNRDLLPSRCRDY : out std_logic_vector(1 downto 0);
     TRNRECRCERR : out std_ulogic;
     TRNREOF : out std_ulogic;
     TRNRERRFWD : out std_ulogic;
     TRNRREM : out std_logic_vector(1 downto 0);
     TRNRSOF : out std_ulogic;
     TRNRSRCDSC : out std_ulogic;
     TRNRSRCRDY : out std_ulogic;
     TRNTBUFAV : out std_logic_vector(5 downto 0);
     TRNTCFGREQ : out std_ulogic;
     TRNTDLLPDSTRDY : out std_ulogic;
     TRNTDSTRDY : out std_logic_vector(3 downto 0);
     TRNTERRDROP : out std_ulogic;
     USERRSTN : out std_ulogic;
     CFGAERINTERRUPTMSGNUM : in std_logic_vector(4 downto 0);
     CFGDEVID : in std_logic_vector(15 downto 0);
     CFGDSBUSNUMBER : in std_logic_vector(7 downto 0);
     CFGDSDEVICENUMBER : in std_logic_vector(4 downto 0);
     CFGDSFUNCTIONNUMBER : in std_logic_vector(2 downto 0);
     CFGDSN : in std_logic_vector(63 downto 0);
     CFGERRACSN : in std_ulogic;
     CFGERRAERHEADERLOG : in std_logic_vector(127 downto 0);
     CFGERRATOMICEGRESSBLOCKEDN : in std_ulogic;
     CFGERRCORN : in std_ulogic;
     CFGERRCPLABORTN : in std_ulogic;
     CFGERRCPLTIMEOUTN : in std_ulogic;
     CFGERRCPLUNEXPECTN : in std_ulogic;
     CFGERRECRCN : in std_ulogic;
     CFGERRINTERNALCORN : in std_ulogic;
     CFGERRINTERNALUNCORN : in std_ulogic;
     CFGERRLOCKEDN : in std_ulogic;
     CFGERRMALFORMEDN : in std_ulogic;
     CFGERRMCBLOCKEDN : in std_ulogic;
     CFGERRNORECOVERYN : in std_ulogic;
     CFGERRPOISONEDN : in std_ulogic;
     CFGERRPOSTEDN : in std_ulogic;
     CFGERRTLPCPLHEADER : in std_logic_vector(47 downto 0);
     CFGERRURN : in std_ulogic;
     CFGFORCECOMMONCLOCKOFF : in std_ulogic;
     CFGFORCEEXTENDEDSYNCON : in std_ulogic;
     CFGFORCEMPS : in std_logic_vector(2 downto 0);
     CFGINTERRUPTASSERTN : in std_ulogic;
     CFGINTERRUPTDI : in std_logic_vector(7 downto 0);
     CFGINTERRUPTN : in std_ulogic;
     CFGINTERRUPTSTATN : in std_ulogic;
     CFGMGMTBYTEENN : in std_logic_vector(3 downto 0);
     CFGMGMTDI : in std_logic_vector(31 downto 0);
     CFGMGMTDWADDR : in std_logic_vector(9 downto 0);
     CFGMGMTRDENN : in std_ulogic;
     CFGMGMTWRENN : in std_ulogic;
     CFGMGMTWRREADONLYN : in std_ulogic;
     CFGMGMTWRRW1CASRWN : in std_ulogic;
     CFGPCIECAPINTERRUPTMSGNUM : in std_logic_vector(4 downto 0);
     CFGPMFORCESTATE : in std_logic_vector(1 downto 0);
     CFGPMFORCESTATEENN : in std_ulogic;
     CFGPMHALTASPML0SN : in std_ulogic;
     CFGPMHALTASPML1N : in std_ulogic;
     CFGPMSENDPMETON : in std_ulogic;
     CFGPMTURNOFFOKN : in std_ulogic;
     CFGPMWAKEN : in std_ulogic;
     CFGPORTNUMBER : in std_logic_vector(7 downto 0);
     CFGREVID : in std_logic_vector(7 downto 0);
     CFGSUBSYSID : in std_logic_vector(15 downto 0);
     CFGSUBSYSVENDID : in std_logic_vector(15 downto 0);
     CFGTRNPENDINGN : in std_ulogic;
     CFGVENDID : in std_logic_vector(15 downto 0);
     CMRSTN : in std_ulogic;
     CMSTICKYRSTN : in std_ulogic;
     DBGMODE : in std_logic_vector(1 downto 0);
     DBGSUBMODE : in std_ulogic;
     DLRSTN : in std_ulogic;
     DRPADDR : in std_logic_vector(8 downto 0);
     DRPCLK : in std_ulogic;
     DRPDI : in std_logic_vector(15 downto 0);
     DRPEN : in std_ulogic;
     DRPWE : in std_ulogic;
     FUNCLVLRSTN : in std_ulogic;
     LL2SENDASREQL1 : in std_ulogic;
     LL2SENDENTERL1 : in std_ulogic;
     LL2SENDENTERL23 : in std_ulogic;
     LL2SENDPMACK : in std_ulogic;
     LL2SUSPENDNOW : in std_ulogic;
     LL2TLPRCV : in std_ulogic;
     MIMRXRDATA : in std_logic_vector(67 downto 0);
     MIMTXRDATA : in std_logic_vector(68 downto 0);
     PIPECLK : in std_ulogic;
     PIPERX0CHANISALIGNED : in std_ulogic;
     PIPERX0CHARISK : in std_logic_vector(1 downto 0);
     PIPERX0DATA : in std_logic_vector(15 downto 0);
     PIPERX0ELECIDLE : in std_ulogic;
     PIPERX0PHYSTATUS : in std_ulogic;
     PIPERX0STATUS : in std_logic_vector(2 downto 0);
     PIPERX0VALID : in std_ulogic;
     PIPERX1CHANISALIGNED : in std_ulogic;
     PIPERX1CHARISK : in std_logic_vector(1 downto 0);
     PIPERX1DATA : in std_logic_vector(15 downto 0);
     PIPERX1ELECIDLE : in std_ulogic;
     PIPERX1PHYSTATUS : in std_ulogic;
     PIPERX1STATUS : in std_logic_vector(2 downto 0);
     PIPERX1VALID : in std_ulogic;
     PIPERX2CHANISALIGNED : in std_ulogic;
     PIPERX2CHARISK : in std_logic_vector(1 downto 0);
     PIPERX2DATA : in std_logic_vector(15 downto 0);
     PIPERX2ELECIDLE : in std_ulogic;
     PIPERX2PHYSTATUS : in std_ulogic;
     PIPERX2STATUS : in std_logic_vector(2 downto 0);
     PIPERX2VALID : in std_ulogic;
     PIPERX3CHANISALIGNED : in std_ulogic;
     PIPERX3CHARISK : in std_logic_vector(1 downto 0);
     PIPERX3DATA : in std_logic_vector(15 downto 0);
     PIPERX3ELECIDLE : in std_ulogic;
     PIPERX3PHYSTATUS : in std_ulogic;
     PIPERX3STATUS : in std_logic_vector(2 downto 0);
     PIPERX3VALID : in std_ulogic;
     PIPERX4CHANISALIGNED : in std_ulogic;
     PIPERX4CHARISK : in std_logic_vector(1 downto 0);
     PIPERX4DATA : in std_logic_vector(15 downto 0);
     PIPERX4ELECIDLE : in std_ulogic;
     PIPERX4PHYSTATUS : in std_ulogic;
     PIPERX4STATUS : in std_logic_vector(2 downto 0);
     PIPERX4VALID : in std_ulogic;
     PIPERX5CHANISALIGNED : in std_ulogic;
     PIPERX5CHARISK : in std_logic_vector(1 downto 0);
     PIPERX5DATA : in std_logic_vector(15 downto 0);
     PIPERX5ELECIDLE : in std_ulogic;
     PIPERX5PHYSTATUS : in std_ulogic;
     PIPERX5STATUS : in std_logic_vector(2 downto 0);
     PIPERX5VALID : in std_ulogic;
     PIPERX6CHANISALIGNED : in std_ulogic;
     PIPERX6CHARISK : in std_logic_vector(1 downto 0);
     PIPERX6DATA : in std_logic_vector(15 downto 0);
     PIPERX6ELECIDLE : in std_ulogic;
     PIPERX6PHYSTATUS : in std_ulogic;
     PIPERX6STATUS : in std_logic_vector(2 downto 0);
     PIPERX6VALID : in std_ulogic;
     PIPERX7CHANISALIGNED : in std_ulogic;
     PIPERX7CHARISK : in std_logic_vector(1 downto 0);
     PIPERX7DATA : in std_logic_vector(15 downto 0);
     PIPERX7ELECIDLE : in std_ulogic;
     PIPERX7PHYSTATUS : in std_ulogic;
     PIPERX7STATUS : in std_logic_vector(2 downto 0);
     PIPERX7VALID : in std_ulogic;
     PL2DIRECTEDLSTATE : in std_logic_vector(4 downto 0);
     PLDBGMODE : in std_logic_vector(2 downto 0);
     PLDIRECTEDLINKAUTON : in std_ulogic;
     PLDIRECTEDLINKCHANGE : in std_logic_vector(1 downto 0);
     PLDIRECTEDLINKSPEED : in std_ulogic;
     PLDIRECTEDLINKWIDTH : in std_logic_vector(1 downto 0);
     PLDIRECTEDLTSSMNEW : in std_logic_vector(5 downto 0);
     PLDIRECTEDLTSSMNEWVLD : in std_ulogic;
     PLDIRECTEDLTSSMSTALL : in std_ulogic;
     PLDOWNSTREAMDEEMPHSOURCE : in std_ulogic;
     PLRSTN : in std_ulogic;
     PLTRANSMITHOTRST : in std_ulogic;
     PLUPSTREAMPREFERDEEMPH : in std_ulogic;
     SYSRSTN : in std_ulogic;
     TL2ASPMSUSPENDCREDITCHECK : in std_ulogic;
     TL2PPMSUSPENDREQ : in std_ulogic;
     TLRSTN : in std_ulogic;
     TRNFCSEL : in std_logic_vector(2 downto 0);
     TRNRDSTRDY : in std_ulogic;
     TRNRFCPRET : in std_ulogic;
     TRNRNPOK : in std_ulogic;
     TRNRNPREQ : in std_ulogic;
     TRNTCFGGNT : in std_ulogic;
     TRNTD : in std_logic_vector(127 downto 0);
     TRNTDLLPDATA : in std_logic_vector(31 downto 0);
     TRNTDLLPSRCRDY : in std_ulogic;
     TRNTECRCGEN : in std_ulogic;
     TRNTEOF : in std_ulogic;
     TRNTERRFWD : in std_ulogic;
     TRNTREM : in std_logic_vector(1 downto 0);
     TRNTSOF : in std_ulogic;
     TRNTSRCDSC : in std_ulogic;
     TRNTSRCRDY : in std_ulogic;
     TRNTSTR : in std_ulogic;
     USERCLK : in std_ulogic;
     USERCLK2 : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  PCIE_2_1 : component is "PRIMITIVE";

----- component PCIE_3_0 -----
component PCIE_3_0
  generic (
     ARI_CAP_ENABLE : string := "FALSE";
     AXISTEN_IF_CC_ALIGNMENT_MODE : string := "FALSE";
     AXISTEN_IF_CC_PARITY_CHK : string := "TRUE";
     AXISTEN_IF_CQ_ALIGNMENT_MODE : string := "FALSE";
     AXISTEN_IF_ENABLE_CLIENT_TAG : string := "FALSE";
     AXISTEN_IF_ENABLE_MSG_ROUTE : bit_vector := X"00000";
     AXISTEN_IF_ENABLE_RX_MSG_INTFC : string := "FALSE";
     AXISTEN_IF_RC_ALIGNMENT_MODE : string := "FALSE";
     AXISTEN_IF_RC_STRADDLE : string := "FALSE";
     AXISTEN_IF_RQ_ALIGNMENT_MODE : string := "FALSE";
     AXISTEN_IF_RQ_PARITY_CHK : string := "TRUE";
     AXISTEN_IF_WIDTH : bit_vector := X"2";
     CRM_CORE_CLK_FREQ_500 : string := "TRUE";
     CRM_USER_CLK_FREQ : bit_vector := X"2";
     DNSTREAM_LINK_NUM : bit_vector := X"00";
     GEN3_PCS_AUTO_REALIGN : bit_vector := X"1";
     GEN3_PCS_RX_ELECIDLE_INTERNAL : string := "TRUE";
     LL_ACK_TIMEOUT : bit_vector := X"000";
     LL_ACK_TIMEOUT_EN : string := "FALSE";
     LL_ACK_TIMEOUT_FUNC : integer := 0;
     LL_CPL_FC_UPDATE_TIMER : bit_vector := X"0000";
     LL_CPL_FC_UPDATE_TIMER_OVERRIDE : string := "FALSE";
     LL_FC_UPDATE_TIMER : bit_vector := X"0000";
     LL_FC_UPDATE_TIMER_OVERRIDE : string := "FALSE";
     LL_NP_FC_UPDATE_TIMER : bit_vector := X"0000";
     LL_NP_FC_UPDATE_TIMER_OVERRIDE : string := "FALSE";
     LL_P_FC_UPDATE_TIMER : bit_vector := X"0000";
     LL_P_FC_UPDATE_TIMER_OVERRIDE : string := "FALSE";
     LL_REPLAY_TIMEOUT : bit_vector := X"000";
     LL_REPLAY_TIMEOUT_EN : string := "FALSE";
     LL_REPLAY_TIMEOUT_FUNC : integer := 0;
     LTR_TX_MESSAGE_MINIMUM_INTERVAL : bit_vector := X"0FA";
     LTR_TX_MESSAGE_ON_FUNC_POWER_STATE_CHANGE : string := "FALSE";
     LTR_TX_MESSAGE_ON_LTR_ENABLE : string := "FALSE";
     PF0_AER_CAP_ECRC_CHECK_CAPABLE : string := "FALSE";
     PF0_AER_CAP_ECRC_GEN_CAPABLE : string := "FALSE";
     PF0_AER_CAP_NEXTPTR : bit_vector := X"000";
     PF0_ARI_CAP_NEXTPTR : bit_vector := X"000";
     PF0_ARI_CAP_NEXT_FUNC : bit_vector := X"00";
     PF0_ARI_CAP_VER : bit_vector := X"1";
     PF0_BAR0_APERTURE_SIZE : bit_vector := X"03";
     PF0_BAR0_CONTROL : bit_vector := X"4";
     PF0_BAR1_APERTURE_SIZE : bit_vector := X"00";
     PF0_BAR1_CONTROL : bit_vector := X"0";
     PF0_BAR2_APERTURE_SIZE : bit_vector := X"03";
     PF0_BAR2_CONTROL : bit_vector := X"4";
     PF0_BAR3_APERTURE_SIZE : bit_vector := X"03";
     PF0_BAR3_CONTROL : bit_vector := X"0";
     PF0_BAR4_APERTURE_SIZE : bit_vector := X"03";
     PF0_BAR4_CONTROL : bit_vector := X"4";
     PF0_BAR5_APERTURE_SIZE : bit_vector := X"03";
     PF0_BAR5_CONTROL : bit_vector := X"0";
     PF0_BIST_REGISTER : bit_vector := X"00";
     PF0_CAPABILITY_POINTER : bit_vector := X"50";
     PF0_CLASS_CODE : bit_vector := X"000000";
     PF0_DEVICE_ID : bit_vector := X"0000";
     PF0_DEV_CAP2_128B_CAS_ATOMIC_COMPLETER_SUPPORT : string := "TRUE";
     PF0_DEV_CAP2_32B_ATOMIC_COMPLETER_SUPPORT : string := "TRUE";
     PF0_DEV_CAP2_64B_ATOMIC_COMPLETER_SUPPORT : string := "TRUE";
     PF0_DEV_CAP2_CPL_TIMEOUT_DISABLE : string := "TRUE";
     PF0_DEV_CAP2_LTR_SUPPORT : string := "TRUE";
     PF0_DEV_CAP2_OBFF_SUPPORT : bit_vector := X"0";
     PF0_DEV_CAP2_TPH_COMPLETER_SUPPORT : string := "FALSE";
     PF0_DEV_CAP_ENDPOINT_L0S_LATENCY : integer := 0;
     PF0_DEV_CAP_ENDPOINT_L1_LATENCY : integer := 0;
     PF0_DEV_CAP_EXT_TAG_SUPPORTED : string := "TRUE";
     PF0_DEV_CAP_FUNCTION_LEVEL_RESET_CAPABLE : string := "TRUE";
     PF0_DEV_CAP_MAX_PAYLOAD_SIZE : bit_vector := X"3";
     PF0_DPA_CAP_NEXTPTR : bit_vector := X"000";
     PF0_DPA_CAP_SUB_STATE_CONTROL : bit_vector := X"00";
     PF0_DPA_CAP_SUB_STATE_CONTROL_EN : string := "TRUE";
     PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION0 : bit_vector := X"00";
     PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION1 : bit_vector := X"00";
     PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION2 : bit_vector := X"00";
     PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION3 : bit_vector := X"00";
     PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION4 : bit_vector := X"00";
     PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION5 : bit_vector := X"00";
     PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION6 : bit_vector := X"00";
     PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION7 : bit_vector := X"00";
     PF0_DPA_CAP_VER : bit_vector := X"1";
     PF0_DSN_CAP_NEXTPTR : bit_vector := X"10C";
     PF0_EXPANSION_ROM_APERTURE_SIZE : bit_vector := X"03";
     PF0_EXPANSION_ROM_ENABLE : string := "FALSE";
     PF0_INTERRUPT_LINE : bit_vector := X"00";
     PF0_INTERRUPT_PIN : bit_vector := X"1";
     PF0_LINK_CAP_ASPM_SUPPORT : integer := 0;
     PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN1 : integer := 7;
     PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN2 : integer := 7;
     PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN3 : integer := 7;
     PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN1 : integer := 7;
     PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN2 : integer := 7;
     PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN3 : integer := 7;
     PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN1 : integer := 7;
     PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN2 : integer := 7;
     PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN3 : integer := 7;
     PF0_LINK_CAP_L1_EXIT_LATENCY_GEN1 : integer := 7;
     PF0_LINK_CAP_L1_EXIT_LATENCY_GEN2 : integer := 7;
     PF0_LINK_CAP_L1_EXIT_LATENCY_GEN3 : integer := 7;
     PF0_LINK_STATUS_SLOT_CLOCK_CONFIG : string := "TRUE";
     PF0_LTR_CAP_MAX_NOSNOOP_LAT : bit_vector := X"000";
     PF0_LTR_CAP_MAX_SNOOP_LAT : bit_vector := X"000";
     PF0_LTR_CAP_NEXTPTR : bit_vector := X"000";
     PF0_LTR_CAP_VER : bit_vector := X"1";
     PF0_MSIX_CAP_NEXTPTR : bit_vector := X"00";
     PF0_MSIX_CAP_PBA_BIR : integer := 0;
     PF0_MSIX_CAP_PBA_OFFSET : bit_vector := X"00000050";
     PF0_MSIX_CAP_TABLE_BIR : integer := 0;
     PF0_MSIX_CAP_TABLE_OFFSET : bit_vector := X"00000040";
     PF0_MSIX_CAP_TABLE_SIZE : bit_vector := X"000";
     PF0_MSI_CAP_MULTIMSGCAP : integer := 0;
     PF0_MSI_CAP_NEXTPTR : bit_vector := X"00";
     PF0_PB_CAP_NEXTPTR : bit_vector := X"000";
     PF0_PB_CAP_SYSTEM_ALLOCATED : string := "FALSE";
     PF0_PB_CAP_VER : bit_vector := X"1";
     PF0_PM_CAP_ID : bit_vector := X"01";
     PF0_PM_CAP_NEXTPTR : bit_vector := X"00";
     PF0_PM_CAP_PMESUPPORT_D0 : string := "TRUE";
     PF0_PM_CAP_PMESUPPORT_D1 : string := "TRUE";
     PF0_PM_CAP_PMESUPPORT_D3HOT : string := "TRUE";
     PF0_PM_CAP_SUPP_D1_STATE : string := "TRUE";
     PF0_PM_CAP_VER_ID : bit_vector := X"3";
     PF0_PM_CSR_NOSOFTRESET : string := "TRUE";
     PF0_RBAR_CAP_ENABLE : string := "FALSE";
     PF0_RBAR_CAP_INDEX0 : bit_vector := X"0";
     PF0_RBAR_CAP_INDEX1 : bit_vector := X"0";
     PF0_RBAR_CAP_INDEX2 : bit_vector := X"0";
     PF0_RBAR_CAP_NEXTPTR : bit_vector := X"000";
     PF0_RBAR_CAP_SIZE0 : bit_vector := X"00000";
     PF0_RBAR_CAP_SIZE1 : bit_vector := X"00000";
     PF0_RBAR_CAP_SIZE2 : bit_vector := X"00000";
     PF0_RBAR_CAP_VER : bit_vector := X"1";
     PF0_RBAR_NUM : bit_vector := X"1";
     PF0_REVISION_ID : bit_vector := X"00";
     PF0_SRIOV_BAR0_APERTURE_SIZE : bit_vector := X"03";
     PF0_SRIOV_BAR0_CONTROL : bit_vector := X"4";
     PF0_SRIOV_BAR1_APERTURE_SIZE : bit_vector := X"00";
     PF0_SRIOV_BAR1_CONTROL : bit_vector := X"0";
     PF0_SRIOV_BAR2_APERTURE_SIZE : bit_vector := X"03";
     PF0_SRIOV_BAR2_CONTROL : bit_vector := X"4";
     PF0_SRIOV_BAR3_APERTURE_SIZE : bit_vector := X"03";
     PF0_SRIOV_BAR3_CONTROL : bit_vector := X"0";
     PF0_SRIOV_BAR4_APERTURE_SIZE : bit_vector := X"03";
     PF0_SRIOV_BAR4_CONTROL : bit_vector := X"4";
     PF0_SRIOV_BAR5_APERTURE_SIZE : bit_vector := X"03";
     PF0_SRIOV_BAR5_CONTROL : bit_vector := X"0";
     PF0_SRIOV_CAP_INITIAL_VF : bit_vector := X"0000";
     PF0_SRIOV_CAP_NEXTPTR : bit_vector := X"000";
     PF0_SRIOV_CAP_TOTAL_VF : bit_vector := X"0000";
     PF0_SRIOV_CAP_VER : bit_vector := X"1";
     PF0_SRIOV_FIRST_VF_OFFSET : bit_vector := X"0000";
     PF0_SRIOV_FUNC_DEP_LINK : bit_vector := X"0000";
     PF0_SRIOV_SUPPORTED_PAGE_SIZE : bit_vector := X"00000000";
     PF0_SRIOV_VF_DEVICE_ID : bit_vector := X"0000";
     PF0_SUBSYSTEM_ID : bit_vector := X"0000";
     PF0_TPHR_CAP_DEV_SPECIFIC_MODE : string := "TRUE";
     PF0_TPHR_CAP_ENABLE : string := "FALSE";
     PF0_TPHR_CAP_INT_VEC_MODE : string := "TRUE";
     PF0_TPHR_CAP_NEXTPTR : bit_vector := X"000";
     PF0_TPHR_CAP_ST_MODE_SEL : bit_vector := X"0";
     PF0_TPHR_CAP_ST_TABLE_LOC : bit_vector := X"0";
     PF0_TPHR_CAP_ST_TABLE_SIZE : bit_vector := X"000";
     PF0_TPHR_CAP_VER : bit_vector := X"1";
     PF0_VC_CAP_NEXTPTR : bit_vector := X"000";
     PF0_VC_CAP_VER : bit_vector := X"1";
     PF1_AER_CAP_ECRC_CHECK_CAPABLE : string := "FALSE";
     PF1_AER_CAP_ECRC_GEN_CAPABLE : string := "FALSE";
     PF1_AER_CAP_NEXTPTR : bit_vector := X"000";
     PF1_ARI_CAP_NEXTPTR : bit_vector := X"000";
     PF1_ARI_CAP_NEXT_FUNC : bit_vector := X"00";
     PF1_BAR0_APERTURE_SIZE : bit_vector := X"03";
     PF1_BAR0_CONTROL : bit_vector := X"4";
     PF1_BAR1_APERTURE_SIZE : bit_vector := X"00";
     PF1_BAR1_CONTROL : bit_vector := X"0";
     PF1_BAR2_APERTURE_SIZE : bit_vector := X"03";
     PF1_BAR2_CONTROL : bit_vector := X"4";
     PF1_BAR3_APERTURE_SIZE : bit_vector := X"03";
     PF1_BAR3_CONTROL : bit_vector := X"0";
     PF1_BAR4_APERTURE_SIZE : bit_vector := X"03";
     PF1_BAR4_CONTROL : bit_vector := X"4";
     PF1_BAR5_APERTURE_SIZE : bit_vector := X"03";
     PF1_BAR5_CONTROL : bit_vector := X"0";
     PF1_BIST_REGISTER : bit_vector := X"00";
     PF1_CAPABILITY_POINTER : bit_vector := X"50";
     PF1_CLASS_CODE : bit_vector := X"000000";
     PF1_DEVICE_ID : bit_vector := X"0000";
     PF1_DEV_CAP_MAX_PAYLOAD_SIZE : bit_vector := X"3";
     PF1_DPA_CAP_NEXTPTR : bit_vector := X"000";
     PF1_DPA_CAP_SUB_STATE_CONTROL : bit_vector := X"00";
     PF1_DPA_CAP_SUB_STATE_CONTROL_EN : string := "TRUE";
     PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION0 : bit_vector := X"00";
     PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION1 : bit_vector := X"00";
     PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION2 : bit_vector := X"00";
     PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION3 : bit_vector := X"00";
     PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION4 : bit_vector := X"00";
     PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION5 : bit_vector := X"00";
     PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION6 : bit_vector := X"00";
     PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION7 : bit_vector := X"00";
     PF1_DPA_CAP_VER : bit_vector := X"1";
     PF1_DSN_CAP_NEXTPTR : bit_vector := X"10C";
     PF1_EXPANSION_ROM_APERTURE_SIZE : bit_vector := X"03";
     PF1_EXPANSION_ROM_ENABLE : string := "FALSE";
     PF1_INTERRUPT_LINE : bit_vector := X"00";
     PF1_INTERRUPT_PIN : bit_vector := X"1";
     PF1_MSIX_CAP_NEXTPTR : bit_vector := X"00";
     PF1_MSIX_CAP_PBA_BIR : integer := 0;
     PF1_MSIX_CAP_PBA_OFFSET : bit_vector := X"00000050";
     PF1_MSIX_CAP_TABLE_BIR : integer := 0;
     PF1_MSIX_CAP_TABLE_OFFSET : bit_vector := X"00000040";
     PF1_MSIX_CAP_TABLE_SIZE : bit_vector := X"000";
     PF1_MSI_CAP_MULTIMSGCAP : integer := 0;
     PF1_MSI_CAP_NEXTPTR : bit_vector := X"00";
     PF1_PB_CAP_NEXTPTR : bit_vector := X"000";
     PF1_PB_CAP_SYSTEM_ALLOCATED : string := "FALSE";
     PF1_PB_CAP_VER : bit_vector := X"1";
     PF1_PM_CAP_ID : bit_vector := X"01";
     PF1_PM_CAP_NEXTPTR : bit_vector := X"00";
     PF1_PM_CAP_VER_ID : bit_vector := X"3";
     PF1_RBAR_CAP_ENABLE : string := "FALSE";
     PF1_RBAR_CAP_INDEX0 : bit_vector := X"0";
     PF1_RBAR_CAP_INDEX1 : bit_vector := X"0";
     PF1_RBAR_CAP_INDEX2 : bit_vector := X"0";
     PF1_RBAR_CAP_NEXTPTR : bit_vector := X"000";
     PF1_RBAR_CAP_SIZE0 : bit_vector := X"00000";
     PF1_RBAR_CAP_SIZE1 : bit_vector := X"00000";
     PF1_RBAR_CAP_SIZE2 : bit_vector := X"00000";
     PF1_RBAR_CAP_VER : bit_vector := X"1";
     PF1_RBAR_NUM : bit_vector := X"1";
     PF1_REVISION_ID : bit_vector := X"00";
     PF1_SRIOV_BAR0_APERTURE_SIZE : bit_vector := X"03";
     PF1_SRIOV_BAR0_CONTROL : bit_vector := X"4";
     PF1_SRIOV_BAR1_APERTURE_SIZE : bit_vector := X"00";
     PF1_SRIOV_BAR1_CONTROL : bit_vector := X"0";
     PF1_SRIOV_BAR2_APERTURE_SIZE : bit_vector := X"03";
     PF1_SRIOV_BAR2_CONTROL : bit_vector := X"4";
     PF1_SRIOV_BAR3_APERTURE_SIZE : bit_vector := X"03";
     PF1_SRIOV_BAR3_CONTROL : bit_vector := X"0";
     PF1_SRIOV_BAR4_APERTURE_SIZE : bit_vector := X"03";
     PF1_SRIOV_BAR4_CONTROL : bit_vector := X"4";
     PF1_SRIOV_BAR5_APERTURE_SIZE : bit_vector := X"03";
     PF1_SRIOV_BAR5_CONTROL : bit_vector := X"0";
     PF1_SRIOV_CAP_INITIAL_VF : bit_vector := X"0000";
     PF1_SRIOV_CAP_NEXTPTR : bit_vector := X"000";
     PF1_SRIOV_CAP_TOTAL_VF : bit_vector := X"0000";
     PF1_SRIOV_CAP_VER : bit_vector := X"1";
     PF1_SRIOV_FIRST_VF_OFFSET : bit_vector := X"0000";
     PF1_SRIOV_FUNC_DEP_LINK : bit_vector := X"0000";
     PF1_SRIOV_SUPPORTED_PAGE_SIZE : bit_vector := X"00000000";
     PF1_SRIOV_VF_DEVICE_ID : bit_vector := X"0000";
     PF1_SUBSYSTEM_ID : bit_vector := X"0000";
     PF1_TPHR_CAP_DEV_SPECIFIC_MODE : string := "TRUE";
     PF1_TPHR_CAP_ENABLE : string := "FALSE";
     PF1_TPHR_CAP_INT_VEC_MODE : string := "TRUE";
     PF1_TPHR_CAP_NEXTPTR : bit_vector := X"000";
     PF1_TPHR_CAP_ST_MODE_SEL : bit_vector := X"0";
     PF1_TPHR_CAP_ST_TABLE_LOC : bit_vector := X"0";
     PF1_TPHR_CAP_ST_TABLE_SIZE : bit_vector := X"000";
     PF1_TPHR_CAP_VER : bit_vector := X"1";
     PL_DISABLE_EI_INFER_IN_L0 : string := "FALSE";
     PL_DISABLE_GEN3_DC_BALANCE : string := "FALSE";
     PL_DISABLE_SCRAMBLING : string := "FALSE";
     PL_DISABLE_UPCONFIG_CAPABLE : string := "FALSE";
     PL_EQ_ADAPT_DISABLE_COEFF_CHECK : string := "FALSE";
     PL_EQ_ADAPT_DISABLE_PRESET_CHECK : string := "FALSE";
     PL_EQ_ADAPT_ITER_COUNT : bit_vector := X"02";
     PL_EQ_ADAPT_REJECT_RETRY_COUNT : bit_vector := X"1";
     PL_EQ_BYPASS_PHASE23 : string := "FALSE";
     PL_EQ_SHORT_ADAPT_PHASE : string := "FALSE";
     PL_LANE0_EQ_CONTROL : bit_vector := X"3F00";
     PL_LANE1_EQ_CONTROL : bit_vector := X"3F00";
     PL_LANE2_EQ_CONTROL : bit_vector := X"3F00";
     PL_LANE3_EQ_CONTROL : bit_vector := X"3F00";
     PL_LANE4_EQ_CONTROL : bit_vector := X"3F00";
     PL_LANE5_EQ_CONTROL : bit_vector := X"3F00";
     PL_LANE6_EQ_CONTROL : bit_vector := X"3F00";
     PL_LANE7_EQ_CONTROL : bit_vector := X"3F00";
     PL_LINK_CAP_MAX_LINK_SPEED : bit_vector := X"4";
     PL_LINK_CAP_MAX_LINK_WIDTH : bit_vector := X"8";
     PL_N_FTS_COMCLK_GEN1 : integer := 255;
     PL_N_FTS_COMCLK_GEN2 : integer := 255;
     PL_N_FTS_COMCLK_GEN3 : integer := 255;
     PL_N_FTS_GEN1 : integer := 255;
     PL_N_FTS_GEN2 : integer := 255;
     PL_N_FTS_GEN3 : integer := 255;
     PL_SIM_FAST_LINK_TRAINING : string := "FALSE";
     PL_UPSTREAM_FACING : string := "TRUE";
     PM_ASPML0S_TIMEOUT : bit_vector := X"05DC";
     PM_ASPML1_ENTRY_DELAY : bit_vector := X"00000";
     PM_ENABLE_SLOT_POWER_CAPTURE : string := "TRUE";
     PM_L1_REENTRY_DELAY : bit_vector := X"00000000";
     PM_PME_SERVICE_TIMEOUT_DELAY : bit_vector := X"186A0";
     PM_PME_TURNOFF_ACK_DELAY : bit_vector := X"0064";
     SIM_VERSION : string := "1.0";
     SPARE_BIT0 : integer := 0;
     SPARE_BIT1 : integer := 0;
     SPARE_BIT2 : integer := 0;
     SPARE_BIT3 : integer := 0;
     SPARE_BIT4 : integer := 0;
     SPARE_BIT5 : integer := 0;
     SPARE_BIT6 : integer := 0;
     SPARE_BIT7 : integer := 0;
     SPARE_BIT8 : integer := 0;
     SPARE_BYTE0 : bit_vector := X"00";
     SPARE_BYTE1 : bit_vector := X"00";
     SPARE_BYTE2 : bit_vector := X"00";
     SPARE_BYTE3 : bit_vector := X"00";
     SPARE_WORD0 : bit_vector := X"00000000";
     SPARE_WORD1 : bit_vector := X"00000000";
     SPARE_WORD2 : bit_vector := X"00000000";
     SPARE_WORD3 : bit_vector := X"00000000";
     SRIOV_CAP_ENABLE : string := "FALSE";
     TL_COMPL_TIMEOUT_REG0 : bit_vector := X"BEBC20";
     TL_COMPL_TIMEOUT_REG1 : bit_vector := X"0000000";
     TL_CREDITS_CD : bit_vector := X"3E0";
     TL_CREDITS_CH : bit_vector := X"20";
     TL_CREDITS_NPD : bit_vector := X"028";
     TL_CREDITS_NPH : bit_vector := X"20";
     TL_CREDITS_PD : bit_vector := X"198";
     TL_CREDITS_PH : bit_vector := X"20";
     TL_ENABLE_MESSAGE_RID_CHECK_ENABLE : string := "TRUE";
     TL_EXTENDED_CFG_EXTEND_INTERFACE_ENABLE : string := "FALSE";
     TL_LEGACY_CFG_EXTEND_INTERFACE_ENABLE : string := "FALSE";
     TL_LEGACY_MODE_ENABLE : string := "FALSE";
     TL_PF_ENABLE_REG : string := "FALSE";
     TL_TAG_MGMT_ENABLE : string := "TRUE";
     VF0_ARI_CAP_NEXTPTR : bit_vector := X"000";
     VF0_CAPABILITY_POINTER : bit_vector := X"50";
     VF0_MSIX_CAP_PBA_BIR : integer := 0;
     VF0_MSIX_CAP_PBA_OFFSET : bit_vector := X"00000050";
     VF0_MSIX_CAP_TABLE_BIR : integer := 0;
     VF0_MSIX_CAP_TABLE_OFFSET : bit_vector := X"00000040";
     VF0_MSIX_CAP_TABLE_SIZE : bit_vector := X"000";
     VF0_MSI_CAP_MULTIMSGCAP : integer := 0;
     VF0_PM_CAP_ID : bit_vector := X"01";
     VF0_PM_CAP_NEXTPTR : bit_vector := X"00";
     VF0_PM_CAP_VER_ID : bit_vector := X"3";
     VF0_TPHR_CAP_DEV_SPECIFIC_MODE : string := "TRUE";
     VF0_TPHR_CAP_ENABLE : string := "FALSE";
     VF0_TPHR_CAP_INT_VEC_MODE : string := "TRUE";
     VF0_TPHR_CAP_NEXTPTR : bit_vector := X"000";
     VF0_TPHR_CAP_ST_MODE_SEL : bit_vector := X"0";
     VF0_TPHR_CAP_ST_TABLE_LOC : bit_vector := X"0";
     VF0_TPHR_CAP_ST_TABLE_SIZE : bit_vector := X"000";
     VF0_TPHR_CAP_VER : bit_vector := X"1";
     VF1_ARI_CAP_NEXTPTR : bit_vector := X"000";
     VF1_MSIX_CAP_PBA_BIR : integer := 0;
     VF1_MSIX_CAP_PBA_OFFSET : bit_vector := X"00000050";
     VF1_MSIX_CAP_TABLE_BIR : integer := 0;
     VF1_MSIX_CAP_TABLE_OFFSET : bit_vector := X"00000040";
     VF1_MSIX_CAP_TABLE_SIZE : bit_vector := X"000";
     VF1_MSI_CAP_MULTIMSGCAP : integer := 0;
     VF1_PM_CAP_ID : bit_vector := X"01";
     VF1_PM_CAP_NEXTPTR : bit_vector := X"00";
     VF1_PM_CAP_VER_ID : bit_vector := X"3";
     VF1_TPHR_CAP_DEV_SPECIFIC_MODE : string := "TRUE";
     VF1_TPHR_CAP_ENABLE : string := "FALSE";
     VF1_TPHR_CAP_INT_VEC_MODE : string := "TRUE";
     VF1_TPHR_CAP_NEXTPTR : bit_vector := X"000";
     VF1_TPHR_CAP_ST_MODE_SEL : bit_vector := X"0";
     VF1_TPHR_CAP_ST_TABLE_LOC : bit_vector := X"0";
     VF1_TPHR_CAP_ST_TABLE_SIZE : bit_vector := X"000";
     VF1_TPHR_CAP_VER : bit_vector := X"1";
     VF2_ARI_CAP_NEXTPTR : bit_vector := X"000";
     VF2_MSIX_CAP_PBA_BIR : integer := 0;
     VF2_MSIX_CAP_PBA_OFFSET : bit_vector := X"00000050";
     VF2_MSIX_CAP_TABLE_BIR : integer := 0;
     VF2_MSIX_CAP_TABLE_OFFSET : bit_vector := X"00000040";
     VF2_MSIX_CAP_TABLE_SIZE : bit_vector := X"000";
     VF2_MSI_CAP_MULTIMSGCAP : integer := 0;
     VF2_PM_CAP_ID : bit_vector := X"01";
     VF2_PM_CAP_NEXTPTR : bit_vector := X"00";
     VF2_PM_CAP_VER_ID : bit_vector := X"3";
     VF2_TPHR_CAP_DEV_SPECIFIC_MODE : string := "TRUE";
     VF2_TPHR_CAP_ENABLE : string := "FALSE";
     VF2_TPHR_CAP_INT_VEC_MODE : string := "TRUE";
     VF2_TPHR_CAP_NEXTPTR : bit_vector := X"000";
     VF2_TPHR_CAP_ST_MODE_SEL : bit_vector := X"0";
     VF2_TPHR_CAP_ST_TABLE_LOC : bit_vector := X"0";
     VF2_TPHR_CAP_ST_TABLE_SIZE : bit_vector := X"000";
     VF2_TPHR_CAP_VER : bit_vector := X"1";
     VF3_ARI_CAP_NEXTPTR : bit_vector := X"000";
     VF3_MSIX_CAP_PBA_BIR : integer := 0;
     VF3_MSIX_CAP_PBA_OFFSET : bit_vector := X"00000050";
     VF3_MSIX_CAP_TABLE_BIR : integer := 0;
     VF3_MSIX_CAP_TABLE_OFFSET : bit_vector := X"00000040";
     VF3_MSIX_CAP_TABLE_SIZE : bit_vector := X"000";
     VF3_MSI_CAP_MULTIMSGCAP : integer := 0;
     VF3_PM_CAP_ID : bit_vector := X"01";
     VF3_PM_CAP_NEXTPTR : bit_vector := X"00";
     VF3_PM_CAP_VER_ID : bit_vector := X"3";
     VF3_TPHR_CAP_DEV_SPECIFIC_MODE : string := "TRUE";
     VF3_TPHR_CAP_ENABLE : string := "FALSE";
     VF3_TPHR_CAP_INT_VEC_MODE : string := "TRUE";
     VF3_TPHR_CAP_NEXTPTR : bit_vector := X"000";
     VF3_TPHR_CAP_ST_MODE_SEL : bit_vector := X"0";
     VF3_TPHR_CAP_ST_TABLE_LOC : bit_vector := X"0";
     VF3_TPHR_CAP_ST_TABLE_SIZE : bit_vector := X"000";
     VF3_TPHR_CAP_VER : bit_vector := X"1";
     VF4_ARI_CAP_NEXTPTR : bit_vector := X"000";
     VF4_MSIX_CAP_PBA_BIR : integer := 0;
     VF4_MSIX_CAP_PBA_OFFSET : bit_vector := X"00000050";
     VF4_MSIX_CAP_TABLE_BIR : integer := 0;
     VF4_MSIX_CAP_TABLE_OFFSET : bit_vector := X"00000040";
     VF4_MSIX_CAP_TABLE_SIZE : bit_vector := X"000";
     VF4_MSI_CAP_MULTIMSGCAP : integer := 0;
     VF4_PM_CAP_ID : bit_vector := X"01";
     VF4_PM_CAP_NEXTPTR : bit_vector := X"00";
     VF4_PM_CAP_VER_ID : bit_vector := X"3";
     VF4_TPHR_CAP_DEV_SPECIFIC_MODE : string := "TRUE";
     VF4_TPHR_CAP_ENABLE : string := "FALSE";
     VF4_TPHR_CAP_INT_VEC_MODE : string := "TRUE";
     VF4_TPHR_CAP_NEXTPTR : bit_vector := X"000";
     VF4_TPHR_CAP_ST_MODE_SEL : bit_vector := X"0";
     VF4_TPHR_CAP_ST_TABLE_LOC : bit_vector := X"0";
     VF4_TPHR_CAP_ST_TABLE_SIZE : bit_vector := X"000";
     VF4_TPHR_CAP_VER : bit_vector := X"1";
     VF5_ARI_CAP_NEXTPTR : bit_vector := X"000";
     VF5_MSIX_CAP_PBA_BIR : integer := 0;
     VF5_MSIX_CAP_PBA_OFFSET : bit_vector := X"00000050";
     VF5_MSIX_CAP_TABLE_BIR : integer := 0;
     VF5_MSIX_CAP_TABLE_OFFSET : bit_vector := X"00000040";
     VF5_MSIX_CAP_TABLE_SIZE : bit_vector := X"000";
     VF5_MSI_CAP_MULTIMSGCAP : integer := 0;
     VF5_PM_CAP_ID : bit_vector := X"01";
     VF5_PM_CAP_NEXTPTR : bit_vector := X"00";
     VF5_PM_CAP_VER_ID : bit_vector := X"3";
     VF5_TPHR_CAP_DEV_SPECIFIC_MODE : string := "TRUE";
     VF5_TPHR_CAP_ENABLE : string := "FALSE";
     VF5_TPHR_CAP_INT_VEC_MODE : string := "TRUE";
     VF5_TPHR_CAP_NEXTPTR : bit_vector := X"000";
     VF5_TPHR_CAP_ST_MODE_SEL : bit_vector := X"0";
     VF5_TPHR_CAP_ST_TABLE_LOC : bit_vector := X"0";
     VF5_TPHR_CAP_ST_TABLE_SIZE : bit_vector := X"000";
     VF5_TPHR_CAP_VER : bit_vector := X"1"
  );
  port (
     CFGCURRENTSPEED : out std_logic_vector(2 downto 0);
     CFGDPASUBSTATECHANGE : out std_logic_vector(1 downto 0);
     CFGERRCOROUT : out std_ulogic;
     CFGERRFATALOUT : out std_ulogic;
     CFGERRNONFATALOUT : out std_ulogic;
     CFGEXTFUNCTIONNUMBER : out std_logic_vector(7 downto 0);
     CFGEXTREADRECEIVED : out std_ulogic;
     CFGEXTREGISTERNUMBER : out std_logic_vector(9 downto 0);
     CFGEXTWRITEBYTEENABLE : out std_logic_vector(3 downto 0);
     CFGEXTWRITEDATA : out std_logic_vector(31 downto 0);
     CFGEXTWRITERECEIVED : out std_ulogic;
     CFGFCCPLD : out std_logic_vector(11 downto 0);
     CFGFCCPLH : out std_logic_vector(7 downto 0);
     CFGFCNPD : out std_logic_vector(11 downto 0);
     CFGFCNPH : out std_logic_vector(7 downto 0);
     CFGFCPD : out std_logic_vector(11 downto 0);
     CFGFCPH : out std_logic_vector(7 downto 0);
     CFGFLRINPROCESS : out std_logic_vector(1 downto 0);
     CFGFUNCTIONPOWERSTATE : out std_logic_vector(5 downto 0);
     CFGFUNCTIONSTATUS : out std_logic_vector(7 downto 0);
     CFGHOTRESETOUT : out std_ulogic;
     CFGINPUTUPDATEDONE : out std_ulogic;
     CFGINTERRUPTAOUTPUT : out std_ulogic;
     CFGINTERRUPTBOUTPUT : out std_ulogic;
     CFGINTERRUPTCOUTPUT : out std_ulogic;
     CFGINTERRUPTDOUTPUT : out std_ulogic;
     CFGINTERRUPTMSIDATA : out std_logic_vector(31 downto 0);
     CFGINTERRUPTMSIENABLE : out std_logic_vector(1 downto 0);
     CFGINTERRUPTMSIFAIL : out std_ulogic;
     CFGINTERRUPTMSIMASKUPDATE : out std_ulogic;
     CFGINTERRUPTMSIMMENABLE : out std_logic_vector(5 downto 0);
     CFGINTERRUPTMSISENT : out std_ulogic;
     CFGINTERRUPTMSIVFENABLE : out std_logic_vector(5 downto 0);
     CFGINTERRUPTMSIXENABLE : out std_logic_vector(1 downto 0);
     CFGINTERRUPTMSIXFAIL : out std_ulogic;
     CFGINTERRUPTMSIXMASK : out std_logic_vector(1 downto 0);
     CFGINTERRUPTMSIXSENT : out std_ulogic;
     CFGINTERRUPTMSIXVFENABLE : out std_logic_vector(5 downto 0);
     CFGINTERRUPTMSIXVFMASK : out std_logic_vector(5 downto 0);
     CFGINTERRUPTSENT : out std_ulogic;
     CFGLINKPOWERSTATE : out std_logic_vector(1 downto 0);
     CFGLOCALERROR : out std_ulogic;
     CFGLTRENABLE : out std_ulogic;
     CFGLTSSMSTATE : out std_logic_vector(5 downto 0);
     CFGMAXPAYLOAD : out std_logic_vector(2 downto 0);
     CFGMAXREADREQ : out std_logic_vector(2 downto 0);
     CFGMCUPDATEDONE : out std_ulogic;
     CFGMGMTREADDATA : out std_logic_vector(31 downto 0);
     CFGMGMTREADWRITEDONE : out std_ulogic;
     CFGMSGRECEIVED : out std_ulogic;
     CFGMSGRECEIVEDDATA : out std_logic_vector(7 downto 0);
     CFGMSGRECEIVEDTYPE : out std_logic_vector(4 downto 0);
     CFGMSGTRANSMITDONE : out std_ulogic;
     CFGNEGOTIATEDWIDTH : out std_logic_vector(3 downto 0);
     CFGOBFFENABLE : out std_logic_vector(1 downto 0);
     CFGPERFUNCSTATUSDATA : out std_logic_vector(15 downto 0);
     CFGPERFUNCTIONUPDATEDONE : out std_ulogic;
     CFGPHYLINKDOWN : out std_ulogic;
     CFGPHYLINKSTATUS : out std_logic_vector(1 downto 0);
     CFGPLSTATUSCHANGE : out std_ulogic;
     CFGPOWERSTATECHANGEINTERRUPT : out std_ulogic;
     CFGRCBSTATUS : out std_logic_vector(1 downto 0);
     CFGTPHFUNCTIONNUM : out std_logic_vector(2 downto 0);
     CFGTPHREQUESTERENABLE : out std_logic_vector(1 downto 0);
     CFGTPHSTMODE : out std_logic_vector(5 downto 0);
     CFGTPHSTTADDRESS : out std_logic_vector(4 downto 0);
     CFGTPHSTTREADENABLE : out std_ulogic;
     CFGTPHSTTWRITEBYTEVALID : out std_logic_vector(3 downto 0);
     CFGTPHSTTWRITEDATA : out std_logic_vector(31 downto 0);
     CFGTPHSTTWRITEENABLE : out std_ulogic;
     CFGVFFLRINPROCESS : out std_logic_vector(5 downto 0);
     CFGVFPOWERSTATE : out std_logic_vector(17 downto 0);
     CFGVFSTATUS : out std_logic_vector(11 downto 0);
     CFGVFTPHREQUESTERENABLE : out std_logic_vector(5 downto 0);
     CFGVFTPHSTMODE : out std_logic_vector(17 downto 0);
     DBGDATAOUT : out std_logic_vector(15 downto 0);
     DRPDO : out std_logic_vector(15 downto 0);
     DRPRDY : out std_ulogic;
     MAXISCQTDATA : out std_logic_vector(255 downto 0);
     MAXISCQTKEEP : out std_logic_vector(7 downto 0);
     MAXISCQTLAST : out std_ulogic;
     MAXISCQTUSER : out std_logic_vector(84 downto 0);
     MAXISCQTVALID : out std_ulogic;
     MAXISRCTDATA : out std_logic_vector(255 downto 0);
     MAXISRCTKEEP : out std_logic_vector(7 downto 0);
     MAXISRCTLAST : out std_ulogic;
     MAXISRCTUSER : out std_logic_vector(74 downto 0);
     MAXISRCTVALID : out std_ulogic;
     MICOMPLETIONRAMREADADDRESSAL : out std_logic_vector(9 downto 0);
     MICOMPLETIONRAMREADADDRESSAU : out std_logic_vector(9 downto 0);
     MICOMPLETIONRAMREADADDRESSBL : out std_logic_vector(9 downto 0);
     MICOMPLETIONRAMREADADDRESSBU : out std_logic_vector(9 downto 0);
     MICOMPLETIONRAMREADENABLEL : out std_logic_vector(3 downto 0);
     MICOMPLETIONRAMREADENABLEU : out std_logic_vector(3 downto 0);
     MICOMPLETIONRAMWRITEADDRESSAL : out std_logic_vector(9 downto 0);
     MICOMPLETIONRAMWRITEADDRESSAU : out std_logic_vector(9 downto 0);
     MICOMPLETIONRAMWRITEADDRESSBL : out std_logic_vector(9 downto 0);
     MICOMPLETIONRAMWRITEADDRESSBU : out std_logic_vector(9 downto 0);
     MICOMPLETIONRAMWRITEDATAL : out std_logic_vector(71 downto 0);
     MICOMPLETIONRAMWRITEDATAU : out std_logic_vector(71 downto 0);
     MICOMPLETIONRAMWRITEENABLEL : out std_logic_vector(3 downto 0);
     MICOMPLETIONRAMWRITEENABLEU : out std_logic_vector(3 downto 0);
     MIREPLAYRAMADDRESS : out std_logic_vector(8 downto 0);
     MIREPLAYRAMREADENABLE : out std_logic_vector(1 downto 0);
     MIREPLAYRAMWRITEDATA : out std_logic_vector(143 downto 0);
     MIREPLAYRAMWRITEENABLE : out std_logic_vector(1 downto 0);
     MIREQUESTRAMREADADDRESSA : out std_logic_vector(8 downto 0);
     MIREQUESTRAMREADADDRESSB : out std_logic_vector(8 downto 0);
     MIREQUESTRAMREADENABLE : out std_logic_vector(3 downto 0);
     MIREQUESTRAMWRITEADDRESSA : out std_logic_vector(8 downto 0);
     MIREQUESTRAMWRITEADDRESSB : out std_logic_vector(8 downto 0);
     MIREQUESTRAMWRITEDATA : out std_logic_vector(143 downto 0);
     MIREQUESTRAMWRITEENABLE : out std_logic_vector(3 downto 0);
     PCIECQNPREQCOUNT : out std_logic_vector(5 downto 0);
     PCIERQSEQNUM : out std_logic_vector(3 downto 0);
     PCIERQSEQNUMVLD : out std_ulogic;
     PCIERQTAG : out std_logic_vector(5 downto 0);
     PCIERQTAGAV : out std_logic_vector(1 downto 0);
     PCIERQTAGVLD : out std_ulogic;
     PCIETFCNPDAV : out std_logic_vector(1 downto 0);
     PCIETFCNPHAV : out std_logic_vector(1 downto 0);
     PIPERX0EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX0EQLPLFFS : out std_logic_vector(5 downto 0);
     PIPERX0EQLPTXPRESET : out std_logic_vector(3 downto 0);
     PIPERX0EQPRESET : out std_logic_vector(2 downto 0);
     PIPERX0POLARITY : out std_ulogic;
     PIPERX1EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX1EQLPLFFS : out std_logic_vector(5 downto 0);
     PIPERX1EQLPTXPRESET : out std_logic_vector(3 downto 0);
     PIPERX1EQPRESET : out std_logic_vector(2 downto 0);
     PIPERX1POLARITY : out std_ulogic;
     PIPERX2EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX2EQLPLFFS : out std_logic_vector(5 downto 0);
     PIPERX2EQLPTXPRESET : out std_logic_vector(3 downto 0);
     PIPERX2EQPRESET : out std_logic_vector(2 downto 0);
     PIPERX2POLARITY : out std_ulogic;
     PIPERX3EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX3EQLPLFFS : out std_logic_vector(5 downto 0);
     PIPERX3EQLPTXPRESET : out std_logic_vector(3 downto 0);
     PIPERX3EQPRESET : out std_logic_vector(2 downto 0);
     PIPERX3POLARITY : out std_ulogic;
     PIPERX4EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX4EQLPLFFS : out std_logic_vector(5 downto 0);
     PIPERX4EQLPTXPRESET : out std_logic_vector(3 downto 0);
     PIPERX4EQPRESET : out std_logic_vector(2 downto 0);
     PIPERX4POLARITY : out std_ulogic;
     PIPERX5EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX5EQLPLFFS : out std_logic_vector(5 downto 0);
     PIPERX5EQLPTXPRESET : out std_logic_vector(3 downto 0);
     PIPERX5EQPRESET : out std_logic_vector(2 downto 0);
     PIPERX5POLARITY : out std_ulogic;
     PIPERX6EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX6EQLPLFFS : out std_logic_vector(5 downto 0);
     PIPERX6EQLPTXPRESET : out std_logic_vector(3 downto 0);
     PIPERX6EQPRESET : out std_logic_vector(2 downto 0);
     PIPERX6POLARITY : out std_ulogic;
     PIPERX7EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX7EQLPLFFS : out std_logic_vector(5 downto 0);
     PIPERX7EQLPTXPRESET : out std_logic_vector(3 downto 0);
     PIPERX7EQPRESET : out std_logic_vector(2 downto 0);
     PIPERX7POLARITY : out std_ulogic;
     PIPETX0CHARISK : out std_logic_vector(1 downto 0);
     PIPETX0COMPLIANCE : out std_ulogic;
     PIPETX0DATA : out std_logic_vector(31 downto 0);
     PIPETX0DATAVALID : out std_ulogic;
     PIPETX0ELECIDLE : out std_ulogic;
     PIPETX0EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX0EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX0EQPRESET : out std_logic_vector(3 downto 0);
     PIPETX0POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX0STARTBLOCK : out std_ulogic;
     PIPETX0SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX1CHARISK : out std_logic_vector(1 downto 0);
     PIPETX1COMPLIANCE : out std_ulogic;
     PIPETX1DATA : out std_logic_vector(31 downto 0);
     PIPETX1DATAVALID : out std_ulogic;
     PIPETX1ELECIDLE : out std_ulogic;
     PIPETX1EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX1EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX1EQPRESET : out std_logic_vector(3 downto 0);
     PIPETX1POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX1STARTBLOCK : out std_ulogic;
     PIPETX1SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX2CHARISK : out std_logic_vector(1 downto 0);
     PIPETX2COMPLIANCE : out std_ulogic;
     PIPETX2DATA : out std_logic_vector(31 downto 0);
     PIPETX2DATAVALID : out std_ulogic;
     PIPETX2ELECIDLE : out std_ulogic;
     PIPETX2EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX2EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX2EQPRESET : out std_logic_vector(3 downto 0);
     PIPETX2POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX2STARTBLOCK : out std_ulogic;
     PIPETX2SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX3CHARISK : out std_logic_vector(1 downto 0);
     PIPETX3COMPLIANCE : out std_ulogic;
     PIPETX3DATA : out std_logic_vector(31 downto 0);
     PIPETX3DATAVALID : out std_ulogic;
     PIPETX3ELECIDLE : out std_ulogic;
     PIPETX3EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX3EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX3EQPRESET : out std_logic_vector(3 downto 0);
     PIPETX3POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX3STARTBLOCK : out std_ulogic;
     PIPETX3SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX4CHARISK : out std_logic_vector(1 downto 0);
     PIPETX4COMPLIANCE : out std_ulogic;
     PIPETX4DATA : out std_logic_vector(31 downto 0);
     PIPETX4DATAVALID : out std_ulogic;
     PIPETX4ELECIDLE : out std_ulogic;
     PIPETX4EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX4EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX4EQPRESET : out std_logic_vector(3 downto 0);
     PIPETX4POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX4STARTBLOCK : out std_ulogic;
     PIPETX4SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX5CHARISK : out std_logic_vector(1 downto 0);
     PIPETX5COMPLIANCE : out std_ulogic;
     PIPETX5DATA : out std_logic_vector(31 downto 0);
     PIPETX5DATAVALID : out std_ulogic;
     PIPETX5ELECIDLE : out std_ulogic;
     PIPETX5EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX5EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX5EQPRESET : out std_logic_vector(3 downto 0);
     PIPETX5POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX5STARTBLOCK : out std_ulogic;
     PIPETX5SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX6CHARISK : out std_logic_vector(1 downto 0);
     PIPETX6COMPLIANCE : out std_ulogic;
     PIPETX6DATA : out std_logic_vector(31 downto 0);
     PIPETX6DATAVALID : out std_ulogic;
     PIPETX6ELECIDLE : out std_ulogic;
     PIPETX6EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX6EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX6EQPRESET : out std_logic_vector(3 downto 0);
     PIPETX6POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX6STARTBLOCK : out std_ulogic;
     PIPETX6SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX7CHARISK : out std_logic_vector(1 downto 0);
     PIPETX7COMPLIANCE : out std_ulogic;
     PIPETX7DATA : out std_logic_vector(31 downto 0);
     PIPETX7DATAVALID : out std_ulogic;
     PIPETX7ELECIDLE : out std_ulogic;
     PIPETX7EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX7EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX7EQPRESET : out std_logic_vector(3 downto 0);
     PIPETX7POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX7STARTBLOCK : out std_ulogic;
     PIPETX7SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETXDEEMPH : out std_ulogic;
     PIPETXMARGIN : out std_logic_vector(2 downto 0);
     PIPETXRATE : out std_logic_vector(1 downto 0);
     PIPETXRCVRDET : out std_ulogic;
     PIPETXRESET : out std_ulogic;
     PIPETXSWING : out std_ulogic;
     PLEQINPROGRESS : out std_ulogic;
     PLEQPHASE : out std_logic_vector(1 downto 0);
     PLGEN3PCSRXSLIDE : out std_logic_vector(7 downto 0);
     SAXISCCTREADY : out std_logic_vector(3 downto 0);
     SAXISRQTREADY : out std_logic_vector(3 downto 0);
     CFGCONFIGSPACEENABLE : in std_ulogic;
     CFGDEVID : in std_logic_vector(15 downto 0);
     CFGDSBUSNUMBER : in std_logic_vector(7 downto 0);
     CFGDSDEVICENUMBER : in std_logic_vector(4 downto 0);
     CFGDSFUNCTIONNUMBER : in std_logic_vector(2 downto 0);
     CFGDSN : in std_logic_vector(63 downto 0);
     CFGDSPORTNUMBER : in std_logic_vector(7 downto 0);
     CFGERRCORIN : in std_ulogic;
     CFGERRUNCORIN : in std_ulogic;
     CFGEXTREADDATA : in std_logic_vector(31 downto 0);
     CFGEXTREADDATAVALID : in std_ulogic;
     CFGFCSEL : in std_logic_vector(2 downto 0);
     CFGFLRDONE : in std_logic_vector(1 downto 0);
     CFGHOTRESETIN : in std_ulogic;
     CFGINPUTUPDATEREQUEST : in std_ulogic;
     CFGINTERRUPTINT : in std_logic_vector(3 downto 0);
     CFGINTERRUPTMSIATTR : in std_logic_vector(2 downto 0);
     CFGINTERRUPTMSIFUNCTIONNUMBER : in std_logic_vector(2 downto 0);
     CFGINTERRUPTMSIINT : in std_logic_vector(31 downto 0);
     CFGINTERRUPTMSIPENDINGSTATUS : in std_logic_vector(63 downto 0);
     CFGINTERRUPTMSISELECT : in std_logic_vector(3 downto 0);
     CFGINTERRUPTMSITPHPRESENT : in std_ulogic;
     CFGINTERRUPTMSITPHSTTAG : in std_logic_vector(8 downto 0);
     CFGINTERRUPTMSITPHTYPE : in std_logic_vector(1 downto 0);
     CFGINTERRUPTMSIXADDRESS : in std_logic_vector(63 downto 0);
     CFGINTERRUPTMSIXDATA : in std_logic_vector(31 downto 0);
     CFGINTERRUPTMSIXINT : in std_ulogic;
     CFGINTERRUPTPENDING : in std_logic_vector(1 downto 0);
     CFGLINKTRAININGENABLE : in std_ulogic;
     CFGMCUPDATEREQUEST : in std_ulogic;
     CFGMGMTADDR : in std_logic_vector(18 downto 0);
     CFGMGMTBYTEENABLE : in std_logic_vector(3 downto 0);
     CFGMGMTREAD : in std_ulogic;
     CFGMGMTTYPE1CFGREGACCESS : in std_ulogic;
     CFGMGMTWRITE : in std_ulogic;
     CFGMGMTWRITEDATA : in std_logic_vector(31 downto 0);
     CFGMSGTRANSMIT : in std_ulogic;
     CFGMSGTRANSMITDATA : in std_logic_vector(31 downto 0);
     CFGMSGTRANSMITTYPE : in std_logic_vector(2 downto 0);
     CFGPERFUNCSTATUSCONTROL : in std_logic_vector(2 downto 0);
     CFGPERFUNCTIONNUMBER : in std_logic_vector(2 downto 0);
     CFGPERFUNCTIONOUTPUTREQUEST : in std_ulogic;
     CFGPOWERSTATECHANGEACK : in std_ulogic;
     CFGREQPMTRANSITIONL23READY : in std_ulogic;
     CFGREVID : in std_logic_vector(7 downto 0);
     CFGSUBSYSID : in std_logic_vector(15 downto 0);
     CFGSUBSYSVENDID : in std_logic_vector(15 downto 0);
     CFGTPHSTTREADDATA : in std_logic_vector(31 downto 0);
     CFGTPHSTTREADDATAVALID : in std_ulogic;
     CFGVENDID : in std_logic_vector(15 downto 0);
     CFGVFFLRDONE : in std_logic_vector(5 downto 0);
     CORECLK : in std_ulogic;
     CORECLKMICOMPLETIONRAML : in std_ulogic;
     CORECLKMICOMPLETIONRAMU : in std_ulogic;
     CORECLKMIREPLAYRAM : in std_ulogic;
     CORECLKMIREQUESTRAM : in std_ulogic;
     DRPADDR : in std_logic_vector(10 downto 0);
     DRPCLK : in std_ulogic;
     DRPDI : in std_logic_vector(15 downto 0);
     DRPEN : in std_ulogic;
     DRPWE : in std_ulogic;
     MAXISCQTREADY : in std_logic_vector(21 downto 0);
     MAXISRCTREADY : in std_logic_vector(21 downto 0);
     MGMTRESETN : in std_ulogic;
     MGMTSTICKYRESETN : in std_ulogic;
     MICOMPLETIONRAMREADDATA : in std_logic_vector(143 downto 0);
     MIREPLAYRAMREADDATA : in std_logic_vector(143 downto 0);
     MIREQUESTRAMREADDATA : in std_logic_vector(143 downto 0);
     PCIECQNPREQ : in std_ulogic;
     PIPECLK : in std_ulogic;
     PIPEEQFS : in std_logic_vector(5 downto 0);
     PIPEEQLF : in std_logic_vector(5 downto 0);
     PIPERESETN : in std_ulogic;
     PIPERX0CHARISK : in std_logic_vector(1 downto 0);
     PIPERX0DATA : in std_logic_vector(31 downto 0);
     PIPERX0DATAVALID : in std_ulogic;
     PIPERX0ELECIDLE : in std_ulogic;
     PIPERX0EQDONE : in std_ulogic;
     PIPERX0EQLPADAPTDONE : in std_ulogic;
     PIPERX0EQLPLFFSSEL : in std_ulogic;
     PIPERX0EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX0PHYSTATUS : in std_ulogic;
     PIPERX0STARTBLOCK : in std_ulogic;
     PIPERX0STATUS : in std_logic_vector(2 downto 0);
     PIPERX0SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX0VALID : in std_ulogic;
     PIPERX1CHARISK : in std_logic_vector(1 downto 0);
     PIPERX1DATA : in std_logic_vector(31 downto 0);
     PIPERX1DATAVALID : in std_ulogic;
     PIPERX1ELECIDLE : in std_ulogic;
     PIPERX1EQDONE : in std_ulogic;
     PIPERX1EQLPADAPTDONE : in std_ulogic;
     PIPERX1EQLPLFFSSEL : in std_ulogic;
     PIPERX1EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX1PHYSTATUS : in std_ulogic;
     PIPERX1STARTBLOCK : in std_ulogic;
     PIPERX1STATUS : in std_logic_vector(2 downto 0);
     PIPERX1SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX1VALID : in std_ulogic;
     PIPERX2CHARISK : in std_logic_vector(1 downto 0);
     PIPERX2DATA : in std_logic_vector(31 downto 0);
     PIPERX2DATAVALID : in std_ulogic;
     PIPERX2ELECIDLE : in std_ulogic;
     PIPERX2EQDONE : in std_ulogic;
     PIPERX2EQLPADAPTDONE : in std_ulogic;
     PIPERX2EQLPLFFSSEL : in std_ulogic;
     PIPERX2EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX2PHYSTATUS : in std_ulogic;
     PIPERX2STARTBLOCK : in std_ulogic;
     PIPERX2STATUS : in std_logic_vector(2 downto 0);
     PIPERX2SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX2VALID : in std_ulogic;
     PIPERX3CHARISK : in std_logic_vector(1 downto 0);
     PIPERX3DATA : in std_logic_vector(31 downto 0);
     PIPERX3DATAVALID : in std_ulogic;
     PIPERX3ELECIDLE : in std_ulogic;
     PIPERX3EQDONE : in std_ulogic;
     PIPERX3EQLPADAPTDONE : in std_ulogic;
     PIPERX3EQLPLFFSSEL : in std_ulogic;
     PIPERX3EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX3PHYSTATUS : in std_ulogic;
     PIPERX3STARTBLOCK : in std_ulogic;
     PIPERX3STATUS : in std_logic_vector(2 downto 0);
     PIPERX3SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX3VALID : in std_ulogic;
     PIPERX4CHARISK : in std_logic_vector(1 downto 0);
     PIPERX4DATA : in std_logic_vector(31 downto 0);
     PIPERX4DATAVALID : in std_ulogic;
     PIPERX4ELECIDLE : in std_ulogic;
     PIPERX4EQDONE : in std_ulogic;
     PIPERX4EQLPADAPTDONE : in std_ulogic;
     PIPERX4EQLPLFFSSEL : in std_ulogic;
     PIPERX4EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX4PHYSTATUS : in std_ulogic;
     PIPERX4STARTBLOCK : in std_ulogic;
     PIPERX4STATUS : in std_logic_vector(2 downto 0);
     PIPERX4SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX4VALID : in std_ulogic;
     PIPERX5CHARISK : in std_logic_vector(1 downto 0);
     PIPERX5DATA : in std_logic_vector(31 downto 0);
     PIPERX5DATAVALID : in std_ulogic;
     PIPERX5ELECIDLE : in std_ulogic;
     PIPERX5EQDONE : in std_ulogic;
     PIPERX5EQLPADAPTDONE : in std_ulogic;
     PIPERX5EQLPLFFSSEL : in std_ulogic;
     PIPERX5EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX5PHYSTATUS : in std_ulogic;
     PIPERX5STARTBLOCK : in std_ulogic;
     PIPERX5STATUS : in std_logic_vector(2 downto 0);
     PIPERX5SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX5VALID : in std_ulogic;
     PIPERX6CHARISK : in std_logic_vector(1 downto 0);
     PIPERX6DATA : in std_logic_vector(31 downto 0);
     PIPERX6DATAVALID : in std_ulogic;
     PIPERX6ELECIDLE : in std_ulogic;
     PIPERX6EQDONE : in std_ulogic;
     PIPERX6EQLPADAPTDONE : in std_ulogic;
     PIPERX6EQLPLFFSSEL : in std_ulogic;
     PIPERX6EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX6PHYSTATUS : in std_ulogic;
     PIPERX6STARTBLOCK : in std_ulogic;
     PIPERX6STATUS : in std_logic_vector(2 downto 0);
     PIPERX6SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX6VALID : in std_ulogic;
     PIPERX7CHARISK : in std_logic_vector(1 downto 0);
     PIPERX7DATA : in std_logic_vector(31 downto 0);
     PIPERX7DATAVALID : in std_ulogic;
     PIPERX7ELECIDLE : in std_ulogic;
     PIPERX7EQDONE : in std_ulogic;
     PIPERX7EQLPADAPTDONE : in std_ulogic;
     PIPERX7EQLPLFFSSEL : in std_ulogic;
     PIPERX7EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX7PHYSTATUS : in std_ulogic;
     PIPERX7STARTBLOCK : in std_ulogic;
     PIPERX7STATUS : in std_logic_vector(2 downto 0);
     PIPERX7SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX7VALID : in std_ulogic;
     PIPETX0EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX0EQDONE : in std_ulogic;
     PIPETX1EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX1EQDONE : in std_ulogic;
     PIPETX2EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX2EQDONE : in std_ulogic;
     PIPETX3EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX3EQDONE : in std_ulogic;
     PIPETX4EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX4EQDONE : in std_ulogic;
     PIPETX5EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX5EQDONE : in std_ulogic;
     PIPETX6EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX6EQDONE : in std_ulogic;
     PIPETX7EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX7EQDONE : in std_ulogic;
     PLDISABLESCRAMBLER : in std_ulogic;
     PLEQRESETEIEOSCOUNT : in std_ulogic;
     PLGEN3PCSDISABLE : in std_ulogic;
     PLGEN3PCSRXSYNCDONE : in std_logic_vector(7 downto 0);
     RECCLK : in std_ulogic;
     RESETN : in std_ulogic;
     SAXISCCTDATA : in std_logic_vector(255 downto 0);
     SAXISCCTKEEP : in std_logic_vector(7 downto 0);
     SAXISCCTLAST : in std_ulogic;
     SAXISCCTUSER : in std_logic_vector(32 downto 0);
     SAXISCCTVALID : in std_ulogic;
     SAXISRQTDATA : in std_logic_vector(255 downto 0);
     SAXISRQTKEEP : in std_logic_vector(7 downto 0);
     SAXISRQTLAST : in std_ulogic;
     SAXISRQTUSER : in std_logic_vector(59 downto 0);
     SAXISRQTVALID : in std_ulogic;
     USERCLK : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  PCIE_3_0 : component is "PRIMITIVE";

----- component PCIE_3_1 -----
component PCIE_3_1
  generic (
     ARI_CAP_ENABLE : string := "FALSE";
     AXISTEN_IF_CC_ALIGNMENT_MODE : string := "FALSE";
     AXISTEN_IF_CC_PARITY_CHK : string := "TRUE";
     AXISTEN_IF_CQ_ALIGNMENT_MODE : string := "FALSE";
     AXISTEN_IF_ENABLE_CLIENT_TAG : string := "FALSE";
     AXISTEN_IF_ENABLE_MSG_ROUTE : std_logic_vector(17 downto 0) := "00" & X"0000";
     AXISTEN_IF_ENABLE_RX_MSG_INTFC : string := "FALSE";
     AXISTEN_IF_RC_ALIGNMENT_MODE : string := "FALSE";
     AXISTEN_IF_RC_STRADDLE : string := "FALSE";
     AXISTEN_IF_RQ_ALIGNMENT_MODE : string := "FALSE";
     AXISTEN_IF_RQ_PARITY_CHK : string := "TRUE";
     AXISTEN_IF_WIDTH : std_logic_vector(1 downto 0) := "10";
     CRM_CORE_CLK_FREQ_500 : string := "TRUE";
     CRM_USER_CLK_FREQ : std_logic_vector(1 downto 0) := "10";
     DEBUG_CFG_LOCAL_MGMT_REG_ACCESS_OVERRIDE : string := "FALSE";
     DEBUG_PL_DISABLE_EI_INFER_IN_L0 : string := "FALSE";
     DEBUG_TL_DISABLE_RX_TLP_ORDER_CHECKS : string := "FALSE";
     DNSTREAM_LINK_NUM : std_logic_vector(7 downto 0) := X"00";
     LL_ACK_TIMEOUT : std_logic_vector(8 downto 0) := "0" & X"00";
     LL_ACK_TIMEOUT_EN : string := "FALSE";
     LL_ACK_TIMEOUT_FUNC : integer := 0;
     LL_CPL_FC_UPDATE_TIMER : std_logic_vector(15 downto 0) := X"0000";
     LL_CPL_FC_UPDATE_TIMER_OVERRIDE : string := "FALSE";
     LL_FC_UPDATE_TIMER : std_logic_vector(15 downto 0) := X"0000";
     LL_FC_UPDATE_TIMER_OVERRIDE : string := "FALSE";
     LL_NP_FC_UPDATE_TIMER : std_logic_vector(15 downto 0) := X"0000";
     LL_NP_FC_UPDATE_TIMER_OVERRIDE : string := "FALSE";
     LL_P_FC_UPDATE_TIMER : std_logic_vector(15 downto 0) := X"0000";
     LL_P_FC_UPDATE_TIMER_OVERRIDE : string := "FALSE";
     LL_REPLAY_TIMEOUT : std_logic_vector(8 downto 0) := "0" & X"00";
     LL_REPLAY_TIMEOUT_EN : string := "FALSE";
     LL_REPLAY_TIMEOUT_FUNC : integer := 0;
     LTR_TX_MESSAGE_MINIMUM_INTERVAL : std_logic_vector(9 downto 0) := "00" & X"FA";
     LTR_TX_MESSAGE_ON_FUNC_POWER_STATE_CHANGE : string := "FALSE";
     LTR_TX_MESSAGE_ON_LTR_ENABLE : string := "FALSE";
     MCAP_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     MCAP_CONFIGURE_OVERRIDE : string := "FALSE";
     MCAP_ENABLE : string := "FALSE";
     MCAP_EOS_DESIGN_SWITCH : string := "FALSE";
     MCAP_FPGA_BITSTREAM_VERSION : std_logic_vector(31 downto 0) := X"00000000";
     MCAP_GATE_IO_ENABLE_DESIGN_SWITCH : string := "FALSE";
     MCAP_GATE_MEM_ENABLE_DESIGN_SWITCH : string := "FALSE";
     MCAP_INPUT_GATE_DESIGN_SWITCH : string := "FALSE";
     MCAP_INTERRUPT_ON_MCAP_EOS : string := "FALSE";
     MCAP_INTERRUPT_ON_MCAP_ERROR : string := "FALSE";
     MCAP_VSEC_ID : std_logic_vector(15 downto 0) := X"0000";
     MCAP_VSEC_LEN : std_logic_vector(11 downto 0) := X"02C";
     MCAP_VSEC_REV : std_logic_vector(3 downto 0) := X"0";
     PF0_AER_CAP_ECRC_CHECK_CAPABLE : string := "FALSE";
     PF0_AER_CAP_ECRC_GEN_CAPABLE : string := "FALSE";
     PF0_AER_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF0_ARI_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF0_ARI_CAP_NEXT_FUNC : std_logic_vector(7 downto 0) := X"00";
     PF0_ARI_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF0_BAR0_APERTURE_SIZE : std_logic_vector(5 downto 0) := "11" & X"3";
     PF0_BAR0_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF0_BAR1_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"0";
     PF0_BAR1_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF0_BAR2_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF0_BAR2_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF0_BAR3_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF0_BAR3_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF0_BAR4_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF0_BAR4_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF0_BAR5_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF0_BAR5_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF0_BIST_REGISTER : std_logic_vector(7 downto 0) := X"00";
     PF0_CAPABILITY_POINTER : std_logic_vector(7 downto 0) := X"50";
     PF0_CLASS_CODE : std_logic_vector(23 downto 0) := X"000000";
     PF0_DEVICE_ID : std_logic_vector(15 downto 0) := X"0000";
     PF0_DEV_CAP2_128B_CAS_ATOMIC_COMPLETER_SUPPORT : string := "TRUE";
     PF0_DEV_CAP2_32B_ATOMIC_COMPLETER_SUPPORT : string := "TRUE";
     PF0_DEV_CAP2_64B_ATOMIC_COMPLETER_SUPPORT : string := "TRUE";
     PF0_DEV_CAP2_ARI_FORWARD_ENABLE : string := "FALSE";
     PF0_DEV_CAP2_CPL_TIMEOUT_DISABLE : string := "TRUE";
     PF0_DEV_CAP2_LTR_SUPPORT : string := "TRUE";
     PF0_DEV_CAP2_OBFF_SUPPORT : std_logic_vector(1 downto 0) := "00";
     PF0_DEV_CAP2_TPH_COMPLETER_SUPPORT : string := "FALSE";
     PF0_DEV_CAP_ENDPOINT_L0S_LATENCY : integer := 0;
     PF0_DEV_CAP_ENDPOINT_L1_LATENCY : integer := 0;
     PF0_DEV_CAP_EXT_TAG_SUPPORTED : string := "TRUE";
     PF0_DEV_CAP_FUNCTION_LEVEL_RESET_CAPABLE : string := "TRUE";
     PF0_DEV_CAP_MAX_PAYLOAD_SIZE : std_logic_vector(2 downto 0) := "011";
     PF0_DPA_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF0_DPA_CAP_SUB_STATE_CONTROL : std_logic_vector(4 downto 0) := "0" & X"0";
     PF0_DPA_CAP_SUB_STATE_CONTROL_EN : string := "TRUE";
     PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION0 : std_logic_vector(7 downto 0) := X"00";
     PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION1 : std_logic_vector(7 downto 0) := X"00";
     PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION2 : std_logic_vector(7 downto 0) := X"00";
     PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION3 : std_logic_vector(7 downto 0) := X"00";
     PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION4 : std_logic_vector(7 downto 0) := X"00";
     PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION5 : std_logic_vector(7 downto 0) := X"00";
     PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION6 : std_logic_vector(7 downto 0) := X"00";
     PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION7 : std_logic_vector(7 downto 0) := X"00";
     PF0_DPA_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF0_DSN_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"10C";
     PF0_EXPANSION_ROM_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF0_EXPANSION_ROM_ENABLE : string := "FALSE";
     PF0_INTERRUPT_LINE : std_logic_vector(7 downto 0) := X"00";
     PF0_INTERRUPT_PIN : std_logic_vector(2 downto 0) := "001";
     PF0_LINK_CAP_ASPM_SUPPORT : integer := 0;
     PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN1 : integer := 7;
     PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN2 : integer := 7;
     PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN3 : integer := 7;
     PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN1 : integer := 7;
     PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN2 : integer := 7;
     PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN3 : integer := 7;
     PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN1 : integer := 7;
     PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN2 : integer := 7;
     PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN3 : integer := 7;
     PF0_LINK_CAP_L1_EXIT_LATENCY_GEN1 : integer := 7;
     PF0_LINK_CAP_L1_EXIT_LATENCY_GEN2 : integer := 7;
     PF0_LINK_CAP_L1_EXIT_LATENCY_GEN3 : integer := 7;
     PF0_LINK_STATUS_SLOT_CLOCK_CONFIG : string := "TRUE";
     PF0_LTR_CAP_MAX_NOSNOOP_LAT : std_logic_vector(9 downto 0) := "00" & X"00";
     PF0_LTR_CAP_MAX_SNOOP_LAT : std_logic_vector(9 downto 0) := "00" & X"00";
     PF0_LTR_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF0_LTR_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF0_MSIX_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF0_MSIX_CAP_PBA_BIR : integer := 0;
     PF0_MSIX_CAP_PBA_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000050";
     PF0_MSIX_CAP_TABLE_BIR : integer := 0;
     PF0_MSIX_CAP_TABLE_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000040";
     PF0_MSIX_CAP_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     PF0_MSI_CAP_MULTIMSGCAP : integer := 0;
     PF0_MSI_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF0_MSI_CAP_PERVECMASKCAP : string := "FALSE";
     PF0_PB_CAP_DATA_REG_D0 : std_logic_vector(31 downto 0) := X"00000000";
     PF0_PB_CAP_DATA_REG_D0_SUSTAINED : std_logic_vector(31 downto 0) := X"00000000";
     PF0_PB_CAP_DATA_REG_D1 : std_logic_vector(31 downto 0) := X"00000000";
     PF0_PB_CAP_DATA_REG_D3HOT : std_logic_vector(31 downto 0) := X"00000000";
     PF0_PB_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF0_PB_CAP_SYSTEM_ALLOCATED : string := "FALSE";
     PF0_PB_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF0_PM_CAP_ID : std_logic_vector(7 downto 0) := X"01";
     PF0_PM_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF0_PM_CAP_PMESUPPORT_D0 : string := "TRUE";
     PF0_PM_CAP_PMESUPPORT_D1 : string := "TRUE";
     PF0_PM_CAP_PMESUPPORT_D3HOT : string := "TRUE";
     PF0_PM_CAP_SUPP_D1_STATE : string := "TRUE";
     PF0_PM_CAP_VER_ID : std_logic_vector(2 downto 0) := "011";
     PF0_PM_CSR_NOSOFTRESET : string := "TRUE";
     PF0_RBAR_CAP_ENABLE : string := "FALSE";
     PF0_RBAR_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF0_RBAR_CAP_SIZE0 : std_logic_vector(19 downto 0) := X"00000";
     PF0_RBAR_CAP_SIZE1 : std_logic_vector(19 downto 0) := X"00000";
     PF0_RBAR_CAP_SIZE2 : std_logic_vector(19 downto 0) := X"00000";
     PF0_RBAR_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF0_RBAR_CONTROL_INDEX0 : std_logic_vector(2 downto 0) := "000";
     PF0_RBAR_CONTROL_INDEX1 : std_logic_vector(2 downto 0) := "000";
     PF0_RBAR_CONTROL_INDEX2 : std_logic_vector(2 downto 0) := "000";
     PF0_RBAR_CONTROL_SIZE0 : std_logic_vector(4 downto 0) := "0" & X"0";
     PF0_RBAR_CONTROL_SIZE1 : std_logic_vector(4 downto 0) := "0" & X"0";
     PF0_RBAR_CONTROL_SIZE2 : std_logic_vector(4 downto 0) := "0" & X"0";
     PF0_RBAR_NUM : std_logic_vector(2 downto 0) := "001";
     PF0_REVISION_ID : std_logic_vector(7 downto 0) := X"00";
     PF0_SECONDARY_PCIE_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF0_SRIOV_BAR0_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF0_SRIOV_BAR0_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF0_SRIOV_BAR1_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"0";
     PF0_SRIOV_BAR1_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF0_SRIOV_BAR2_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF0_SRIOV_BAR2_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF0_SRIOV_BAR3_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF0_SRIOV_BAR3_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF0_SRIOV_BAR4_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF0_SRIOV_BAR4_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF0_SRIOV_BAR5_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF0_SRIOV_BAR5_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF0_SRIOV_CAP_INITIAL_VF : std_logic_vector(15 downto 0) := X"0000";
     PF0_SRIOV_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF0_SRIOV_CAP_TOTAL_VF : std_logic_vector(15 downto 0) := X"0000";
     PF0_SRIOV_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF0_SRIOV_FIRST_VF_OFFSET : std_logic_vector(15 downto 0) := X"0000";
     PF0_SRIOV_FUNC_DEP_LINK : std_logic_vector(15 downto 0) := X"0000";
     PF0_SRIOV_SUPPORTED_PAGE_SIZE : std_logic_vector(31 downto 0) := X"00000000";
     PF0_SRIOV_VF_DEVICE_ID : std_logic_vector(15 downto 0) := X"0000";
     PF0_SUBSYSTEM_ID : std_logic_vector(15 downto 0) := X"0000";
     PF0_TPHR_CAP_DEV_SPECIFIC_MODE : string := "TRUE";
     PF0_TPHR_CAP_ENABLE : string := "FALSE";
     PF0_TPHR_CAP_INT_VEC_MODE : string := "TRUE";
     PF0_TPHR_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF0_TPHR_CAP_ST_MODE_SEL : std_logic_vector(2 downto 0) := "000";
     PF0_TPHR_CAP_ST_TABLE_LOC : std_logic_vector(1 downto 0) := "00";
     PF0_TPHR_CAP_ST_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     PF0_TPHR_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF0_VC_CAP_ENABLE : string := "FALSE";
     PF0_VC_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF0_VC_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF1_AER_CAP_ECRC_CHECK_CAPABLE : string := "FALSE";
     PF1_AER_CAP_ECRC_GEN_CAPABLE : string := "FALSE";
     PF1_AER_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF1_ARI_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF1_ARI_CAP_NEXT_FUNC : std_logic_vector(7 downto 0) := X"00";
     PF1_BAR0_APERTURE_SIZE : std_logic_vector(5 downto 0) := "11" & X"3";
     PF1_BAR0_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF1_BAR1_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"0";
     PF1_BAR1_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF1_BAR2_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF1_BAR2_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF1_BAR3_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF1_BAR3_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF1_BAR4_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF1_BAR4_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF1_BAR5_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF1_BAR5_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF1_BIST_REGISTER : std_logic_vector(7 downto 0) := X"00";
     PF1_CAPABILITY_POINTER : std_logic_vector(7 downto 0) := X"50";
     PF1_CLASS_CODE : std_logic_vector(23 downto 0) := X"000000";
     PF1_DEVICE_ID : std_logic_vector(15 downto 0) := X"0000";
     PF1_DEV_CAP_MAX_PAYLOAD_SIZE : std_logic_vector(2 downto 0) := "011";
     PF1_DPA_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF1_DPA_CAP_SUB_STATE_CONTROL : std_logic_vector(4 downto 0) := "0" & X"0";
     PF1_DPA_CAP_SUB_STATE_CONTROL_EN : string := "TRUE";
     PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION0 : std_logic_vector(7 downto 0) := X"00";
     PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION1 : std_logic_vector(7 downto 0) := X"00";
     PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION2 : std_logic_vector(7 downto 0) := X"00";
     PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION3 : std_logic_vector(7 downto 0) := X"00";
     PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION4 : std_logic_vector(7 downto 0) := X"00";
     PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION5 : std_logic_vector(7 downto 0) := X"00";
     PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION6 : std_logic_vector(7 downto 0) := X"00";
     PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION7 : std_logic_vector(7 downto 0) := X"00";
     PF1_DPA_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF1_DSN_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"10C";
     PF1_EXPANSION_ROM_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF1_EXPANSION_ROM_ENABLE : string := "FALSE";
     PF1_INTERRUPT_LINE : std_logic_vector(7 downto 0) := X"00";
     PF1_INTERRUPT_PIN : std_logic_vector(2 downto 0) := "001";
     PF1_MSIX_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF1_MSIX_CAP_PBA_BIR : integer := 0;
     PF1_MSIX_CAP_PBA_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000050";
     PF1_MSIX_CAP_TABLE_BIR : integer := 0;
     PF1_MSIX_CAP_TABLE_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000040";
     PF1_MSIX_CAP_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     PF1_MSI_CAP_MULTIMSGCAP : integer := 0;
     PF1_MSI_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF1_MSI_CAP_PERVECMASKCAP : string := "FALSE";
     PF1_PB_CAP_DATA_REG_D0 : std_logic_vector(31 downto 0) := X"00000000";
     PF1_PB_CAP_DATA_REG_D0_SUSTAINED : std_logic_vector(31 downto 0) := X"00000000";
     PF1_PB_CAP_DATA_REG_D1 : std_logic_vector(31 downto 0) := X"00000000";
     PF1_PB_CAP_DATA_REG_D3HOT : std_logic_vector(31 downto 0) := X"00000000";
     PF1_PB_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF1_PB_CAP_SYSTEM_ALLOCATED : string := "FALSE";
     PF1_PB_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF1_PM_CAP_ID : std_logic_vector(7 downto 0) := X"01";
     PF1_PM_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF1_PM_CAP_VER_ID : std_logic_vector(2 downto 0) := "011";
     PF1_RBAR_CAP_ENABLE : string := "FALSE";
     PF1_RBAR_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF1_RBAR_CAP_SIZE0 : std_logic_vector(19 downto 0) := X"00000";
     PF1_RBAR_CAP_SIZE1 : std_logic_vector(19 downto 0) := X"00000";
     PF1_RBAR_CAP_SIZE2 : std_logic_vector(19 downto 0) := X"00000";
     PF1_RBAR_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF1_RBAR_CONTROL_INDEX0 : std_logic_vector(2 downto 0) := "000";
     PF1_RBAR_CONTROL_INDEX1 : std_logic_vector(2 downto 0) := "000";
     PF1_RBAR_CONTROL_INDEX2 : std_logic_vector(2 downto 0) := "000";
     PF1_RBAR_CONTROL_SIZE0 : std_logic_vector(4 downto 0) := "0" & X"0";
     PF1_RBAR_CONTROL_SIZE1 : std_logic_vector(4 downto 0) := "0" & X"0";
     PF1_RBAR_CONTROL_SIZE2 : std_logic_vector(4 downto 0) := "0" & X"0";
     PF1_RBAR_NUM : std_logic_vector(2 downto 0) := "001";
     PF1_REVISION_ID : std_logic_vector(7 downto 0) := X"00";
     PF1_SRIOV_BAR0_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF1_SRIOV_BAR0_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF1_SRIOV_BAR1_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"0";
     PF1_SRIOV_BAR1_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF1_SRIOV_BAR2_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF1_SRIOV_BAR2_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF1_SRIOV_BAR3_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF1_SRIOV_BAR3_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF1_SRIOV_BAR4_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF1_SRIOV_BAR4_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF1_SRIOV_BAR5_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF1_SRIOV_BAR5_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF1_SRIOV_CAP_INITIAL_VF : std_logic_vector(15 downto 0) := X"0000";
     PF1_SRIOV_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF1_SRIOV_CAP_TOTAL_VF : std_logic_vector(15 downto 0) := X"0000";
     PF1_SRIOV_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF1_SRIOV_FIRST_VF_OFFSET : std_logic_vector(15 downto 0) := X"0000";
     PF1_SRIOV_FUNC_DEP_LINK : std_logic_vector(15 downto 0) := X"0000";
     PF1_SRIOV_SUPPORTED_PAGE_SIZE : std_logic_vector(31 downto 0) := X"00000000";
     PF1_SRIOV_VF_DEVICE_ID : std_logic_vector(15 downto 0) := X"0000";
     PF1_SUBSYSTEM_ID : std_logic_vector(15 downto 0) := X"0000";
     PF1_TPHR_CAP_DEV_SPECIFIC_MODE : string := "TRUE";
     PF1_TPHR_CAP_ENABLE : string := "FALSE";
     PF1_TPHR_CAP_INT_VEC_MODE : string := "TRUE";
     PF1_TPHR_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF1_TPHR_CAP_ST_MODE_SEL : std_logic_vector(2 downto 0) := "000";
     PF1_TPHR_CAP_ST_TABLE_LOC : std_logic_vector(1 downto 0) := "00";
     PF1_TPHR_CAP_ST_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     PF1_TPHR_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF2_AER_CAP_ECRC_CHECK_CAPABLE : string := "FALSE";
     PF2_AER_CAP_ECRC_GEN_CAPABLE : string := "FALSE";
     PF2_AER_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF2_ARI_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF2_ARI_CAP_NEXT_FUNC : std_logic_vector(7 downto 0) := X"00";
     PF2_BAR0_APERTURE_SIZE : std_logic_vector(5 downto 0) := "11" & X"3";
     PF2_BAR0_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF2_BAR1_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"0";
     PF2_BAR1_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF2_BAR2_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF2_BAR2_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF2_BAR3_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF2_BAR3_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF2_BAR4_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF2_BAR4_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF2_BAR5_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF2_BAR5_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF2_BIST_REGISTER : std_logic_vector(7 downto 0) := X"00";
     PF2_CAPABILITY_POINTER : std_logic_vector(7 downto 0) := X"50";
     PF2_CLASS_CODE : std_logic_vector(23 downto 0) := X"000000";
     PF2_DEVICE_ID : std_logic_vector(15 downto 0) := X"0000";
     PF2_DEV_CAP_MAX_PAYLOAD_SIZE : std_logic_vector(2 downto 0) := "011";
     PF2_DPA_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF2_DPA_CAP_SUB_STATE_CONTROL : std_logic_vector(4 downto 0) := "0" & X"0";
     PF2_DPA_CAP_SUB_STATE_CONTROL_EN : string := "TRUE";
     PF2_DPA_CAP_SUB_STATE_POWER_ALLOCATION0 : std_logic_vector(7 downto 0) := X"00";
     PF2_DPA_CAP_SUB_STATE_POWER_ALLOCATION1 : std_logic_vector(7 downto 0) := X"00";
     PF2_DPA_CAP_SUB_STATE_POWER_ALLOCATION2 : std_logic_vector(7 downto 0) := X"00";
     PF2_DPA_CAP_SUB_STATE_POWER_ALLOCATION3 : std_logic_vector(7 downto 0) := X"00";
     PF2_DPA_CAP_SUB_STATE_POWER_ALLOCATION4 : std_logic_vector(7 downto 0) := X"00";
     PF2_DPA_CAP_SUB_STATE_POWER_ALLOCATION5 : std_logic_vector(7 downto 0) := X"00";
     PF2_DPA_CAP_SUB_STATE_POWER_ALLOCATION6 : std_logic_vector(7 downto 0) := X"00";
     PF2_DPA_CAP_SUB_STATE_POWER_ALLOCATION7 : std_logic_vector(7 downto 0) := X"00";
     PF2_DPA_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF2_DSN_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"10C";
     PF2_EXPANSION_ROM_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF2_EXPANSION_ROM_ENABLE : string := "FALSE";
     PF2_INTERRUPT_LINE : std_logic_vector(7 downto 0) := X"00";
     PF2_INTERRUPT_PIN : std_logic_vector(2 downto 0) := "001";
     PF2_MSIX_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF2_MSIX_CAP_PBA_BIR : integer := 0;
     PF2_MSIX_CAP_PBA_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000050";
     PF2_MSIX_CAP_TABLE_BIR : integer := 0;
     PF2_MSIX_CAP_TABLE_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000040";
     PF2_MSIX_CAP_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     PF2_MSI_CAP_MULTIMSGCAP : integer := 0;
     PF2_MSI_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF2_MSI_CAP_PERVECMASKCAP : string := "FALSE";
     PF2_PB_CAP_DATA_REG_D0 : std_logic_vector(31 downto 0) := X"00000000";
     PF2_PB_CAP_DATA_REG_D0_SUSTAINED : std_logic_vector(31 downto 0) := X"00000000";
     PF2_PB_CAP_DATA_REG_D1 : std_logic_vector(31 downto 0) := X"00000000";
     PF2_PB_CAP_DATA_REG_D3HOT : std_logic_vector(31 downto 0) := X"00000000";
     PF2_PB_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF2_PB_CAP_SYSTEM_ALLOCATED : string := "FALSE";
     PF2_PB_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF2_PM_CAP_ID : std_logic_vector(7 downto 0) := X"01";
     PF2_PM_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF2_PM_CAP_VER_ID : std_logic_vector(2 downto 0) := "011";
     PF2_RBAR_CAP_ENABLE : string := "FALSE";
     PF2_RBAR_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF2_RBAR_CAP_SIZE0 : std_logic_vector(19 downto 0) := X"00000";
     PF2_RBAR_CAP_SIZE1 : std_logic_vector(19 downto 0) := X"00000";
     PF2_RBAR_CAP_SIZE2 : std_logic_vector(19 downto 0) := X"00000";
     PF2_RBAR_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF2_RBAR_CONTROL_INDEX0 : std_logic_vector(2 downto 0) := "000";
     PF2_RBAR_CONTROL_INDEX1 : std_logic_vector(2 downto 0) := "000";
     PF2_RBAR_CONTROL_INDEX2 : std_logic_vector(2 downto 0) := "000";
     PF2_RBAR_CONTROL_SIZE0 : std_logic_vector(4 downto 0) := "0" & X"0";
     PF2_RBAR_CONTROL_SIZE1 : std_logic_vector(4 downto 0) := "0" & X"0";
     PF2_RBAR_CONTROL_SIZE2 : std_logic_vector(4 downto 0) := "0" & X"0";
     PF2_RBAR_NUM : std_logic_vector(2 downto 0) := "001";
     PF2_REVISION_ID : std_logic_vector(7 downto 0) := X"00";
     PF2_SRIOV_BAR0_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF2_SRIOV_BAR0_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF2_SRIOV_BAR1_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"0";
     PF2_SRIOV_BAR1_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF2_SRIOV_BAR2_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF2_SRIOV_BAR2_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF2_SRIOV_BAR3_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF2_SRIOV_BAR3_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF2_SRIOV_BAR4_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF2_SRIOV_BAR4_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF2_SRIOV_BAR5_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF2_SRIOV_BAR5_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF2_SRIOV_CAP_INITIAL_VF : std_logic_vector(15 downto 0) := X"0000";
     PF2_SRIOV_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF2_SRIOV_CAP_TOTAL_VF : std_logic_vector(15 downto 0) := X"0000";
     PF2_SRIOV_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF2_SRIOV_FIRST_VF_OFFSET : std_logic_vector(15 downto 0) := X"0000";
     PF2_SRIOV_FUNC_DEP_LINK : std_logic_vector(15 downto 0) := X"0000";
     PF2_SRIOV_SUPPORTED_PAGE_SIZE : std_logic_vector(31 downto 0) := X"00000000";
     PF2_SRIOV_VF_DEVICE_ID : std_logic_vector(15 downto 0) := X"0000";
     PF2_SUBSYSTEM_ID : std_logic_vector(15 downto 0) := X"0000";
     PF2_TPHR_CAP_DEV_SPECIFIC_MODE : string := "TRUE";
     PF2_TPHR_CAP_ENABLE : string := "FALSE";
     PF2_TPHR_CAP_INT_VEC_MODE : string := "TRUE";
     PF2_TPHR_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF2_TPHR_CAP_ST_MODE_SEL : std_logic_vector(2 downto 0) := "000";
     PF2_TPHR_CAP_ST_TABLE_LOC : std_logic_vector(1 downto 0) := "00";
     PF2_TPHR_CAP_ST_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     PF2_TPHR_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF3_AER_CAP_ECRC_CHECK_CAPABLE : string := "FALSE";
     PF3_AER_CAP_ECRC_GEN_CAPABLE : string := "FALSE";
     PF3_AER_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF3_ARI_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF3_ARI_CAP_NEXT_FUNC : std_logic_vector(7 downto 0) := X"00";
     PF3_BAR0_APERTURE_SIZE : std_logic_vector(5 downto 0) := "11" & X"3";
     PF3_BAR0_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF3_BAR1_APERTURE_SIZE : std_logic_vector(5 downto 0) := "00" & X"0";
     PF3_BAR1_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF3_BAR2_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF3_BAR2_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF3_BAR3_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF3_BAR3_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF3_BAR4_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF3_BAR4_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF3_BAR5_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF3_BAR5_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF3_BIST_REGISTER : std_logic_vector(7 downto 0) := X"00";
     PF3_CAPABILITY_POINTER : std_logic_vector(7 downto 0) := X"50";
     PF3_CLASS_CODE : std_logic_vector(23 downto 0) := X"000000";
     PF3_DEVICE_ID : std_logic_vector(15 downto 0) := X"0000";
     PF3_DEV_CAP_MAX_PAYLOAD_SIZE : std_logic_vector(2 downto 0) := "011";
     PF3_DPA_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF3_DPA_CAP_SUB_STATE_CONTROL : std_logic_vector(4 downto 0) := "0" & X"0";
     PF3_DPA_CAP_SUB_STATE_CONTROL_EN : string := "TRUE";
     PF3_DPA_CAP_SUB_STATE_POWER_ALLOCATION0 : std_logic_vector(7 downto 0) := X"00";
     PF3_DPA_CAP_SUB_STATE_POWER_ALLOCATION1 : std_logic_vector(7 downto 0) := X"00";
     PF3_DPA_CAP_SUB_STATE_POWER_ALLOCATION2 : std_logic_vector(7 downto 0) := X"00";
     PF3_DPA_CAP_SUB_STATE_POWER_ALLOCATION3 : std_logic_vector(7 downto 0) := X"00";
     PF3_DPA_CAP_SUB_STATE_POWER_ALLOCATION4 : std_logic_vector(7 downto 0) := X"00";
     PF3_DPA_CAP_SUB_STATE_POWER_ALLOCATION5 : std_logic_vector(7 downto 0) := X"00";
     PF3_DPA_CAP_SUB_STATE_POWER_ALLOCATION6 : std_logic_vector(7 downto 0) := X"00";
     PF3_DPA_CAP_SUB_STATE_POWER_ALLOCATION7 : std_logic_vector(7 downto 0) := X"00";
     PF3_DPA_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF3_DSN_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"10C";
     PF3_EXPANSION_ROM_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF3_EXPANSION_ROM_ENABLE : string := "FALSE";
     PF3_INTERRUPT_LINE : std_logic_vector(7 downto 0) := X"00";
     PF3_INTERRUPT_PIN : std_logic_vector(2 downto 0) := "001";
     PF3_MSIX_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF3_MSIX_CAP_PBA_BIR : integer := 0;
     PF3_MSIX_CAP_PBA_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000050";
     PF3_MSIX_CAP_TABLE_BIR : integer := 0;
     PF3_MSIX_CAP_TABLE_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000040";
     PF3_MSIX_CAP_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     PF3_MSI_CAP_MULTIMSGCAP : integer := 0;
     PF3_MSI_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF3_MSI_CAP_PERVECMASKCAP : string := "FALSE";
     PF3_PB_CAP_DATA_REG_D0 : std_logic_vector(31 downto 0) := X"00000000";
     PF3_PB_CAP_DATA_REG_D0_SUSTAINED : std_logic_vector(31 downto 0) := X"00000000";
     PF3_PB_CAP_DATA_REG_D1 : std_logic_vector(31 downto 0) := X"00000000";
     PF3_PB_CAP_DATA_REG_D3HOT : std_logic_vector(31 downto 0) := X"00000000";
     PF3_PB_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF3_PB_CAP_SYSTEM_ALLOCATED : string := "FALSE";
     PF3_PB_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF3_PM_CAP_ID : std_logic_vector(7 downto 0) := X"01";
     PF3_PM_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     PF3_PM_CAP_VER_ID : std_logic_vector(2 downto 0) := "011";
     PF3_RBAR_CAP_ENABLE : string := "FALSE";
     PF3_RBAR_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF3_RBAR_CAP_SIZE0 : std_logic_vector(19 downto 0) := X"00000";
     PF3_RBAR_CAP_SIZE1 : std_logic_vector(19 downto 0) := X"00000";
     PF3_RBAR_CAP_SIZE2 : std_logic_vector(19 downto 0) := X"00000";
     PF3_RBAR_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF3_RBAR_CONTROL_INDEX0 : std_logic_vector(2 downto 0) := "000";
     PF3_RBAR_CONTROL_INDEX1 : std_logic_vector(2 downto 0) := "000";
     PF3_RBAR_CONTROL_INDEX2 : std_logic_vector(2 downto 0) := "000";
     PF3_RBAR_CONTROL_SIZE0 : std_logic_vector(4 downto 0) := "0" & X"0";
     PF3_RBAR_CONTROL_SIZE1 : std_logic_vector(4 downto 0) := "0" & X"0";
     PF3_RBAR_CONTROL_SIZE2 : std_logic_vector(4 downto 0) := "0" & X"0";
     PF3_RBAR_NUM : std_logic_vector(2 downto 0) := "001";
     PF3_REVISION_ID : std_logic_vector(7 downto 0) := X"00";
     PF3_SRIOV_BAR0_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF3_SRIOV_BAR0_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF3_SRIOV_BAR1_APERTURE_SIZE : std_logic_vector(4 downto 0) := "0" & X"0";
     PF3_SRIOV_BAR1_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF3_SRIOV_BAR2_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF3_SRIOV_BAR2_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF3_SRIOV_BAR3_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF3_SRIOV_BAR3_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF3_SRIOV_BAR4_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF3_SRIOV_BAR4_CONTROL : std_logic_vector(2 downto 0) := "100";
     PF3_SRIOV_BAR5_APERTURE_SIZE : std_logic_vector(4 downto 0) := "1" & X"3";
     PF3_SRIOV_BAR5_CONTROL : std_logic_vector(2 downto 0) := "000";
     PF3_SRIOV_CAP_INITIAL_VF : std_logic_vector(15 downto 0) := X"0000";
     PF3_SRIOV_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF3_SRIOV_CAP_TOTAL_VF : std_logic_vector(15 downto 0) := X"0000";
     PF3_SRIOV_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PF3_SRIOV_FIRST_VF_OFFSET : std_logic_vector(15 downto 0) := X"0000";
     PF3_SRIOV_FUNC_DEP_LINK : std_logic_vector(15 downto 0) := X"0000";
     PF3_SRIOV_SUPPORTED_PAGE_SIZE : std_logic_vector(31 downto 0) := X"00000000";
     PF3_SRIOV_VF_DEVICE_ID : std_logic_vector(15 downto 0) := X"0000";
     PF3_SUBSYSTEM_ID : std_logic_vector(15 downto 0) := X"0000";
     PF3_TPHR_CAP_DEV_SPECIFIC_MODE : string := "TRUE";
     PF3_TPHR_CAP_ENABLE : string := "FALSE";
     PF3_TPHR_CAP_INT_VEC_MODE : string := "TRUE";
     PF3_TPHR_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     PF3_TPHR_CAP_ST_MODE_SEL : std_logic_vector(2 downto 0) := "000";
     PF3_TPHR_CAP_ST_TABLE_LOC : std_logic_vector(1 downto 0) := "00";
     PF3_TPHR_CAP_ST_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     PF3_TPHR_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     PL_DISABLE_AUTO_EQ_SPEED_CHANGE_TO_GEN3 : string := "FALSE";
     PL_DISABLE_AUTO_SPEED_CHANGE_TO_GEN2 : string := "FALSE";
     PL_DISABLE_EI_INFER_IN_L0 : string := "FALSE";
     PL_DISABLE_GEN3_DC_BALANCE : string := "FALSE";
     PL_DISABLE_GEN3_LFSR_UPDATE_ON_SKP : string := "FALSE";
     PL_DISABLE_RETRAIN_ON_FRAMING_ERROR : string := "FALSE";
     PL_DISABLE_SCRAMBLING : string := "FALSE";
     PL_DISABLE_SYNC_HEADER_FRAMING_ERROR : string := "FALSE";
     PL_DISABLE_UPCONFIG_CAPABLE : string := "FALSE";
     PL_EQ_ADAPT_DISABLE_COEFF_CHECK : string := "FALSE";
     PL_EQ_ADAPT_DISABLE_PRESET_CHECK : string := "FALSE";
     PL_EQ_ADAPT_ITER_COUNT : std_logic_vector(4 downto 0) := "0" & X"2";
     PL_EQ_ADAPT_REJECT_RETRY_COUNT : std_logic_vector(1 downto 0) := "01";
     PL_EQ_BYPASS_PHASE23 : string := "FALSE";
     PL_EQ_DEFAULT_GEN3_RX_PRESET_HINT : std_logic_vector(2 downto 0) := "011";
     PL_EQ_DEFAULT_GEN3_TX_PRESET : std_logic_vector(3 downto 0) := X"4";
     PL_EQ_PHASE01_RX_ADAPT : string := "FALSE";
     PL_EQ_SHORT_ADAPT_PHASE : string := "FALSE";
     PL_LANE0_EQ_CONTROL : std_logic_vector(15 downto 0) := X"3F00";
     PL_LANE1_EQ_CONTROL : std_logic_vector(15 downto 0) := X"3F00";
     PL_LANE2_EQ_CONTROL : std_logic_vector(15 downto 0) := X"3F00";
     PL_LANE3_EQ_CONTROL : std_logic_vector(15 downto 0) := X"3F00";
     PL_LANE4_EQ_CONTROL : std_logic_vector(15 downto 0) := X"3F00";
     PL_LANE5_EQ_CONTROL : std_logic_vector(15 downto 0) := X"3F00";
     PL_LANE6_EQ_CONTROL : std_logic_vector(15 downto 0) := X"3F00";
     PL_LANE7_EQ_CONTROL : std_logic_vector(15 downto 0) := X"3F00";
     PL_LINK_CAP_MAX_LINK_SPEED : std_logic_vector(2 downto 0) := "100";
     PL_LINK_CAP_MAX_LINK_WIDTH : std_logic_vector(3 downto 0) := X"8";
     PL_N_FTS_COMCLK_GEN1 : integer := 255;
     PL_N_FTS_COMCLK_GEN2 : integer := 255;
     PL_N_FTS_COMCLK_GEN3 : integer := 255;
     PL_N_FTS_GEN1 : integer := 255;
     PL_N_FTS_GEN2 : integer := 255;
     PL_N_FTS_GEN3 : integer := 255;
     PL_REPORT_ALL_PHY_ERRORS : string := "TRUE";
     PL_SIM_FAST_LINK_TRAINING : string := "FALSE";
     PL_UPSTREAM_FACING : string := "TRUE";
     PM_ASPML0S_TIMEOUT : std_logic_vector(15 downto 0) := X"05DC";
     PM_ASPML1_ENTRY_DELAY : std_logic_vector(19 downto 0) := X"00000";
     PM_ENABLE_L23_ENTRY : string := "FALSE";
     PM_ENABLE_SLOT_POWER_CAPTURE : string := "TRUE";
     PM_L1_REENTRY_DELAY : std_logic_vector(31 downto 0) := X"00000000";
     PM_PME_SERVICE_TIMEOUT_DELAY : std_logic_vector(19 downto 0) := X"186A0";
     PM_PME_TURNOFF_ACK_DELAY : std_logic_vector(15 downto 0) := X"0064";
     SIM_JTAG_IDCODE : std_logic_vector(31 downto 0) := X"00000000";
     SIM_VERSION : string := "1.0";
     SPARE_BIT0 : integer := 0;
     SPARE_BIT1 : integer := 0;
     SPARE_BIT2 : integer := 0;
     SPARE_BIT3 : integer := 0;
     SPARE_BIT4 : integer := 0;
     SPARE_BIT5 : integer := 0;
     SPARE_BIT6 : integer := 0;
     SPARE_BIT7 : integer := 0;
     SPARE_BIT8 : integer := 0;
     SPARE_BYTE0 : std_logic_vector(7 downto 0) := X"00";
     SPARE_BYTE1 : std_logic_vector(7 downto 0) := X"00";
     SPARE_BYTE2 : std_logic_vector(7 downto 0) := X"00";
     SPARE_BYTE3 : std_logic_vector(7 downto 0) := X"00";
     SPARE_WORD0 : std_logic_vector(31 downto 0) := X"00000000";
     SPARE_WORD1 : std_logic_vector(31 downto 0) := X"00000000";
     SPARE_WORD2 : std_logic_vector(31 downto 0) := X"00000000";
     SPARE_WORD3 : std_logic_vector(31 downto 0) := X"00000000";
     SRIOV_CAP_ENABLE : string := "FALSE";
     TL_COMPL_TIMEOUT_REG0 : std_logic_vector(23 downto 0) := X"BEBC20";
     TL_COMPL_TIMEOUT_REG1 : std_logic_vector(27 downto 0) := X"2FAF080";
     TL_CREDITS_CD : std_logic_vector(11 downto 0) := X"3E0";
     TL_CREDITS_CH : std_logic_vector(7 downto 0) := X"20";
     TL_CREDITS_NPD : std_logic_vector(11 downto 0) := X"028";
     TL_CREDITS_NPH : std_logic_vector(7 downto 0) := X"20";
     TL_CREDITS_PD : std_logic_vector(11 downto 0) := X"198";
     TL_CREDITS_PH : std_logic_vector(7 downto 0) := X"20";
     TL_ENABLE_MESSAGE_RID_CHECK_ENABLE : string := "TRUE";
     TL_EXTENDED_CFG_EXTEND_INTERFACE_ENABLE : string := "FALSE";
     TL_LEGACY_CFG_EXTEND_INTERFACE_ENABLE : string := "FALSE";
     TL_LEGACY_MODE_ENABLE : string := "FALSE";
     TL_PF_ENABLE_REG : std_logic_vector(1 downto 0) := "00";
     TL_TAG_MGMT_ENABLE : string := "TRUE";
     TL_TX_MUX_STRICT_PRIORITY : string := "TRUE";
     TWO_LAYER_MODE_DLCMSM_ENABLE : string := "TRUE";
     TWO_LAYER_MODE_ENABLE : string := "FALSE";
     TWO_LAYER_MODE_WIDTH_256 : string := "TRUE";
     VF0_ARI_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VF0_CAPABILITY_POINTER : std_logic_vector(7 downto 0) := X"50";
     VF0_MSIX_CAP_PBA_BIR : integer := 0;
     VF0_MSIX_CAP_PBA_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000050";
     VF0_MSIX_CAP_TABLE_BIR : integer := 0;
     VF0_MSIX_CAP_TABLE_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000040";
     VF0_MSIX_CAP_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     VF0_MSI_CAP_MULTIMSGCAP : integer := 0;
     VF0_PM_CAP_ID : std_logic_vector(7 downto 0) := X"01";
     VF0_PM_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     VF0_PM_CAP_VER_ID : std_logic_vector(2 downto 0) := "011";
     VF0_TPHR_CAP_DEV_SPECIFIC_MODE : string := "TRUE";
     VF0_TPHR_CAP_ENABLE : string := "FALSE";
     VF0_TPHR_CAP_INT_VEC_MODE : string := "TRUE";
     VF0_TPHR_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VF0_TPHR_CAP_ST_MODE_SEL : std_logic_vector(2 downto 0) := "000";
     VF0_TPHR_CAP_ST_TABLE_LOC : std_logic_vector(1 downto 0) := "00";
     VF0_TPHR_CAP_ST_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     VF0_TPHR_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     VF1_ARI_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VF1_MSIX_CAP_PBA_BIR : integer := 0;
     VF1_MSIX_CAP_PBA_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000050";
     VF1_MSIX_CAP_TABLE_BIR : integer := 0;
     VF1_MSIX_CAP_TABLE_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000040";
     VF1_MSIX_CAP_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     VF1_MSI_CAP_MULTIMSGCAP : integer := 0;
     VF1_PM_CAP_ID : std_logic_vector(7 downto 0) := X"01";
     VF1_PM_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     VF1_PM_CAP_VER_ID : std_logic_vector(2 downto 0) := "011";
     VF1_TPHR_CAP_DEV_SPECIFIC_MODE : string := "TRUE";
     VF1_TPHR_CAP_ENABLE : string := "FALSE";
     VF1_TPHR_CAP_INT_VEC_MODE : string := "TRUE";
     VF1_TPHR_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VF1_TPHR_CAP_ST_MODE_SEL : std_logic_vector(2 downto 0) := "000";
     VF1_TPHR_CAP_ST_TABLE_LOC : std_logic_vector(1 downto 0) := "00";
     VF1_TPHR_CAP_ST_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     VF1_TPHR_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     VF2_ARI_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VF2_MSIX_CAP_PBA_BIR : integer := 0;
     VF2_MSIX_CAP_PBA_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000050";
     VF2_MSIX_CAP_TABLE_BIR : integer := 0;
     VF2_MSIX_CAP_TABLE_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000040";
     VF2_MSIX_CAP_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     VF2_MSI_CAP_MULTIMSGCAP : integer := 0;
     VF2_PM_CAP_ID : std_logic_vector(7 downto 0) := X"01";
     VF2_PM_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     VF2_PM_CAP_VER_ID : std_logic_vector(2 downto 0) := "011";
     VF2_TPHR_CAP_DEV_SPECIFIC_MODE : string := "TRUE";
     VF2_TPHR_CAP_ENABLE : string := "FALSE";
     VF2_TPHR_CAP_INT_VEC_MODE : string := "TRUE";
     VF2_TPHR_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VF2_TPHR_CAP_ST_MODE_SEL : std_logic_vector(2 downto 0) := "000";
     VF2_TPHR_CAP_ST_TABLE_LOC : std_logic_vector(1 downto 0) := "00";
     VF2_TPHR_CAP_ST_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     VF2_TPHR_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     VF3_ARI_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VF3_MSIX_CAP_PBA_BIR : integer := 0;
     VF3_MSIX_CAP_PBA_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000050";
     VF3_MSIX_CAP_TABLE_BIR : integer := 0;
     VF3_MSIX_CAP_TABLE_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000040";
     VF3_MSIX_CAP_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     VF3_MSI_CAP_MULTIMSGCAP : integer := 0;
     VF3_PM_CAP_ID : std_logic_vector(7 downto 0) := X"01";
     VF3_PM_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     VF3_PM_CAP_VER_ID : std_logic_vector(2 downto 0) := "011";
     VF3_TPHR_CAP_DEV_SPECIFIC_MODE : string := "TRUE";
     VF3_TPHR_CAP_ENABLE : string := "FALSE";
     VF3_TPHR_CAP_INT_VEC_MODE : string := "TRUE";
     VF3_TPHR_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VF3_TPHR_CAP_ST_MODE_SEL : std_logic_vector(2 downto 0) := "000";
     VF3_TPHR_CAP_ST_TABLE_LOC : std_logic_vector(1 downto 0) := "00";
     VF3_TPHR_CAP_ST_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     VF3_TPHR_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     VF4_ARI_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VF4_MSIX_CAP_PBA_BIR : integer := 0;
     VF4_MSIX_CAP_PBA_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000050";
     VF4_MSIX_CAP_TABLE_BIR : integer := 0;
     VF4_MSIX_CAP_TABLE_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000040";
     VF4_MSIX_CAP_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     VF4_MSI_CAP_MULTIMSGCAP : integer := 0;
     VF4_PM_CAP_ID : std_logic_vector(7 downto 0) := X"01";
     VF4_PM_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     VF4_PM_CAP_VER_ID : std_logic_vector(2 downto 0) := "011";
     VF4_TPHR_CAP_DEV_SPECIFIC_MODE : string := "TRUE";
     VF4_TPHR_CAP_ENABLE : string := "FALSE";
     VF4_TPHR_CAP_INT_VEC_MODE : string := "TRUE";
     VF4_TPHR_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VF4_TPHR_CAP_ST_MODE_SEL : std_logic_vector(2 downto 0) := "000";
     VF4_TPHR_CAP_ST_TABLE_LOC : std_logic_vector(1 downto 0) := "00";
     VF4_TPHR_CAP_ST_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     VF4_TPHR_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     VF5_ARI_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VF5_MSIX_CAP_PBA_BIR : integer := 0;
     VF5_MSIX_CAP_PBA_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000050";
     VF5_MSIX_CAP_TABLE_BIR : integer := 0;
     VF5_MSIX_CAP_TABLE_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000040";
     VF5_MSIX_CAP_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     VF5_MSI_CAP_MULTIMSGCAP : integer := 0;
     VF5_PM_CAP_ID : std_logic_vector(7 downto 0) := X"01";
     VF5_PM_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     VF5_PM_CAP_VER_ID : std_logic_vector(2 downto 0) := "011";
     VF5_TPHR_CAP_DEV_SPECIFIC_MODE : string := "TRUE";
     VF5_TPHR_CAP_ENABLE : string := "FALSE";
     VF5_TPHR_CAP_INT_VEC_MODE : string := "TRUE";
     VF5_TPHR_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VF5_TPHR_CAP_ST_MODE_SEL : std_logic_vector(2 downto 0) := "000";
     VF5_TPHR_CAP_ST_TABLE_LOC : std_logic_vector(1 downto 0) := "00";
     VF5_TPHR_CAP_ST_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     VF5_TPHR_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     VF6_ARI_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VF6_MSIX_CAP_PBA_BIR : integer := 0;
     VF6_MSIX_CAP_PBA_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000050";
     VF6_MSIX_CAP_TABLE_BIR : integer := 0;
     VF6_MSIX_CAP_TABLE_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000040";
     VF6_MSIX_CAP_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     VF6_MSI_CAP_MULTIMSGCAP : integer := 0;
     VF6_PM_CAP_ID : std_logic_vector(7 downto 0) := X"01";
     VF6_PM_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     VF6_PM_CAP_VER_ID : std_logic_vector(2 downto 0) := "011";
     VF6_TPHR_CAP_DEV_SPECIFIC_MODE : string := "TRUE";
     VF6_TPHR_CAP_ENABLE : string := "FALSE";
     VF6_TPHR_CAP_INT_VEC_MODE : string := "TRUE";
     VF6_TPHR_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VF6_TPHR_CAP_ST_MODE_SEL : std_logic_vector(2 downto 0) := "000";
     VF6_TPHR_CAP_ST_TABLE_LOC : std_logic_vector(1 downto 0) := "00";
     VF6_TPHR_CAP_ST_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     VF6_TPHR_CAP_VER : std_logic_vector(3 downto 0) := X"1";
     VF7_ARI_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VF7_MSIX_CAP_PBA_BIR : integer := 0;
     VF7_MSIX_CAP_PBA_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000050";
     VF7_MSIX_CAP_TABLE_BIR : integer := 0;
     VF7_MSIX_CAP_TABLE_OFFSET : std_logic_vector(28 downto 0) := "0" & X"0000040";
     VF7_MSIX_CAP_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     VF7_MSI_CAP_MULTIMSGCAP : integer := 0;
     VF7_PM_CAP_ID : std_logic_vector(7 downto 0) := X"01";
     VF7_PM_CAP_NEXTPTR : std_logic_vector(7 downto 0) := X"00";
     VF7_PM_CAP_VER_ID : std_logic_vector(2 downto 0) := "011";
     VF7_TPHR_CAP_DEV_SPECIFIC_MODE : string := "TRUE";
     VF7_TPHR_CAP_ENABLE : string := "FALSE";
     VF7_TPHR_CAP_INT_VEC_MODE : string := "TRUE";
     VF7_TPHR_CAP_NEXTPTR : std_logic_vector(11 downto 0) := X"000";
     VF7_TPHR_CAP_ST_MODE_SEL : std_logic_vector(2 downto 0) := "000";
     VF7_TPHR_CAP_ST_TABLE_LOC : std_logic_vector(1 downto 0) := "00";
     VF7_TPHR_CAP_ST_TABLE_SIZE : std_logic_vector(10 downto 0) := "000" & X"00";
     VF7_TPHR_CAP_VER : std_logic_vector(3 downto 0) := X"1"
  );
  port (
     CFGCURRENTSPEED : out std_logic_vector(2 downto 0);
     CFGDPASUBSTATECHANGE : out std_logic_vector(3 downto 0);
     CFGERRCOROUT : out std_ulogic;
     CFGERRFATALOUT : out std_ulogic;
     CFGERRNONFATALOUT : out std_ulogic;
     CFGEXTFUNCTIONNUMBER : out std_logic_vector(7 downto 0);
     CFGEXTREADRECEIVED : out std_ulogic;
     CFGEXTREGISTERNUMBER : out std_logic_vector(9 downto 0);
     CFGEXTWRITEBYTEENABLE : out std_logic_vector(3 downto 0);
     CFGEXTWRITEDATA : out std_logic_vector(31 downto 0);
     CFGEXTWRITERECEIVED : out std_ulogic;
     CFGFCCPLD : out std_logic_vector(11 downto 0);
     CFGFCCPLH : out std_logic_vector(7 downto 0);
     CFGFCNPD : out std_logic_vector(11 downto 0);
     CFGFCNPH : out std_logic_vector(7 downto 0);
     CFGFCPD : out std_logic_vector(11 downto 0);
     CFGFCPH : out std_logic_vector(7 downto 0);
     CFGFLRINPROCESS : out std_logic_vector(3 downto 0);
     CFGFUNCTIONPOWERSTATE : out std_logic_vector(11 downto 0);
     CFGFUNCTIONSTATUS : out std_logic_vector(15 downto 0);
     CFGHOTRESETOUT : out std_ulogic;
     CFGINTERRUPTMSIDATA : out std_logic_vector(31 downto 0);
     CFGINTERRUPTMSIENABLE : out std_logic_vector(3 downto 0);
     CFGINTERRUPTMSIFAIL : out std_ulogic;
     CFGINTERRUPTMSIMASKUPDATE : out std_ulogic;
     CFGINTERRUPTMSIMMENABLE : out std_logic_vector(11 downto 0);
     CFGINTERRUPTMSISENT : out std_ulogic;
     CFGINTERRUPTMSIVFENABLE : out std_logic_vector(7 downto 0);
     CFGINTERRUPTMSIXENABLE : out std_logic_vector(3 downto 0);
     CFGINTERRUPTMSIXFAIL : out std_ulogic;
     CFGINTERRUPTMSIXMASK : out std_logic_vector(3 downto 0);
     CFGINTERRUPTMSIXSENT : out std_ulogic;
     CFGINTERRUPTMSIXVFENABLE : out std_logic_vector(7 downto 0);
     CFGINTERRUPTMSIXVFMASK : out std_logic_vector(7 downto 0);
     CFGINTERRUPTSENT : out std_ulogic;
     CFGLINKPOWERSTATE : out std_logic_vector(1 downto 0);
     CFGLOCALERROR : out std_ulogic;
     CFGLTRENABLE : out std_ulogic;
     CFGLTSSMSTATE : out std_logic_vector(5 downto 0);
     CFGMAXPAYLOAD : out std_logic_vector(2 downto 0);
     CFGMAXREADREQ : out std_logic_vector(2 downto 0);
     CFGMGMTREADDATA : out std_logic_vector(31 downto 0);
     CFGMGMTREADWRITEDONE : out std_ulogic;
     CFGMSGRECEIVED : out std_ulogic;
     CFGMSGRECEIVEDDATA : out std_logic_vector(7 downto 0);
     CFGMSGRECEIVEDTYPE : out std_logic_vector(4 downto 0);
     CFGMSGTRANSMITDONE : out std_ulogic;
     CFGNEGOTIATEDWIDTH : out std_logic_vector(3 downto 0);
     CFGOBFFENABLE : out std_logic_vector(1 downto 0);
     CFGPERFUNCSTATUSDATA : out std_logic_vector(15 downto 0);
     CFGPERFUNCTIONUPDATEDONE : out std_ulogic;
     CFGPHYLINKDOWN : out std_ulogic;
     CFGPHYLINKSTATUS : out std_logic_vector(1 downto 0);
     CFGPLSTATUSCHANGE : out std_ulogic;
     CFGPOWERSTATECHANGEINTERRUPT : out std_ulogic;
     CFGRCBSTATUS : out std_logic_vector(3 downto 0);
     CFGTPHFUNCTIONNUM : out std_logic_vector(3 downto 0);
     CFGTPHREQUESTERENABLE : out std_logic_vector(3 downto 0);
     CFGTPHSTMODE : out std_logic_vector(11 downto 0);
     CFGTPHSTTADDRESS : out std_logic_vector(4 downto 0);
     CFGTPHSTTREADENABLE : out std_ulogic;
     CFGTPHSTTWRITEBYTEVALID : out std_logic_vector(3 downto 0);
     CFGTPHSTTWRITEDATA : out std_logic_vector(31 downto 0);
     CFGTPHSTTWRITEENABLE : out std_ulogic;
     CFGVFFLRINPROCESS : out std_logic_vector(7 downto 0);
     CFGVFPOWERSTATE : out std_logic_vector(23 downto 0);
     CFGVFSTATUS : out std_logic_vector(15 downto 0);
     CFGVFTPHREQUESTERENABLE : out std_logic_vector(7 downto 0);
     CFGVFTPHSTMODE : out std_logic_vector(23 downto 0);
     CONFMCAPDESIGNSWITCH : out std_ulogic;
     CONFMCAPEOS : out std_ulogic;
     CONFMCAPINUSEBYPCIE : out std_ulogic;
     CONFREQREADY : out std_ulogic;
     CONFRESPRDATA : out std_logic_vector(31 downto 0);
     CONFRESPVALID : out std_ulogic;
     DBGDATAOUT : out std_logic_vector(15 downto 0);
     DBGMCAPCSB : out std_ulogic;
     DBGMCAPDATA : out std_logic_vector(31 downto 0);
     DBGMCAPEOS : out std_ulogic;
     DBGMCAPERROR : out std_ulogic;
     DBGMCAPMODE : out std_ulogic;
     DBGMCAPRDATAVALID : out std_ulogic;
     DBGMCAPRDWRB : out std_ulogic;
     DBGMCAPRESET : out std_ulogic;
     DBGPLDATABLOCKRECEIVEDAFTEREDS : out std_ulogic;
     DBGPLGEN3FRAMINGERRORDETECTED : out std_ulogic;
     DBGPLGEN3SYNCHEADERERRORDETECTED : out std_ulogic;
     DBGPLINFERREDRXELECTRICALIDLE : out std_logic_vector(7 downto 0);
     DRPDO : out std_logic_vector(15 downto 0);
     DRPRDY : out std_ulogic;
     LL2LMMASTERTLPSENT0 : out std_ulogic;
     LL2LMMASTERTLPSENT1 : out std_ulogic;
     LL2LMMASTERTLPSENTTLPID0 : out std_logic_vector(3 downto 0);
     LL2LMMASTERTLPSENTTLPID1 : out std_logic_vector(3 downto 0);
     LL2LMMAXISRXTDATA : out std_logic_vector(255 downto 0);
     LL2LMMAXISRXTUSER : out std_logic_vector(17 downto 0);
     LL2LMMAXISRXTVALID : out std_logic_vector(7 downto 0);
     LL2LMSAXISTXTREADY : out std_logic_vector(7 downto 0);
     MAXISCQTDATA : out std_logic_vector(255 downto 0);
     MAXISCQTKEEP : out std_logic_vector(7 downto 0);
     MAXISCQTLAST : out std_ulogic;
     MAXISCQTUSER : out std_logic_vector(84 downto 0);
     MAXISCQTVALID : out std_ulogic;
     MAXISRCTDATA : out std_logic_vector(255 downto 0);
     MAXISRCTKEEP : out std_logic_vector(7 downto 0);
     MAXISRCTLAST : out std_ulogic;
     MAXISRCTUSER : out std_logic_vector(74 downto 0);
     MAXISRCTVALID : out std_ulogic;
     MICOMPLETIONRAMREADADDRESSAL : out std_logic_vector(9 downto 0);
     MICOMPLETIONRAMREADADDRESSAU : out std_logic_vector(9 downto 0);
     MICOMPLETIONRAMREADADDRESSBL : out std_logic_vector(9 downto 0);
     MICOMPLETIONRAMREADADDRESSBU : out std_logic_vector(9 downto 0);
     MICOMPLETIONRAMREADENABLEL : out std_logic_vector(3 downto 0);
     MICOMPLETIONRAMREADENABLEU : out std_logic_vector(3 downto 0);
     MICOMPLETIONRAMWRITEADDRESSAL : out std_logic_vector(9 downto 0);
     MICOMPLETIONRAMWRITEADDRESSAU : out std_logic_vector(9 downto 0);
     MICOMPLETIONRAMWRITEADDRESSBL : out std_logic_vector(9 downto 0);
     MICOMPLETIONRAMWRITEADDRESSBU : out std_logic_vector(9 downto 0);
     MICOMPLETIONRAMWRITEDATAL : out std_logic_vector(71 downto 0);
     MICOMPLETIONRAMWRITEDATAU : out std_logic_vector(71 downto 0);
     MICOMPLETIONRAMWRITEENABLEL : out std_logic_vector(3 downto 0);
     MICOMPLETIONRAMWRITEENABLEU : out std_logic_vector(3 downto 0);
     MIREPLAYRAMADDRESS : out std_logic_vector(8 downto 0);
     MIREPLAYRAMREADENABLE : out std_logic_vector(1 downto 0);
     MIREPLAYRAMWRITEDATA : out std_logic_vector(143 downto 0);
     MIREPLAYRAMWRITEENABLE : out std_logic_vector(1 downto 0);
     MIREQUESTRAMREADADDRESSA : out std_logic_vector(8 downto 0);
     MIREQUESTRAMREADADDRESSB : out std_logic_vector(8 downto 0);
     MIREQUESTRAMREADENABLE : out std_logic_vector(3 downto 0);
     MIREQUESTRAMWRITEADDRESSA : out std_logic_vector(8 downto 0);
     MIREQUESTRAMWRITEADDRESSB : out std_logic_vector(8 downto 0);
     MIREQUESTRAMWRITEDATA : out std_logic_vector(143 downto 0);
     MIREQUESTRAMWRITEENABLE : out std_logic_vector(3 downto 0);
     PCIECQNPREQCOUNT : out std_logic_vector(5 downto 0);
     PCIEPERST0B : out std_ulogic;
     PCIEPERST1B : out std_ulogic;
     PCIERQSEQNUM : out std_logic_vector(3 downto 0);
     PCIERQSEQNUMVLD : out std_ulogic;
     PCIERQTAG : out std_logic_vector(5 downto 0);
     PCIERQTAGAV : out std_logic_vector(1 downto 0);
     PCIERQTAGVLD : out std_ulogic;
     PCIETFCNPDAV : out std_logic_vector(1 downto 0);
     PCIETFCNPHAV : out std_logic_vector(1 downto 0);
     PIPERX0EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX0EQLPLFFS : out std_logic_vector(5 downto 0);
     PIPERX0EQLPTXPRESET : out std_logic_vector(3 downto 0);
     PIPERX0EQPRESET : out std_logic_vector(2 downto 0);
     PIPERX0POLARITY : out std_ulogic;
     PIPERX1EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX1EQLPLFFS : out std_logic_vector(5 downto 0);
     PIPERX1EQLPTXPRESET : out std_logic_vector(3 downto 0);
     PIPERX1EQPRESET : out std_logic_vector(2 downto 0);
     PIPERX1POLARITY : out std_ulogic;
     PIPERX2EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX2EQLPLFFS : out std_logic_vector(5 downto 0);
     PIPERX2EQLPTXPRESET : out std_logic_vector(3 downto 0);
     PIPERX2EQPRESET : out std_logic_vector(2 downto 0);
     PIPERX2POLARITY : out std_ulogic;
     PIPERX3EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX3EQLPLFFS : out std_logic_vector(5 downto 0);
     PIPERX3EQLPTXPRESET : out std_logic_vector(3 downto 0);
     PIPERX3EQPRESET : out std_logic_vector(2 downto 0);
     PIPERX3POLARITY : out std_ulogic;
     PIPERX4EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX4EQLPLFFS : out std_logic_vector(5 downto 0);
     PIPERX4EQLPTXPRESET : out std_logic_vector(3 downto 0);
     PIPERX4EQPRESET : out std_logic_vector(2 downto 0);
     PIPERX4POLARITY : out std_ulogic;
     PIPERX5EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX5EQLPLFFS : out std_logic_vector(5 downto 0);
     PIPERX5EQLPTXPRESET : out std_logic_vector(3 downto 0);
     PIPERX5EQPRESET : out std_logic_vector(2 downto 0);
     PIPERX5POLARITY : out std_ulogic;
     PIPERX6EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX6EQLPLFFS : out std_logic_vector(5 downto 0);
     PIPERX6EQLPTXPRESET : out std_logic_vector(3 downto 0);
     PIPERX6EQPRESET : out std_logic_vector(2 downto 0);
     PIPERX6POLARITY : out std_ulogic;
     PIPERX7EQCONTROL : out std_logic_vector(1 downto 0);
     PIPERX7EQLPLFFS : out std_logic_vector(5 downto 0);
     PIPERX7EQLPTXPRESET : out std_logic_vector(3 downto 0);
     PIPERX7EQPRESET : out std_logic_vector(2 downto 0);
     PIPERX7POLARITY : out std_ulogic;
     PIPETX0CHARISK : out std_logic_vector(1 downto 0);
     PIPETX0COMPLIANCE : out std_ulogic;
     PIPETX0DATA : out std_logic_vector(31 downto 0);
     PIPETX0DATAVALID : out std_ulogic;
     PIPETX0DEEMPH : out std_ulogic;
     PIPETX0ELECIDLE : out std_ulogic;
     PIPETX0EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX0EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX0EQPRESET : out std_logic_vector(3 downto 0);
     PIPETX0MARGIN : out std_logic_vector(2 downto 0);
     PIPETX0POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX0RATE : out std_logic_vector(1 downto 0);
     PIPETX0RCVRDET : out std_ulogic;
     PIPETX0RESET : out std_ulogic;
     PIPETX0STARTBLOCK : out std_ulogic;
     PIPETX0SWING : out std_ulogic;
     PIPETX0SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX1CHARISK : out std_logic_vector(1 downto 0);
     PIPETX1COMPLIANCE : out std_ulogic;
     PIPETX1DATA : out std_logic_vector(31 downto 0);
     PIPETX1DATAVALID : out std_ulogic;
     PIPETX1DEEMPH : out std_ulogic;
     PIPETX1ELECIDLE : out std_ulogic;
     PIPETX1EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX1EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX1EQPRESET : out std_logic_vector(3 downto 0);
     PIPETX1MARGIN : out std_logic_vector(2 downto 0);
     PIPETX1POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX1RATE : out std_logic_vector(1 downto 0);
     PIPETX1RCVRDET : out std_ulogic;
     PIPETX1RESET : out std_ulogic;
     PIPETX1STARTBLOCK : out std_ulogic;
     PIPETX1SWING : out std_ulogic;
     PIPETX1SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX2CHARISK : out std_logic_vector(1 downto 0);
     PIPETX2COMPLIANCE : out std_ulogic;
     PIPETX2DATA : out std_logic_vector(31 downto 0);
     PIPETX2DATAVALID : out std_ulogic;
     PIPETX2DEEMPH : out std_ulogic;
     PIPETX2ELECIDLE : out std_ulogic;
     PIPETX2EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX2EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX2EQPRESET : out std_logic_vector(3 downto 0);
     PIPETX2MARGIN : out std_logic_vector(2 downto 0);
     PIPETX2POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX2RATE : out std_logic_vector(1 downto 0);
     PIPETX2RCVRDET : out std_ulogic;
     PIPETX2RESET : out std_ulogic;
     PIPETX2STARTBLOCK : out std_ulogic;
     PIPETX2SWING : out std_ulogic;
     PIPETX2SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX3CHARISK : out std_logic_vector(1 downto 0);
     PIPETX3COMPLIANCE : out std_ulogic;
     PIPETX3DATA : out std_logic_vector(31 downto 0);
     PIPETX3DATAVALID : out std_ulogic;
     PIPETX3DEEMPH : out std_ulogic;
     PIPETX3ELECIDLE : out std_ulogic;
     PIPETX3EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX3EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX3EQPRESET : out std_logic_vector(3 downto 0);
     PIPETX3MARGIN : out std_logic_vector(2 downto 0);
     PIPETX3POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX3RATE : out std_logic_vector(1 downto 0);
     PIPETX3RCVRDET : out std_ulogic;
     PIPETX3RESET : out std_ulogic;
     PIPETX3STARTBLOCK : out std_ulogic;
     PIPETX3SWING : out std_ulogic;
     PIPETX3SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX4CHARISK : out std_logic_vector(1 downto 0);
     PIPETX4COMPLIANCE : out std_ulogic;
     PIPETX4DATA : out std_logic_vector(31 downto 0);
     PIPETX4DATAVALID : out std_ulogic;
     PIPETX4DEEMPH : out std_ulogic;
     PIPETX4ELECIDLE : out std_ulogic;
     PIPETX4EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX4EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX4EQPRESET : out std_logic_vector(3 downto 0);
     PIPETX4MARGIN : out std_logic_vector(2 downto 0);
     PIPETX4POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX4RATE : out std_logic_vector(1 downto 0);
     PIPETX4RCVRDET : out std_ulogic;
     PIPETX4RESET : out std_ulogic;
     PIPETX4STARTBLOCK : out std_ulogic;
     PIPETX4SWING : out std_ulogic;
     PIPETX4SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX5CHARISK : out std_logic_vector(1 downto 0);
     PIPETX5COMPLIANCE : out std_ulogic;
     PIPETX5DATA : out std_logic_vector(31 downto 0);
     PIPETX5DATAVALID : out std_ulogic;
     PIPETX5DEEMPH : out std_ulogic;
     PIPETX5ELECIDLE : out std_ulogic;
     PIPETX5EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX5EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX5EQPRESET : out std_logic_vector(3 downto 0);
     PIPETX5MARGIN : out std_logic_vector(2 downto 0);
     PIPETX5POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX5RATE : out std_logic_vector(1 downto 0);
     PIPETX5RCVRDET : out std_ulogic;
     PIPETX5RESET : out std_ulogic;
     PIPETX5STARTBLOCK : out std_ulogic;
     PIPETX5SWING : out std_ulogic;
     PIPETX5SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX6CHARISK : out std_logic_vector(1 downto 0);
     PIPETX6COMPLIANCE : out std_ulogic;
     PIPETX6DATA : out std_logic_vector(31 downto 0);
     PIPETX6DATAVALID : out std_ulogic;
     PIPETX6DEEMPH : out std_ulogic;
     PIPETX6ELECIDLE : out std_ulogic;
     PIPETX6EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX6EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX6EQPRESET : out std_logic_vector(3 downto 0);
     PIPETX6MARGIN : out std_logic_vector(2 downto 0);
     PIPETX6POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX6RATE : out std_logic_vector(1 downto 0);
     PIPETX6RCVRDET : out std_ulogic;
     PIPETX6RESET : out std_ulogic;
     PIPETX6STARTBLOCK : out std_ulogic;
     PIPETX6SWING : out std_ulogic;
     PIPETX6SYNCHEADER : out std_logic_vector(1 downto 0);
     PIPETX7CHARISK : out std_logic_vector(1 downto 0);
     PIPETX7COMPLIANCE : out std_ulogic;
     PIPETX7DATA : out std_logic_vector(31 downto 0);
     PIPETX7DATAVALID : out std_ulogic;
     PIPETX7DEEMPH : out std_ulogic;
     PIPETX7ELECIDLE : out std_ulogic;
     PIPETX7EQCONTROL : out std_logic_vector(1 downto 0);
     PIPETX7EQDEEMPH : out std_logic_vector(5 downto 0);
     PIPETX7EQPRESET : out std_logic_vector(3 downto 0);
     PIPETX7MARGIN : out std_logic_vector(2 downto 0);
     PIPETX7POWERDOWN : out std_logic_vector(1 downto 0);
     PIPETX7RATE : out std_logic_vector(1 downto 0);
     PIPETX7RCVRDET : out std_ulogic;
     PIPETX7RESET : out std_ulogic;
     PIPETX7STARTBLOCK : out std_ulogic;
     PIPETX7SWING : out std_ulogic;
     PIPETX7SYNCHEADER : out std_logic_vector(1 downto 0);
     PLEQINPROGRESS : out std_ulogic;
     PLEQPHASE : out std_logic_vector(1 downto 0);
     SAXISCCTREADY : out std_logic_vector(3 downto 0);
     SAXISRQTREADY : out std_logic_vector(3 downto 0);
     SPAREOUT : out std_logic_vector(31 downto 0);
     CFGCONFIGSPACEENABLE : in std_ulogic;
     CFGDEVID : in std_logic_vector(15 downto 0);
     CFGDSBUSNUMBER : in std_logic_vector(7 downto 0);
     CFGDSDEVICENUMBER : in std_logic_vector(4 downto 0);
     CFGDSFUNCTIONNUMBER : in std_logic_vector(2 downto 0);
     CFGDSN : in std_logic_vector(63 downto 0);
     CFGDSPORTNUMBER : in std_logic_vector(7 downto 0);
     CFGERRCORIN : in std_ulogic;
     CFGERRUNCORIN : in std_ulogic;
     CFGEXTREADDATA : in std_logic_vector(31 downto 0);
     CFGEXTREADDATAVALID : in std_ulogic;
     CFGFCSEL : in std_logic_vector(2 downto 0);
     CFGFLRDONE : in std_logic_vector(3 downto 0);
     CFGHOTRESETIN : in std_ulogic;
     CFGINTERRUPTINT : in std_logic_vector(3 downto 0);
     CFGINTERRUPTMSIATTR : in std_logic_vector(2 downto 0);
     CFGINTERRUPTMSIFUNCTIONNUMBER : in std_logic_vector(3 downto 0);
     CFGINTERRUPTMSIINT : in std_logic_vector(31 downto 0);
     CFGINTERRUPTMSIPENDINGSTATUS : in std_logic_vector(31 downto 0);
     CFGINTERRUPTMSIPENDINGSTATUSDATAENABLE : in std_ulogic;
     CFGINTERRUPTMSIPENDINGSTATUSFUNCTIONNUM : in std_logic_vector(3 downto 0);
     CFGINTERRUPTMSISELECT : in std_logic_vector(3 downto 0);
     CFGINTERRUPTMSITPHPRESENT : in std_ulogic;
     CFGINTERRUPTMSITPHSTTAG : in std_logic_vector(8 downto 0);
     CFGINTERRUPTMSITPHTYPE : in std_logic_vector(1 downto 0);
     CFGINTERRUPTMSIXADDRESS : in std_logic_vector(63 downto 0);
     CFGINTERRUPTMSIXDATA : in std_logic_vector(31 downto 0);
     CFGINTERRUPTMSIXINT : in std_ulogic;
     CFGINTERRUPTPENDING : in std_logic_vector(3 downto 0);
     CFGLINKTRAININGENABLE : in std_ulogic;
     CFGMGMTADDR : in std_logic_vector(18 downto 0);
     CFGMGMTBYTEENABLE : in std_logic_vector(3 downto 0);
     CFGMGMTREAD : in std_ulogic;
     CFGMGMTTYPE1CFGREGACCESS : in std_ulogic;
     CFGMGMTWRITE : in std_ulogic;
     CFGMGMTWRITEDATA : in std_logic_vector(31 downto 0);
     CFGMSGTRANSMIT : in std_ulogic;
     CFGMSGTRANSMITDATA : in std_logic_vector(31 downto 0);
     CFGMSGTRANSMITTYPE : in std_logic_vector(2 downto 0);
     CFGPERFUNCSTATUSCONTROL : in std_logic_vector(2 downto 0);
     CFGPERFUNCTIONNUMBER : in std_logic_vector(3 downto 0);
     CFGPERFUNCTIONOUTPUTREQUEST : in std_ulogic;
     CFGPOWERSTATECHANGEACK : in std_ulogic;
     CFGREQPMTRANSITIONL23READY : in std_ulogic;
     CFGREVID : in std_logic_vector(7 downto 0);
     CFGSUBSYSID : in std_logic_vector(15 downto 0);
     CFGSUBSYSVENDID : in std_logic_vector(15 downto 0);
     CFGTPHSTTREADDATA : in std_logic_vector(31 downto 0);
     CFGTPHSTTREADDATAVALID : in std_ulogic;
     CFGVENDID : in std_logic_vector(15 downto 0);
     CFGVFFLRDONE : in std_logic_vector(7 downto 0);
     CONFMCAPREQUESTBYCONF : in std_ulogic;
     CONFREQDATA : in std_logic_vector(31 downto 0);
     CONFREQREGNUM : in std_logic_vector(3 downto 0);
     CONFREQTYPE : in std_logic_vector(1 downto 0);
     CONFREQVALID : in std_ulogic;
     CORECLK : in std_ulogic;
     CORECLKMICOMPLETIONRAML : in std_ulogic;
     CORECLKMICOMPLETIONRAMU : in std_ulogic;
     CORECLKMIREPLAYRAM : in std_ulogic;
     CORECLKMIREQUESTRAM : in std_ulogic;
     DBGCFGLOCALMGMTREGOVERRIDE : in std_ulogic;
     DBGDATASEL : in std_logic_vector(3 downto 0);
     DRPADDR : in std_logic_vector(9 downto 0);
     DRPCLK : in std_ulogic;
     DRPDI : in std_logic_vector(15 downto 0);
     DRPEN : in std_ulogic;
     DRPWE : in std_ulogic;
     LL2LMSAXISTXTUSER : in std_logic_vector(13 downto 0);
     LL2LMSAXISTXTVALID : in std_ulogic;
     LL2LMTXTLPID0 : in std_logic_vector(3 downto 0);
     LL2LMTXTLPID1 : in std_logic_vector(3 downto 0);
     MAXISCQTREADY : in std_logic_vector(21 downto 0);
     MAXISRCTREADY : in std_logic_vector(21 downto 0);
     MCAPCLK : in std_ulogic;
     MGMTRESETN : in std_ulogic;
     MGMTSTICKYRESETN : in std_ulogic;
     MICOMPLETIONRAMREADDATA : in std_logic_vector(143 downto 0);
     MIREPLAYRAMREADDATA : in std_logic_vector(143 downto 0);
     MIREQUESTRAMREADDATA : in std_logic_vector(143 downto 0);
     PCIECQNPREQ : in std_ulogic;
     PIPECLK : in std_ulogic;
     PIPEEQFS : in std_logic_vector(5 downto 0);
     PIPEEQLF : in std_logic_vector(5 downto 0);
     PIPERESETN : in std_ulogic;
     PIPERX0CHARISK : in std_logic_vector(1 downto 0);
     PIPERX0DATA : in std_logic_vector(31 downto 0);
     PIPERX0DATAVALID : in std_ulogic;
     PIPERX0ELECIDLE : in std_ulogic;
     PIPERX0EQDONE : in std_ulogic;
     PIPERX0EQLPADAPTDONE : in std_ulogic;
     PIPERX0EQLPLFFSSEL : in std_ulogic;
     PIPERX0EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX0PHYSTATUS : in std_ulogic;
     PIPERX0STARTBLOCK : in std_ulogic;
     PIPERX0STATUS : in std_logic_vector(2 downto 0);
     PIPERX0SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX0VALID : in std_ulogic;
     PIPERX1CHARISK : in std_logic_vector(1 downto 0);
     PIPERX1DATA : in std_logic_vector(31 downto 0);
     PIPERX1DATAVALID : in std_ulogic;
     PIPERX1ELECIDLE : in std_ulogic;
     PIPERX1EQDONE : in std_ulogic;
     PIPERX1EQLPADAPTDONE : in std_ulogic;
     PIPERX1EQLPLFFSSEL : in std_ulogic;
     PIPERX1EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX1PHYSTATUS : in std_ulogic;
     PIPERX1STARTBLOCK : in std_ulogic;
     PIPERX1STATUS : in std_logic_vector(2 downto 0);
     PIPERX1SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX1VALID : in std_ulogic;
     PIPERX2CHARISK : in std_logic_vector(1 downto 0);
     PIPERX2DATA : in std_logic_vector(31 downto 0);
     PIPERX2DATAVALID : in std_ulogic;
     PIPERX2ELECIDLE : in std_ulogic;
     PIPERX2EQDONE : in std_ulogic;
     PIPERX2EQLPADAPTDONE : in std_ulogic;
     PIPERX2EQLPLFFSSEL : in std_ulogic;
     PIPERX2EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX2PHYSTATUS : in std_ulogic;
     PIPERX2STARTBLOCK : in std_ulogic;
     PIPERX2STATUS : in std_logic_vector(2 downto 0);
     PIPERX2SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX2VALID : in std_ulogic;
     PIPERX3CHARISK : in std_logic_vector(1 downto 0);
     PIPERX3DATA : in std_logic_vector(31 downto 0);
     PIPERX3DATAVALID : in std_ulogic;
     PIPERX3ELECIDLE : in std_ulogic;
     PIPERX3EQDONE : in std_ulogic;
     PIPERX3EQLPADAPTDONE : in std_ulogic;
     PIPERX3EQLPLFFSSEL : in std_ulogic;
     PIPERX3EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX3PHYSTATUS : in std_ulogic;
     PIPERX3STARTBLOCK : in std_ulogic;
     PIPERX3STATUS : in std_logic_vector(2 downto 0);
     PIPERX3SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX3VALID : in std_ulogic;
     PIPERX4CHARISK : in std_logic_vector(1 downto 0);
     PIPERX4DATA : in std_logic_vector(31 downto 0);
     PIPERX4DATAVALID : in std_ulogic;
     PIPERX4ELECIDLE : in std_ulogic;
     PIPERX4EQDONE : in std_ulogic;
     PIPERX4EQLPADAPTDONE : in std_ulogic;
     PIPERX4EQLPLFFSSEL : in std_ulogic;
     PIPERX4EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX4PHYSTATUS : in std_ulogic;
     PIPERX4STARTBLOCK : in std_ulogic;
     PIPERX4STATUS : in std_logic_vector(2 downto 0);
     PIPERX4SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX4VALID : in std_ulogic;
     PIPERX5CHARISK : in std_logic_vector(1 downto 0);
     PIPERX5DATA : in std_logic_vector(31 downto 0);
     PIPERX5DATAVALID : in std_ulogic;
     PIPERX5ELECIDLE : in std_ulogic;
     PIPERX5EQDONE : in std_ulogic;
     PIPERX5EQLPADAPTDONE : in std_ulogic;
     PIPERX5EQLPLFFSSEL : in std_ulogic;
     PIPERX5EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX5PHYSTATUS : in std_ulogic;
     PIPERX5STARTBLOCK : in std_ulogic;
     PIPERX5STATUS : in std_logic_vector(2 downto 0);
     PIPERX5SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX5VALID : in std_ulogic;
     PIPERX6CHARISK : in std_logic_vector(1 downto 0);
     PIPERX6DATA : in std_logic_vector(31 downto 0);
     PIPERX6DATAVALID : in std_ulogic;
     PIPERX6ELECIDLE : in std_ulogic;
     PIPERX6EQDONE : in std_ulogic;
     PIPERX6EQLPADAPTDONE : in std_ulogic;
     PIPERX6EQLPLFFSSEL : in std_ulogic;
     PIPERX6EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX6PHYSTATUS : in std_ulogic;
     PIPERX6STARTBLOCK : in std_ulogic;
     PIPERX6STATUS : in std_logic_vector(2 downto 0);
     PIPERX6SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX6VALID : in std_ulogic;
     PIPERX7CHARISK : in std_logic_vector(1 downto 0);
     PIPERX7DATA : in std_logic_vector(31 downto 0);
     PIPERX7DATAVALID : in std_ulogic;
     PIPERX7ELECIDLE : in std_ulogic;
     PIPERX7EQDONE : in std_ulogic;
     PIPERX7EQLPADAPTDONE : in std_ulogic;
     PIPERX7EQLPLFFSSEL : in std_ulogic;
     PIPERX7EQLPNEWTXCOEFFORPRESET : in std_logic_vector(17 downto 0);
     PIPERX7PHYSTATUS : in std_ulogic;
     PIPERX7STARTBLOCK : in std_ulogic;
     PIPERX7STATUS : in std_logic_vector(2 downto 0);
     PIPERX7SYNCHEADER : in std_logic_vector(1 downto 0);
     PIPERX7VALID : in std_ulogic;
     PIPETX0EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX0EQDONE : in std_ulogic;
     PIPETX1EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX1EQDONE : in std_ulogic;
     PIPETX2EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX2EQDONE : in std_ulogic;
     PIPETX3EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX3EQDONE : in std_ulogic;
     PIPETX4EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX4EQDONE : in std_ulogic;
     PIPETX5EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX5EQDONE : in std_ulogic;
     PIPETX6EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX6EQDONE : in std_ulogic;
     PIPETX7EQCOEFF : in std_logic_vector(17 downto 0);
     PIPETX7EQDONE : in std_ulogic;
     PLEQRESETEIEOSCOUNT : in std_ulogic;
     PLGEN2UPSTREAMPREFERDEEMPH : in std_ulogic;
     RESETN : in std_ulogic;
     SAXISCCTDATA : in std_logic_vector(255 downto 0);
     SAXISCCTKEEP : in std_logic_vector(7 downto 0);
     SAXISCCTLAST : in std_ulogic;
     SAXISCCTUSER : in std_logic_vector(32 downto 0);
     SAXISCCTVALID : in std_ulogic;
     SAXISRQTDATA : in std_logic_vector(255 downto 0);
     SAXISRQTKEEP : in std_logic_vector(7 downto 0);
     SAXISRQTLAST : in std_ulogic;
     SAXISRQTUSER : in std_logic_vector(59 downto 0);
     SAXISRQTVALID : in std_ulogic;
     SPAREIN : in std_logic_vector(31 downto 0);
     USERCLK : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  PCIE_3_1 : component is "PRIMITIVE";

----- component PHASER_IN -----
component PHASER_IN
  generic (
     CLKOUT_DIV : integer := 4;
     DQS_BIAS_MODE : string := "FALSE";
     EN_ISERDES_RST : string := "FALSE";
     FINE_DELAY : integer := 0;
     FREQ_REF_DIV : string := "NONE";
     IS_RST_INVERTED : std_ulogic := '0';
     MEMREFCLK_PERIOD : real := 0.000;
     OUTPUT_CLK_SRC : string := "PHASE_REF";
     PHASEREFCLK_PERIOD : real := 0.000;
     REFCLK_PERIOD : real := 0.000;
     SEL_CLK_OFFSET : integer := 5;
     SYNC_IN_DIV_RST : string := "FALSE"
  );
  port (
     COUNTERREADVAL : out std_logic_vector(5 downto 0);
     FINEOVERFLOW : out std_ulogic;
     ICLK : out std_ulogic;
     ICLKDIV : out std_ulogic;
     ISERDESRST : out std_ulogic;
     RCLK : out std_ulogic;
     COUNTERLOADEN : in std_ulogic;
     COUNTERLOADVAL : in std_logic_vector(5 downto 0);
     COUNTERREADEN : in std_ulogic;
     DIVIDERST : in std_ulogic;
     EDGEADV : in std_ulogic;
     FINEENABLE : in std_ulogic;
     FINEINC : in std_ulogic;
     FREQREFCLK : in std_ulogic;
     MEMREFCLK : in std_ulogic;
     PHASEREFCLK : in std_ulogic;
     RANKSEL : in std_logic_vector(1 downto 0);
     RST : in std_ulogic;
     SYNCIN : in std_ulogic;
     SYSCLK : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  PHASER_IN : component is "PRIMITIVE";

----- component PHASER_IN_PHY -----
component PHASER_IN_PHY
  generic (
     BURST_MODE : string := "FALSE";
     CLKOUT_DIV : integer := 4;
     DQS_AUTO_RECAL : bit := '1';
     DQS_BIAS_MODE : string := "FALSE";
     DQS_FIND_PATTERN : bit_vector := "001";
     FINE_DELAY : integer := 0;
     FREQ_REF_DIV : string := "NONE";
     IS_RST_INVERTED : std_ulogic := '0';
     MEMREFCLK_PERIOD : real := 0.000;
     OUTPUT_CLK_SRC : string := "PHASE_REF";
     PHASEREFCLK_PERIOD : real := 0.000;
     REFCLK_PERIOD : real := 0.000;
     SEL_CLK_OFFSET : integer := 5;
     SYNC_IN_DIV_RST : string := "FALSE";
     WR_CYCLES : string := "FALSE"
  );
  port (
     COUNTERREADVAL : out std_logic_vector(5 downto 0);
     DQSFOUND : out std_ulogic;
     DQSOUTOFRANGE : out std_ulogic;
     FINEOVERFLOW : out std_ulogic;
     ICLK : out std_ulogic;
     ICLKDIV : out std_ulogic;
     ISERDESRST : out std_ulogic;
     PHASELOCKED : out std_ulogic;
     RCLK : out std_ulogic;
     WRENABLE : out std_ulogic;
     BURSTPENDINGPHY : in std_ulogic;
     COUNTERLOADEN : in std_ulogic;
     COUNTERLOADVAL : in std_logic_vector(5 downto 0);
     COUNTERREADEN : in std_ulogic;
     ENCALIBPHY : in std_logic_vector(1 downto 0);
     FINEENABLE : in std_ulogic;
     FINEINC : in std_ulogic;
     FREQREFCLK : in std_ulogic;
     MEMREFCLK : in std_ulogic;
     PHASEREFCLK : in std_ulogic;
     RANKSELPHY : in std_logic_vector(1 downto 0);
     RST : in std_ulogic;
     RSTDQSFIND : in std_ulogic;
     SYNCIN : in std_ulogic;
     SYSCLK : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  PHASER_IN_PHY : component is "PRIMITIVE";

----- component PHASER_OUT -----
component PHASER_OUT
  generic (
     CLKOUT_DIV : integer := 4;
     COARSE_BYPASS : string := "FALSE";
     COARSE_DELAY : integer := 0;
     EN_OSERDES_RST : string := "FALSE";
     FINE_DELAY : integer := 0;
     IS_RST_INVERTED : std_ulogic := '0';
     MEMREFCLK_PERIOD : real := 0.000;
     OCLKDELAY_INV : string := "FALSE";
     OCLK_DELAY : integer := 0;
     OUTPUT_CLK_SRC : string := "PHASE_REF";
     PHASEREFCLK_PERIOD : real := 0.000;
     PO : bit_vector := "000";
     REFCLK_PERIOD : real := 0.000;
     SYNC_IN_DIV_RST : string := "FALSE"
  );
  port (
     COARSEOVERFLOW : out std_ulogic;
     COUNTERREADVAL : out std_logic_vector(8 downto 0);
     FINEOVERFLOW : out std_ulogic;
     OCLK : out std_ulogic;
     OCLKDELAYED : out std_ulogic;
     OCLKDIV : out std_ulogic;
     OSERDESRST : out std_ulogic;
     COARSEENABLE : in std_ulogic;
     COARSEINC : in std_ulogic;
     COUNTERLOADEN : in std_ulogic;
     COUNTERLOADVAL : in std_logic_vector(8 downto 0);
     COUNTERREADEN : in std_ulogic;
     DIVIDERST : in std_ulogic;
     EDGEADV : in std_ulogic;
     FINEENABLE : in std_ulogic;
     FINEINC : in std_ulogic;
     FREQREFCLK : in std_ulogic;
     MEMREFCLK : in std_ulogic;
     PHASEREFCLK : in std_ulogic;
     RST : in std_ulogic;
     SELFINEOCLKDELAY : in std_ulogic;
     SYNCIN : in std_ulogic;
     SYSCLK : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  PHASER_OUT : component is "PRIMITIVE";

----- component PHASER_OUT_PHY -----
component PHASER_OUT_PHY
  generic (
     CLKOUT_DIV : integer := 4;
     COARSE_BYPASS : string := "FALSE";
     COARSE_DELAY : integer := 0;
     DATA_CTL_N : string := "FALSE";
     DATA_RD_CYCLES : string := "FALSE";
     FINE_DELAY : integer := 0;
     IS_RST_INVERTED : std_ulogic := '0';
     MEMREFCLK_PERIOD : real := 0.000;
     OCLKDELAY_INV : string := "FALSE";
     OCLK_DELAY : integer := 0;
     OUTPUT_CLK_SRC : string := "PHASE_REF";
     PHASEREFCLK_PERIOD : real := 0.000;
     PO : bit_vector := "000";
     REFCLK_PERIOD : real := 0.000;
     SYNC_IN_DIV_RST : string := "FALSE"
  );
  port (
     COARSEOVERFLOW : out std_ulogic;
     COUNTERREADVAL : out std_logic_vector(8 downto 0);
     CTSBUS : out std_logic_vector(1 downto 0);
     DQSBUS : out std_logic_vector(1 downto 0);
     DTSBUS : out std_logic_vector(1 downto 0);
     FINEOVERFLOW : out std_ulogic;
     OCLK : out std_ulogic;
     OCLKDELAYED : out std_ulogic;
     OCLKDIV : out std_ulogic;
     OSERDESRST : out std_ulogic;
     RDENABLE : out std_ulogic;
     BURSTPENDINGPHY : in std_ulogic;
     COARSEENABLE : in std_ulogic;
     COARSEINC : in std_ulogic;
     COUNTERLOADEN : in std_ulogic;
     COUNTERLOADVAL : in std_logic_vector(8 downto 0);
     COUNTERREADEN : in std_ulogic;
     ENCALIBPHY : in std_logic_vector(1 downto 0);
     FINEENABLE : in std_ulogic;
     FINEINC : in std_ulogic;
     FREQREFCLK : in std_ulogic;
     MEMREFCLK : in std_ulogic;
     PHASEREFCLK : in std_ulogic;
     RST : in std_ulogic;
     SELFINEOCLKDELAY : in std_ulogic;
     SYNCIN : in std_ulogic;
     SYSCLK : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  PHASER_OUT_PHY : component is "PRIMITIVE";

----- component PHASER_REF -----
component PHASER_REF
  generic (
     IS_PWRDWN_INVERTED : std_ulogic := '0';
     IS_RST_INVERTED : std_ulogic := '0'
  );
  port (
     LOCKED : out std_ulogic;
     CLKIN : in std_ulogic;
     PWRDWN : in std_ulogic;
     RST : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  PHASER_REF : component is "PRIMITIVE";

----- component PHY_CONTROL -----
component PHY_CONTROL
  generic (
     AO_TOGGLE : integer := 0;
     AO_WRLVL_EN : bit_vector := "0000";
     BURST_MODE : string := "FALSE";
     CLK_RATIO : integer := 1;
     CMD_OFFSET : integer := 0;
     CO_DURATION : integer := 0;
     DATA_CTL_A_N : string := "FALSE";
     DATA_CTL_B_N : string := "FALSE";
     DATA_CTL_C_N : string := "FALSE";
     DATA_CTL_D_N : string := "FALSE";
     DISABLE_SEQ_MATCH : string := "TRUE";
     DI_DURATION : integer := 0;
     DO_DURATION : integer := 0;
     EVENTS_DELAY : integer := 63;
     FOUR_WINDOW_CLOCKS : integer := 63;
     MULTI_REGION : string := "FALSE";
     PHY_COUNT_ENABLE : string := "FALSE";
     RD_CMD_OFFSET_0 : integer := 0;
     RD_CMD_OFFSET_1 : integer := 00;
     RD_CMD_OFFSET_2 : integer := 0;
     RD_CMD_OFFSET_3 : integer := 0;
     RD_DURATION_0 : integer := 0;
     RD_DURATION_1 : integer := 0;
     RD_DURATION_2 : integer := 0;
     RD_DURATION_3 : integer := 0;
     SYNC_MODE : string := "FALSE";
     WR_CMD_OFFSET_0 : integer := 0;
     WR_CMD_OFFSET_1 : integer := 0;
     WR_CMD_OFFSET_2 : integer := 0;
     WR_CMD_OFFSET_3 : integer := 0;
     WR_DURATION_0 : integer := 0;
     WR_DURATION_1 : integer := 0;
     WR_DURATION_2 : integer := 0;
     WR_DURATION_3 : integer := 0
  );
  port (
     AUXOUTPUT : out std_logic_vector(3 downto 0);
     INBURSTPENDING : out std_logic_vector(3 downto 0);
     INRANKA : out std_logic_vector(1 downto 0);
     INRANKB : out std_logic_vector(1 downto 0);
     INRANKC : out std_logic_vector(1 downto 0);
     INRANKD : out std_logic_vector(1 downto 0);
     OUTBURSTPENDING : out std_logic_vector(3 downto 0);
     PCENABLECALIB : out std_logic_vector(1 downto 0);
     PHYCTLALMOSTFULL : out std_ulogic;
     PHYCTLEMPTY : out std_ulogic;
     PHYCTLFULL : out std_ulogic;
     PHYCTLREADY : out std_ulogic;
     MEMREFCLK : in std_ulogic;
     PHYCLK : in std_ulogic;
     PHYCTLMSTREMPTY : in std_ulogic;
     PHYCTLWD : in std_logic_vector(31 downto 0);
     PHYCTLWRENABLE : in std_ulogic;
     PLLLOCK : in std_ulogic;
     READCALIBENABLE : in std_ulogic;
     REFDLLLOCK : in std_ulogic;
     RESET : in std_ulogic;
     SYNCIN : in std_ulogic;
     WRITECALIBENABLE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  PHY_CONTROL : component is "PRIMITIVE";

----- component PLLE2_ADV -----
component PLLE2_ADV
  generic (
     BANDWIDTH : string := "OPTIMIZED";
     CLKFBOUT_MULT : integer := 5;
     CLKFBOUT_PHASE : real := 0.0;
     CLKIN1_PERIOD : real := 0.0;
     CLKIN2_PERIOD : real := 0.0;
     CLKOUT0_DIVIDE : integer := 1;
     CLKOUT0_DUTY_CYCLE : real := 0.5;
     CLKOUT0_PHASE : real := 0.0;
     CLKOUT1_DIVIDE : integer := 1;
     CLKOUT1_DUTY_CYCLE : real := 0.5;
     CLKOUT1_PHASE : real := 0.0;
     CLKOUT2_DIVIDE : integer := 1;
     CLKOUT2_DUTY_CYCLE : real := 0.5;
     CLKOUT2_PHASE : real := 0.0;
     CLKOUT3_DIVIDE : integer := 1;
     CLKOUT3_DUTY_CYCLE : real := 0.5;
     CLKOUT3_PHASE : real := 0.0;
     CLKOUT4_DIVIDE : integer := 1;
     CLKOUT4_DUTY_CYCLE : real := 0.5;
     CLKOUT4_PHASE : real := 0.0;
     CLKOUT5_DIVIDE : integer := 1;
     CLKOUT5_DUTY_CYCLE : real := 0.5;
     CLKOUT5_PHASE : real := 0.0;
     COMPENSATION : string := "ZHOLD";
     DIVCLK_DIVIDE : integer := 1;
     IS_CLKINSEL_INVERTED : std_ulogic := '0';
     IS_PWRDWN_INVERTED : std_ulogic := '0';
     IS_RST_INVERTED : std_ulogic := '0';
     REF_JITTER1 : real := 0.0;
     REF_JITTER2 : real := 0.0;
     STARTUP_WAIT : string := "FALSE"
  );
  port (
     CLKFBOUT : out std_ulogic := '0';
     CLKOUT0 : out std_ulogic := '0';
     CLKOUT1 : out std_ulogic := '0';
     CLKOUT2 : out std_ulogic := '0';
     CLKOUT3 : out std_ulogic := '0';
     CLKOUT4 : out std_ulogic := '0';
     CLKOUT5 : out std_ulogic := '0';
     DO : out std_logic_vector (15 downto 0);
     DRDY : out std_ulogic := '0';
     LOCKED : out std_ulogic := '0';
     CLKFBIN : in std_ulogic;
     CLKIN1 : in std_ulogic;
     CLKIN2 : in std_ulogic;
     CLKINSEL : in std_ulogic;
     DADDR : in std_logic_vector(6 downto 0);
     DCLK : in std_ulogic;
     DEN : in std_ulogic;
     DI : in std_logic_vector(15 downto 0);
     DWE : in std_ulogic;
     PWRDWN : in std_ulogic;
     RST : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  PLLE2_ADV : component is "PRIMITIVE";

----- component PLLE2_BASE -----
component PLLE2_BASE
  generic (
     BANDWIDTH : string := "OPTIMIZED";
     CLKFBOUT_MULT : integer := 5;
     CLKFBOUT_PHASE : real := 0.000;
     CLKIN1_PERIOD : real := 0.000;
     CLKOUT0_DIVIDE : integer := 1;
     CLKOUT0_DUTY_CYCLE : real := 0.500;
     CLKOUT0_PHASE : real := 0.000;
     CLKOUT1_DIVIDE : integer := 1;
     CLKOUT1_DUTY_CYCLE : real := 0.500;
     CLKOUT1_PHASE : real := 0.000;
     CLKOUT2_DIVIDE : integer := 1;
     CLKOUT2_DUTY_CYCLE : real := 0.500;
     CLKOUT2_PHASE : real := 0.000;
     CLKOUT3_DIVIDE : integer := 1;
     CLKOUT3_DUTY_CYCLE : real := 0.500;
     CLKOUT3_PHASE : real := 0.000;
     CLKOUT4_DIVIDE : integer := 1;
     CLKOUT4_DUTY_CYCLE : real := 0.500;
     CLKOUT4_PHASE : real := 0.000;
     CLKOUT5_DIVIDE : integer := 1;
     CLKOUT5_DUTY_CYCLE : real := 0.500;
     CLKOUT5_PHASE : real := 0.000;
     DIVCLK_DIVIDE : integer := 1;
     REF_JITTER1 : real := 0.010;
     STARTUP_WAIT : string := "FALSE"
  );
  port (
     CLKFBOUT : out std_ulogic;
     CLKOUT0 : out std_ulogic;
     CLKOUT1 : out std_ulogic;
     CLKOUT2 : out std_ulogic;
     CLKOUT3 : out std_ulogic;
     CLKOUT4 : out std_ulogic;
     CLKOUT5 : out std_ulogic;
     LOCKED : out std_ulogic;
     CLKFBIN : in std_ulogic;
     CLKIN1 : in std_ulogic;
     PWRDWN : in std_ulogic;
     RST : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  PLLE2_BASE : component is "PRIMITIVE";

----- component PLLE3_ADV -----
component PLLE3_ADV
  generic (
     CLKFBOUT_MULT : integer := 5;
     CLKFBOUT_PHASE : real := 0.000;
     CLKIN_PERIOD : real := 0.000;
     CLKOUT0_DIVIDE : integer := 1;
     CLKOUT0_DUTY_CYCLE : real := 0.500;
     CLKOUT0_PHASE : real := 0.000;
     CLKOUT1_DIVIDE : integer := 1;
     CLKOUT1_DUTY_CYCLE : real := 0.500;
     CLKOUT1_PHASE : real := 0.000;
     CLKOUTPHY_MODE : string := "VCO_2X";
     COMPENSATION : string := "AUTO";
     DIVCLK_DIVIDE : integer := 1;
     IS_CLKFBIN_INVERTED : std_ulogic := '0';
     IS_CLKIN_INVERTED : std_ulogic := '0';
     IS_PWRDWN_INVERTED : std_ulogic := '0';
     IS_RST_INVERTED : std_ulogic := '0';
     REF_JITTER : real := 0.010;
     STARTUP_WAIT : string := "FALSE"
  );
  port (
     CLKFBOUT : out std_ulogic;
     CLKOUT0 : out std_ulogic;
     CLKOUT0B : out std_ulogic;
     CLKOUT1 : out std_ulogic;
     CLKOUT1B : out std_ulogic;
     CLKOUTPHY : out std_ulogic;
     DO : out std_logic_vector(15 downto 0);
     DRDY : out std_ulogic;
     LOCKED : out std_ulogic;
     CLKFBIN : in std_ulogic;
     CLKIN : in std_ulogic;
     CLKOUTPHYEN : in std_ulogic;
     DADDR : in std_logic_vector(6 downto 0);
     DCLK : in std_ulogic;
     DEN : in std_ulogic;
     DI : in std_logic_vector(15 downto 0);
     DWE : in std_ulogic;
     PWRDWN : in std_ulogic;
     RST : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  PLLE3_ADV : component is "PRIMITIVE";

----- component PLLE3_BASE -----
component PLLE3_BASE
  generic (
     CLKFBOUT_MULT : integer := 5;
     CLKFBOUT_PHASE : real := 0.000;
     CLKIN_PERIOD : real := 0.000;
     CLKOUT0_DIVIDE : integer := 1;
     CLKOUT0_DUTY_CYCLE : real := 0.500;
     CLKOUT0_PHASE : real := 0.000;
     CLKOUT1_DIVIDE : integer := 1;
     CLKOUT1_DUTY_CYCLE : real := 0.500;
     CLKOUT1_PHASE : real := 0.000;
     CLKOUTPHY_MODE : string := "VCO_2X";
     DIVCLK_DIVIDE : integer := 1;
     IS_CLKFBIN_INVERTED : std_ulogic := '0';
     IS_CLKIN_INVERTED : std_ulogic := '0';
     IS_PWRDWN_INVERTED : std_ulogic := '0';
     IS_RST_INVERTED : std_ulogic := '0';
     REF_JITTER : real := 0.010;
     STARTUP_WAIT : string := "FALSE"
  );
  port (
     CLKFBOUT : out std_ulogic;
     CLKOUT0 : out std_ulogic;
     CLKOUT0B : out std_ulogic;
     CLKOUT1 : out std_ulogic;
     CLKOUT1B : out std_ulogic;
     CLKOUTPHY : out std_ulogic;
     LOCKED : out std_ulogic;
     CLKFBIN : in std_ulogic;
     CLKIN : in std_ulogic;
     CLKOUTPHYEN : in std_ulogic;
     PWRDWN : in std_ulogic;
     RST : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  PLLE3_BASE : component is "PRIMITIVE";

----- component PS7 -----
component PS7
  port (
     DMA0DATYPE : out std_logic_vector(1 downto 0);
     DMA0DAVALID : out std_ulogic;
     DMA0DRREADY : out std_ulogic;
     DMA0RSTN : out std_ulogic;
     DMA1DATYPE : out std_logic_vector(1 downto 0);
     DMA1DAVALID : out std_ulogic;
     DMA1DRREADY : out std_ulogic;
     DMA1RSTN : out std_ulogic;
     DMA2DATYPE : out std_logic_vector(1 downto 0);
     DMA2DAVALID : out std_ulogic;
     DMA2DRREADY : out std_ulogic;
     DMA2RSTN : out std_ulogic;
     DMA3DATYPE : out std_logic_vector(1 downto 0);
     DMA3DAVALID : out std_ulogic;
     DMA3DRREADY : out std_ulogic;
     DMA3RSTN : out std_ulogic;
     EMIOCAN0PHYTX : out std_ulogic;
     EMIOCAN1PHYTX : out std_ulogic;
     EMIOENET0GMIITXD : out std_logic_vector(7 downto 0);
     EMIOENET0GMIITXEN : out std_ulogic;
     EMIOENET0GMIITXER : out std_ulogic;
     EMIOENET0MDIOMDC : out std_ulogic;
     EMIOENET0MDIOO : out std_ulogic;
     EMIOENET0MDIOTN : out std_ulogic;
     EMIOENET0PTPDELAYREQRX : out std_ulogic;
     EMIOENET0PTPDELAYREQTX : out std_ulogic;
     EMIOENET0PTPPDELAYREQRX : out std_ulogic;
     EMIOENET0PTPPDELAYREQTX : out std_ulogic;
     EMIOENET0PTPPDELAYRESPRX : out std_ulogic;
     EMIOENET0PTPPDELAYRESPTX : out std_ulogic;
     EMIOENET0PTPSYNCFRAMERX : out std_ulogic;
     EMIOENET0PTPSYNCFRAMETX : out std_ulogic;
     EMIOENET0SOFRX : out std_ulogic;
     EMIOENET0SOFTX : out std_ulogic;
     EMIOENET1GMIITXD : out std_logic_vector(7 downto 0);
     EMIOENET1GMIITXEN : out std_ulogic;
     EMIOENET1GMIITXER : out std_ulogic;
     EMIOENET1MDIOMDC : out std_ulogic;
     EMIOENET1MDIOO : out std_ulogic;
     EMIOENET1MDIOTN : out std_ulogic;
     EMIOENET1PTPDELAYREQRX : out std_ulogic;
     EMIOENET1PTPDELAYREQTX : out std_ulogic;
     EMIOENET1PTPPDELAYREQRX : out std_ulogic;
     EMIOENET1PTPPDELAYREQTX : out std_ulogic;
     EMIOENET1PTPPDELAYRESPRX : out std_ulogic;
     EMIOENET1PTPPDELAYRESPTX : out std_ulogic;
     EMIOENET1PTPSYNCFRAMERX : out std_ulogic;
     EMIOENET1PTPSYNCFRAMETX : out std_ulogic;
     EMIOENET1SOFRX : out std_ulogic;
     EMIOENET1SOFTX : out std_ulogic;
     EMIOGPIOO : out std_logic_vector(63 downto 0);
     EMIOGPIOTN : out std_logic_vector(63 downto 0);
     EMIOI2C0SCLO : out std_ulogic;
     EMIOI2C0SCLTN : out std_ulogic;
     EMIOI2C0SDAO : out std_ulogic;
     EMIOI2C0SDATN : out std_ulogic;
     EMIOI2C1SCLO : out std_ulogic;
     EMIOI2C1SCLTN : out std_ulogic;
     EMIOI2C1SDAO : out std_ulogic;
     EMIOI2C1SDATN : out std_ulogic;
     EMIOPJTAGTDO : out std_ulogic;
     EMIOPJTAGTDTN : out std_ulogic;
     EMIOSDIO0BUSPOW : out std_ulogic;
     EMIOSDIO0BUSVOLT : out std_logic_vector(2 downto 0);
     EMIOSDIO0CLK : out std_ulogic;
     EMIOSDIO0CMDO : out std_ulogic;
     EMIOSDIO0CMDTN : out std_ulogic;
     EMIOSDIO0DATAO : out std_logic_vector(3 downto 0);
     EMIOSDIO0DATATN : out std_logic_vector(3 downto 0);
     EMIOSDIO0LED : out std_ulogic;
     EMIOSDIO1BUSPOW : out std_ulogic;
     EMIOSDIO1BUSVOLT : out std_logic_vector(2 downto 0);
     EMIOSDIO1CLK : out std_ulogic;
     EMIOSDIO1CMDO : out std_ulogic;
     EMIOSDIO1CMDTN : out std_ulogic;
     EMIOSDIO1DATAO : out std_logic_vector(3 downto 0);
     EMIOSDIO1DATATN : out std_logic_vector(3 downto 0);
     EMIOSDIO1LED : out std_ulogic;
     EMIOSPI0MO : out std_ulogic;
     EMIOSPI0MOTN : out std_ulogic;
     EMIOSPI0SCLKO : out std_ulogic;
     EMIOSPI0SCLKTN : out std_ulogic;
     EMIOSPI0SO : out std_ulogic;
     EMIOSPI0SSNTN : out std_ulogic;
     EMIOSPI0SSON : out std_logic_vector(2 downto 0);
     EMIOSPI0STN : out std_ulogic;
     EMIOSPI1MO : out std_ulogic;
     EMIOSPI1MOTN : out std_ulogic;
     EMIOSPI1SCLKO : out std_ulogic;
     EMIOSPI1SCLKTN : out std_ulogic;
     EMIOSPI1SO : out std_ulogic;
     EMIOSPI1SSNTN : out std_ulogic;
     EMIOSPI1SSON : out std_logic_vector(2 downto 0);
     EMIOSPI1STN : out std_ulogic;
     EMIOTRACECTL : out std_ulogic;
     EMIOTRACEDATA : out std_logic_vector(31 downto 0);
     EMIOTTC0WAVEO : out std_logic_vector(2 downto 0);
     EMIOTTC1WAVEO : out std_logic_vector(2 downto 0);
     EMIOUART0DTRN : out std_ulogic;
     EMIOUART0RTSN : out std_ulogic;
     EMIOUART0TX : out std_ulogic;
     EMIOUART1DTRN : out std_ulogic;
     EMIOUART1RTSN : out std_ulogic;
     EMIOUART1TX : out std_ulogic;
     EMIOUSB0PORTINDCTL : out std_logic_vector(1 downto 0);
     EMIOUSB0VBUSPWRSELECT : out std_ulogic;
     EMIOUSB1PORTINDCTL : out std_logic_vector(1 downto 0);
     EMIOUSB1VBUSPWRSELECT : out std_ulogic;
     EMIOWDTRSTO : out std_ulogic;
     EVENTEVENTO : out std_ulogic;
     EVENTSTANDBYWFE : out std_logic_vector(1 downto 0);
     EVENTSTANDBYWFI : out std_logic_vector(1 downto 0);
     FCLKCLK : out std_logic_vector(3 downto 0);
     FCLKRESETN : out std_logic_vector(3 downto 0);
     FTMTF2PTRIGACK : out std_logic_vector(3 downto 0);
     FTMTP2FDEBUG : out std_logic_vector(31 downto 0);
     FTMTP2FTRIG : out std_logic_vector(3 downto 0);
     IRQP2F : out std_logic_vector(28 downto 0);
     MAXIGP0ARADDR : out std_logic_vector(31 downto 0);
     MAXIGP0ARBURST : out std_logic_vector(1 downto 0);
     MAXIGP0ARCACHE : out std_logic_vector(3 downto 0);
     MAXIGP0ARESETN : out std_ulogic;
     MAXIGP0ARID : out std_logic_vector(11 downto 0);
     MAXIGP0ARLEN : out std_logic_vector(3 downto 0);
     MAXIGP0ARLOCK : out std_logic_vector(1 downto 0);
     MAXIGP0ARPROT : out std_logic_vector(2 downto 0);
     MAXIGP0ARQOS : out std_logic_vector(3 downto 0);
     MAXIGP0ARSIZE : out std_logic_vector(1 downto 0);
     MAXIGP0ARVALID : out std_ulogic;
     MAXIGP0AWADDR : out std_logic_vector(31 downto 0);
     MAXIGP0AWBURST : out std_logic_vector(1 downto 0);
     MAXIGP0AWCACHE : out std_logic_vector(3 downto 0);
     MAXIGP0AWID : out std_logic_vector(11 downto 0);
     MAXIGP0AWLEN : out std_logic_vector(3 downto 0);
     MAXIGP0AWLOCK : out std_logic_vector(1 downto 0);
     MAXIGP0AWPROT : out std_logic_vector(2 downto 0);
     MAXIGP0AWQOS : out std_logic_vector(3 downto 0);
     MAXIGP0AWSIZE : out std_logic_vector(1 downto 0);
     MAXIGP0AWVALID : out std_ulogic;
     MAXIGP0BREADY : out std_ulogic;
     MAXIGP0RREADY : out std_ulogic;
     MAXIGP0WDATA : out std_logic_vector(31 downto 0);
     MAXIGP0WID : out std_logic_vector(11 downto 0);
     MAXIGP0WLAST : out std_ulogic;
     MAXIGP0WSTRB : out std_logic_vector(3 downto 0);
     MAXIGP0WVALID : out std_ulogic;
     MAXIGP1ARADDR : out std_logic_vector(31 downto 0);
     MAXIGP1ARBURST : out std_logic_vector(1 downto 0);
     MAXIGP1ARCACHE : out std_logic_vector(3 downto 0);
     MAXIGP1ARESETN : out std_ulogic;
     MAXIGP1ARID : out std_logic_vector(11 downto 0);
     MAXIGP1ARLEN : out std_logic_vector(3 downto 0);
     MAXIGP1ARLOCK : out std_logic_vector(1 downto 0);
     MAXIGP1ARPROT : out std_logic_vector(2 downto 0);
     MAXIGP1ARQOS : out std_logic_vector(3 downto 0);
     MAXIGP1ARSIZE : out std_logic_vector(1 downto 0);
     MAXIGP1ARVALID : out std_ulogic;
     MAXIGP1AWADDR : out std_logic_vector(31 downto 0);
     MAXIGP1AWBURST : out std_logic_vector(1 downto 0);
     MAXIGP1AWCACHE : out std_logic_vector(3 downto 0);
     MAXIGP1AWID : out std_logic_vector(11 downto 0);
     MAXIGP1AWLEN : out std_logic_vector(3 downto 0);
     MAXIGP1AWLOCK : out std_logic_vector(1 downto 0);
     MAXIGP1AWPROT : out std_logic_vector(2 downto 0);
     MAXIGP1AWQOS : out std_logic_vector(3 downto 0);
     MAXIGP1AWSIZE : out std_logic_vector(1 downto 0);
     MAXIGP1AWVALID : out std_ulogic;
     MAXIGP1BREADY : out std_ulogic;
     MAXIGP1RREADY : out std_ulogic;
     MAXIGP1WDATA : out std_logic_vector(31 downto 0);
     MAXIGP1WID : out std_logic_vector(11 downto 0);
     MAXIGP1WLAST : out std_ulogic;
     MAXIGP1WSTRB : out std_logic_vector(3 downto 0);
     MAXIGP1WVALID : out std_ulogic;
     SAXIACPARESETN : out std_ulogic;
     SAXIACPARREADY : out std_ulogic;
     SAXIACPAWREADY : out std_ulogic;
     SAXIACPBID : out std_logic_vector(2 downto 0);
     SAXIACPBRESP : out std_logic_vector(1 downto 0);
     SAXIACPBVALID : out std_ulogic;
     SAXIACPRDATA : out std_logic_vector(63 downto 0);
     SAXIACPRID : out std_logic_vector(2 downto 0);
     SAXIACPRLAST : out std_ulogic;
     SAXIACPRRESP : out std_logic_vector(1 downto 0);
     SAXIACPRVALID : out std_ulogic;
     SAXIACPWREADY : out std_ulogic;
     SAXIGP0ARESETN : out std_ulogic;
     SAXIGP0ARREADY : out std_ulogic;
     SAXIGP0AWREADY : out std_ulogic;
     SAXIGP0BID : out std_logic_vector(5 downto 0);
     SAXIGP0BRESP : out std_logic_vector(1 downto 0);
     SAXIGP0BVALID : out std_ulogic;
     SAXIGP0RDATA : out std_logic_vector(31 downto 0);
     SAXIGP0RID : out std_logic_vector(5 downto 0);
     SAXIGP0RLAST : out std_ulogic;
     SAXIGP0RRESP : out std_logic_vector(1 downto 0);
     SAXIGP0RVALID : out std_ulogic;
     SAXIGP0WREADY : out std_ulogic;
     SAXIGP1ARESETN : out std_ulogic;
     SAXIGP1ARREADY : out std_ulogic;
     SAXIGP1AWREADY : out std_ulogic;
     SAXIGP1BID : out std_logic_vector(5 downto 0);
     SAXIGP1BRESP : out std_logic_vector(1 downto 0);
     SAXIGP1BVALID : out std_ulogic;
     SAXIGP1RDATA : out std_logic_vector(31 downto 0);
     SAXIGP1RID : out std_logic_vector(5 downto 0);
     SAXIGP1RLAST : out std_ulogic;
     SAXIGP1RRESP : out std_logic_vector(1 downto 0);
     SAXIGP1RVALID : out std_ulogic;
     SAXIGP1WREADY : out std_ulogic;
     SAXIHP0ARESETN : out std_ulogic;
     SAXIHP0ARREADY : out std_ulogic;
     SAXIHP0AWREADY : out std_ulogic;
     SAXIHP0BID : out std_logic_vector(5 downto 0);
     SAXIHP0BRESP : out std_logic_vector(1 downto 0);
     SAXIHP0BVALID : out std_ulogic;
     SAXIHP0RACOUNT : out std_logic_vector(2 downto 0);
     SAXIHP0RCOUNT : out std_logic_vector(7 downto 0);
     SAXIHP0RDATA : out std_logic_vector(63 downto 0);
     SAXIHP0RID : out std_logic_vector(5 downto 0);
     SAXIHP0RLAST : out std_ulogic;
     SAXIHP0RRESP : out std_logic_vector(1 downto 0);
     SAXIHP0RVALID : out std_ulogic;
     SAXIHP0WACOUNT : out std_logic_vector(5 downto 0);
     SAXIHP0WCOUNT : out std_logic_vector(7 downto 0);
     SAXIHP0WREADY : out std_ulogic;
     SAXIHP1ARESETN : out std_ulogic;
     SAXIHP1ARREADY : out std_ulogic;
     SAXIHP1AWREADY : out std_ulogic;
     SAXIHP1BID : out std_logic_vector(5 downto 0);
     SAXIHP1BRESP : out std_logic_vector(1 downto 0);
     SAXIHP1BVALID : out std_ulogic;
     SAXIHP1RACOUNT : out std_logic_vector(2 downto 0);
     SAXIHP1RCOUNT : out std_logic_vector(7 downto 0);
     SAXIHP1RDATA : out std_logic_vector(63 downto 0);
     SAXIHP1RID : out std_logic_vector(5 downto 0);
     SAXIHP1RLAST : out std_ulogic;
     SAXIHP1RRESP : out std_logic_vector(1 downto 0);
     SAXIHP1RVALID : out std_ulogic;
     SAXIHP1WACOUNT : out std_logic_vector(5 downto 0);
     SAXIHP1WCOUNT : out std_logic_vector(7 downto 0);
     SAXIHP1WREADY : out std_ulogic;
     SAXIHP2ARESETN : out std_ulogic;
     SAXIHP2ARREADY : out std_ulogic;
     SAXIHP2AWREADY : out std_ulogic;
     SAXIHP2BID : out std_logic_vector(5 downto 0);
     SAXIHP2BRESP : out std_logic_vector(1 downto 0);
     SAXIHP2BVALID : out std_ulogic;
     SAXIHP2RACOUNT : out std_logic_vector(2 downto 0);
     SAXIHP2RCOUNT : out std_logic_vector(7 downto 0);
     SAXIHP2RDATA : out std_logic_vector(63 downto 0);
     SAXIHP2RID : out std_logic_vector(5 downto 0);
     SAXIHP2RLAST : out std_ulogic;
     SAXIHP2RRESP : out std_logic_vector(1 downto 0);
     SAXIHP2RVALID : out std_ulogic;
     SAXIHP2WACOUNT : out std_logic_vector(5 downto 0);
     SAXIHP2WCOUNT : out std_logic_vector(7 downto 0);
     SAXIHP2WREADY : out std_ulogic;
     SAXIHP3ARESETN : out std_ulogic;
     SAXIHP3ARREADY : out std_ulogic;
     SAXIHP3AWREADY : out std_ulogic;
     SAXIHP3BID : out std_logic_vector(5 downto 0);
     SAXIHP3BRESP : out std_logic_vector(1 downto 0);
     SAXIHP3BVALID : out std_ulogic;
     SAXIHP3RACOUNT : out std_logic_vector(2 downto 0);
     SAXIHP3RCOUNT : out std_logic_vector(7 downto 0);
     SAXIHP3RDATA : out std_logic_vector(63 downto 0);
     SAXIHP3RID : out std_logic_vector(5 downto 0);
     SAXIHP3RLAST : out std_ulogic;
     SAXIHP3RRESP : out std_logic_vector(1 downto 0);
     SAXIHP3RVALID : out std_ulogic;
     SAXIHP3WACOUNT : out std_logic_vector(5 downto 0);
     SAXIHP3WCOUNT : out std_logic_vector(7 downto 0);
     SAXIHP3WREADY : out std_ulogic;
     DDRA : inout std_logic_vector(14 downto 0);
     DDRBA : inout std_logic_vector(2 downto 0);
     DDRCASB : inout std_ulogic;
     DDRCKE : inout std_ulogic;
     DDRCKN : inout std_ulogic;
     DDRCKP : inout std_ulogic;
     DDRCSB : inout std_ulogic;
     DDRDM : inout std_logic_vector(3 downto 0);
     DDRDQ : inout std_logic_vector(31 downto 0);
     DDRDQSN : inout std_logic_vector(3 downto 0);
     DDRDQSP : inout std_logic_vector(3 downto 0);
     DDRDRSTB : inout std_ulogic;
     DDRODT : inout std_ulogic;
     DDRRASB : inout std_ulogic;
     DDRVRN : inout std_ulogic;
     DDRVRP : inout std_ulogic;
     DDRWEB : inout std_ulogic;
     MIO : inout std_logic_vector(53 downto 0);
     PSCLK : inout std_ulogic;
     PSPORB : inout std_ulogic;
     PSSRSTB : inout std_ulogic;
     DDRARB : in std_logic_vector(3 downto 0);
     DMA0ACLK : in std_ulogic;
     DMA0DAREADY : in std_ulogic;
     DMA0DRLAST : in std_ulogic;
     DMA0DRTYPE : in std_logic_vector(1 downto 0);
     DMA0DRVALID : in std_ulogic;
     DMA1ACLK : in std_ulogic;
     DMA1DAREADY : in std_ulogic;
     DMA1DRLAST : in std_ulogic;
     DMA1DRTYPE : in std_logic_vector(1 downto 0);
     DMA1DRVALID : in std_ulogic;
     DMA2ACLK : in std_ulogic;
     DMA2DAREADY : in std_ulogic;
     DMA2DRLAST : in std_ulogic;
     DMA2DRTYPE : in std_logic_vector(1 downto 0);
     DMA2DRVALID : in std_ulogic;
     DMA3ACLK : in std_ulogic;
     DMA3DAREADY : in std_ulogic;
     DMA3DRLAST : in std_ulogic;
     DMA3DRTYPE : in std_logic_vector(1 downto 0);
     DMA3DRVALID : in std_ulogic;
     EMIOCAN0PHYRX : in std_ulogic;
     EMIOCAN1PHYRX : in std_ulogic;
     EMIOENET0EXTINTIN : in std_ulogic;
     EMIOENET0GMIICOL : in std_ulogic;
     EMIOENET0GMIICRS : in std_ulogic;
     EMIOENET0GMIIRXCLK : in std_ulogic;
     EMIOENET0GMIIRXD : in std_logic_vector(7 downto 0);
     EMIOENET0GMIIRXDV : in std_ulogic;
     EMIOENET0GMIIRXER : in std_ulogic;
     EMIOENET0GMIITXCLK : in std_ulogic;
     EMIOENET0MDIOI : in std_ulogic;
     EMIOENET1EXTINTIN : in std_ulogic;
     EMIOENET1GMIICOL : in std_ulogic;
     EMIOENET1GMIICRS : in std_ulogic;
     EMIOENET1GMIIRXCLK : in std_ulogic;
     EMIOENET1GMIIRXD : in std_logic_vector(7 downto 0);
     EMIOENET1GMIIRXDV : in std_ulogic;
     EMIOENET1GMIIRXER : in std_ulogic;
     EMIOENET1GMIITXCLK : in std_ulogic;
     EMIOENET1MDIOI : in std_ulogic;
     EMIOGPIOI : in std_logic_vector(63 downto 0);
     EMIOI2C0SCLI : in std_ulogic;
     EMIOI2C0SDAI : in std_ulogic;
     EMIOI2C1SCLI : in std_ulogic;
     EMIOI2C1SDAI : in std_ulogic;
     EMIOPJTAGTCK : in std_ulogic;
     EMIOPJTAGTDI : in std_ulogic;
     EMIOPJTAGTMS : in std_ulogic;
     EMIOSDIO0CDN : in std_ulogic;
     EMIOSDIO0CLKFB : in std_ulogic;
     EMIOSDIO0CMDI : in std_ulogic;
     EMIOSDIO0DATAI : in std_logic_vector(3 downto 0);
     EMIOSDIO0WP : in std_ulogic;
     EMIOSDIO1CDN : in std_ulogic;
     EMIOSDIO1CLKFB : in std_ulogic;
     EMIOSDIO1CMDI : in std_ulogic;
     EMIOSDIO1DATAI : in std_logic_vector(3 downto 0);
     EMIOSDIO1WP : in std_ulogic;
     EMIOSPI0MI : in std_ulogic;
     EMIOSPI0SCLKI : in std_ulogic;
     EMIOSPI0SI : in std_ulogic;
     EMIOSPI0SSIN : in std_ulogic;
     EMIOSPI1MI : in std_ulogic;
     EMIOSPI1SCLKI : in std_ulogic;
     EMIOSPI1SI : in std_ulogic;
     EMIOSPI1SSIN : in std_ulogic;
     EMIOSRAMINTIN : in std_ulogic;
     EMIOTRACECLK : in std_ulogic;
     EMIOTTC0CLKI : in std_logic_vector(2 downto 0);
     EMIOTTC1CLKI : in std_logic_vector(2 downto 0);
     EMIOUART0CTSN : in std_ulogic;
     EMIOUART0DCDN : in std_ulogic;
     EMIOUART0DSRN : in std_ulogic;
     EMIOUART0RIN : in std_ulogic;
     EMIOUART0RX : in std_ulogic;
     EMIOUART1CTSN : in std_ulogic;
     EMIOUART1DCDN : in std_ulogic;
     EMIOUART1DSRN : in std_ulogic;
     EMIOUART1RIN : in std_ulogic;
     EMIOUART1RX : in std_ulogic;
     EMIOUSB0VBUSPWRFAULT : in std_ulogic;
     EMIOUSB1VBUSPWRFAULT : in std_ulogic;
     EMIOWDTCLKI : in std_ulogic;
     EVENTEVENTI : in std_ulogic;
     FCLKCLKTRIGN : in std_logic_vector(3 downto 0);
     FPGAIDLEN : in std_ulogic;
     FTMDTRACEINATID : in std_logic_vector(3 downto 0);
     FTMDTRACEINCLOCK : in std_ulogic;
     FTMDTRACEINDATA : in std_logic_vector(31 downto 0);
     FTMDTRACEINVALID : in std_ulogic;
     FTMTF2PDEBUG : in std_logic_vector(31 downto 0);
     FTMTF2PTRIG : in std_logic_vector(3 downto 0);
     FTMTP2FTRIGACK : in std_logic_vector(3 downto 0);
     IRQF2P : in std_logic_vector(19 downto 0);
     MAXIGP0ACLK : in std_ulogic;
     MAXIGP0ARREADY : in std_ulogic;
     MAXIGP0AWREADY : in std_ulogic;
     MAXIGP0BID : in std_logic_vector(11 downto 0);
     MAXIGP0BRESP : in std_logic_vector(1 downto 0);
     MAXIGP0BVALID : in std_ulogic;
     MAXIGP0RDATA : in std_logic_vector(31 downto 0);
     MAXIGP0RID : in std_logic_vector(11 downto 0);
     MAXIGP0RLAST : in std_ulogic;
     MAXIGP0RRESP : in std_logic_vector(1 downto 0);
     MAXIGP0RVALID : in std_ulogic;
     MAXIGP0WREADY : in std_ulogic;
     MAXIGP1ACLK : in std_ulogic;
     MAXIGP1ARREADY : in std_ulogic;
     MAXIGP1AWREADY : in std_ulogic;
     MAXIGP1BID : in std_logic_vector(11 downto 0);
     MAXIGP1BRESP : in std_logic_vector(1 downto 0);
     MAXIGP1BVALID : in std_ulogic;
     MAXIGP1RDATA : in std_logic_vector(31 downto 0);
     MAXIGP1RID : in std_logic_vector(11 downto 0);
     MAXIGP1RLAST : in std_ulogic;
     MAXIGP1RRESP : in std_logic_vector(1 downto 0);
     MAXIGP1RVALID : in std_ulogic;
     MAXIGP1WREADY : in std_ulogic;
     SAXIACPACLK : in std_ulogic;
     SAXIACPARADDR : in std_logic_vector(31 downto 0);
     SAXIACPARBURST : in std_logic_vector(1 downto 0);
     SAXIACPARCACHE : in std_logic_vector(3 downto 0);
     SAXIACPARID : in std_logic_vector(2 downto 0);
     SAXIACPARLEN : in std_logic_vector(3 downto 0);
     SAXIACPARLOCK : in std_logic_vector(1 downto 0);
     SAXIACPARPROT : in std_logic_vector(2 downto 0);
     SAXIACPARQOS : in std_logic_vector(3 downto 0);
     SAXIACPARSIZE : in std_logic_vector(1 downto 0);
     SAXIACPARUSER : in std_logic_vector(4 downto 0);
     SAXIACPARVALID : in std_ulogic;
     SAXIACPAWADDR : in std_logic_vector(31 downto 0);
     SAXIACPAWBURST : in std_logic_vector(1 downto 0);
     SAXIACPAWCACHE : in std_logic_vector(3 downto 0);
     SAXIACPAWID : in std_logic_vector(2 downto 0);
     SAXIACPAWLEN : in std_logic_vector(3 downto 0);
     SAXIACPAWLOCK : in std_logic_vector(1 downto 0);
     SAXIACPAWPROT : in std_logic_vector(2 downto 0);
     SAXIACPAWQOS : in std_logic_vector(3 downto 0);
     SAXIACPAWSIZE : in std_logic_vector(1 downto 0);
     SAXIACPAWUSER : in std_logic_vector(4 downto 0);
     SAXIACPAWVALID : in std_ulogic;
     SAXIACPBREADY : in std_ulogic;
     SAXIACPRREADY : in std_ulogic;
     SAXIACPWDATA : in std_logic_vector(63 downto 0);
     SAXIACPWID : in std_logic_vector(2 downto 0);
     SAXIACPWLAST : in std_ulogic;
     SAXIACPWSTRB : in std_logic_vector(7 downto 0);
     SAXIACPWVALID : in std_ulogic;
     SAXIGP0ACLK : in std_ulogic;
     SAXIGP0ARADDR : in std_logic_vector(31 downto 0);
     SAXIGP0ARBURST : in std_logic_vector(1 downto 0);
     SAXIGP0ARCACHE : in std_logic_vector(3 downto 0);
     SAXIGP0ARID : in std_logic_vector(5 downto 0);
     SAXIGP0ARLEN : in std_logic_vector(3 downto 0);
     SAXIGP0ARLOCK : in std_logic_vector(1 downto 0);
     SAXIGP0ARPROT : in std_logic_vector(2 downto 0);
     SAXIGP0ARQOS : in std_logic_vector(3 downto 0);
     SAXIGP0ARSIZE : in std_logic_vector(1 downto 0);
     SAXIGP0ARVALID : in std_ulogic;
     SAXIGP0AWADDR : in std_logic_vector(31 downto 0);
     SAXIGP0AWBURST : in std_logic_vector(1 downto 0);
     SAXIGP0AWCACHE : in std_logic_vector(3 downto 0);
     SAXIGP0AWID : in std_logic_vector(5 downto 0);
     SAXIGP0AWLEN : in std_logic_vector(3 downto 0);
     SAXIGP0AWLOCK : in std_logic_vector(1 downto 0);
     SAXIGP0AWPROT : in std_logic_vector(2 downto 0);
     SAXIGP0AWQOS : in std_logic_vector(3 downto 0);
     SAXIGP0AWSIZE : in std_logic_vector(1 downto 0);
     SAXIGP0AWVALID : in std_ulogic;
     SAXIGP0BREADY : in std_ulogic;
     SAXIGP0RREADY : in std_ulogic;
     SAXIGP0WDATA : in std_logic_vector(31 downto 0);
     SAXIGP0WID : in std_logic_vector(5 downto 0);
     SAXIGP0WLAST : in std_ulogic;
     SAXIGP0WSTRB : in std_logic_vector(3 downto 0);
     SAXIGP0WVALID : in std_ulogic;
     SAXIGP1ACLK : in std_ulogic;
     SAXIGP1ARADDR : in std_logic_vector(31 downto 0);
     SAXIGP1ARBURST : in std_logic_vector(1 downto 0);
     SAXIGP1ARCACHE : in std_logic_vector(3 downto 0);
     SAXIGP1ARID : in std_logic_vector(5 downto 0);
     SAXIGP1ARLEN : in std_logic_vector(3 downto 0);
     SAXIGP1ARLOCK : in std_logic_vector(1 downto 0);
     SAXIGP1ARPROT : in std_logic_vector(2 downto 0);
     SAXIGP1ARQOS : in std_logic_vector(3 downto 0);
     SAXIGP1ARSIZE : in std_logic_vector(1 downto 0);
     SAXIGP1ARVALID : in std_ulogic;
     SAXIGP1AWADDR : in std_logic_vector(31 downto 0);
     SAXIGP1AWBURST : in std_logic_vector(1 downto 0);
     SAXIGP1AWCACHE : in std_logic_vector(3 downto 0);
     SAXIGP1AWID : in std_logic_vector(5 downto 0);
     SAXIGP1AWLEN : in std_logic_vector(3 downto 0);
     SAXIGP1AWLOCK : in std_logic_vector(1 downto 0);
     SAXIGP1AWPROT : in std_logic_vector(2 downto 0);
     SAXIGP1AWQOS : in std_logic_vector(3 downto 0);
     SAXIGP1AWSIZE : in std_logic_vector(1 downto 0);
     SAXIGP1AWVALID : in std_ulogic;
     SAXIGP1BREADY : in std_ulogic;
     SAXIGP1RREADY : in std_ulogic;
     SAXIGP1WDATA : in std_logic_vector(31 downto 0);
     SAXIGP1WID : in std_logic_vector(5 downto 0);
     SAXIGP1WLAST : in std_ulogic;
     SAXIGP1WSTRB : in std_logic_vector(3 downto 0);
     SAXIGP1WVALID : in std_ulogic;
     SAXIHP0ACLK : in std_ulogic;
     SAXIHP0ARADDR : in std_logic_vector(31 downto 0);
     SAXIHP0ARBURST : in std_logic_vector(1 downto 0);
     SAXIHP0ARCACHE : in std_logic_vector(3 downto 0);
     SAXIHP0ARID : in std_logic_vector(5 downto 0);
     SAXIHP0ARLEN : in std_logic_vector(3 downto 0);
     SAXIHP0ARLOCK : in std_logic_vector(1 downto 0);
     SAXIHP0ARPROT : in std_logic_vector(2 downto 0);
     SAXIHP0ARQOS : in std_logic_vector(3 downto 0);
     SAXIHP0ARSIZE : in std_logic_vector(1 downto 0);
     SAXIHP0ARVALID : in std_ulogic;
     SAXIHP0AWADDR : in std_logic_vector(31 downto 0);
     SAXIHP0AWBURST : in std_logic_vector(1 downto 0);
     SAXIHP0AWCACHE : in std_logic_vector(3 downto 0);
     SAXIHP0AWID : in std_logic_vector(5 downto 0);
     SAXIHP0AWLEN : in std_logic_vector(3 downto 0);
     SAXIHP0AWLOCK : in std_logic_vector(1 downto 0);
     SAXIHP0AWPROT : in std_logic_vector(2 downto 0);
     SAXIHP0AWQOS : in std_logic_vector(3 downto 0);
     SAXIHP0AWSIZE : in std_logic_vector(1 downto 0);
     SAXIHP0AWVALID : in std_ulogic;
     SAXIHP0BREADY : in std_ulogic;
     SAXIHP0RDISSUECAP1EN : in std_ulogic;
     SAXIHP0RREADY : in std_ulogic;
     SAXIHP0WDATA : in std_logic_vector(63 downto 0);
     SAXIHP0WID : in std_logic_vector(5 downto 0);
     SAXIHP0WLAST : in std_ulogic;
     SAXIHP0WRISSUECAP1EN : in std_ulogic;
     SAXIHP0WSTRB : in std_logic_vector(7 downto 0);
     SAXIHP0WVALID : in std_ulogic;
     SAXIHP1ACLK : in std_ulogic;
     SAXIHP1ARADDR : in std_logic_vector(31 downto 0);
     SAXIHP1ARBURST : in std_logic_vector(1 downto 0);
     SAXIHP1ARCACHE : in std_logic_vector(3 downto 0);
     SAXIHP1ARID : in std_logic_vector(5 downto 0);
     SAXIHP1ARLEN : in std_logic_vector(3 downto 0);
     SAXIHP1ARLOCK : in std_logic_vector(1 downto 0);
     SAXIHP1ARPROT : in std_logic_vector(2 downto 0);
     SAXIHP1ARQOS : in std_logic_vector(3 downto 0);
     SAXIHP1ARSIZE : in std_logic_vector(1 downto 0);
     SAXIHP1ARVALID : in std_ulogic;
     SAXIHP1AWADDR : in std_logic_vector(31 downto 0);
     SAXIHP1AWBURST : in std_logic_vector(1 downto 0);
     SAXIHP1AWCACHE : in std_logic_vector(3 downto 0);
     SAXIHP1AWID : in std_logic_vector(5 downto 0);
     SAXIHP1AWLEN : in std_logic_vector(3 downto 0);
     SAXIHP1AWLOCK : in std_logic_vector(1 downto 0);
     SAXIHP1AWPROT : in std_logic_vector(2 downto 0);
     SAXIHP1AWQOS : in std_logic_vector(3 downto 0);
     SAXIHP1AWSIZE : in std_logic_vector(1 downto 0);
     SAXIHP1AWVALID : in std_ulogic;
     SAXIHP1BREADY : in std_ulogic;
     SAXIHP1RDISSUECAP1EN : in std_ulogic;
     SAXIHP1RREADY : in std_ulogic;
     SAXIHP1WDATA : in std_logic_vector(63 downto 0);
     SAXIHP1WID : in std_logic_vector(5 downto 0);
     SAXIHP1WLAST : in std_ulogic;
     SAXIHP1WRISSUECAP1EN : in std_ulogic;
     SAXIHP1WSTRB : in std_logic_vector(7 downto 0);
     SAXIHP1WVALID : in std_ulogic;
     SAXIHP2ACLK : in std_ulogic;
     SAXIHP2ARADDR : in std_logic_vector(31 downto 0);
     SAXIHP2ARBURST : in std_logic_vector(1 downto 0);
     SAXIHP2ARCACHE : in std_logic_vector(3 downto 0);
     SAXIHP2ARID : in std_logic_vector(5 downto 0);
     SAXIHP2ARLEN : in std_logic_vector(3 downto 0);
     SAXIHP2ARLOCK : in std_logic_vector(1 downto 0);
     SAXIHP2ARPROT : in std_logic_vector(2 downto 0);
     SAXIHP2ARQOS : in std_logic_vector(3 downto 0);
     SAXIHP2ARSIZE : in std_logic_vector(1 downto 0);
     SAXIHP2ARVALID : in std_ulogic;
     SAXIHP2AWADDR : in std_logic_vector(31 downto 0);
     SAXIHP2AWBURST : in std_logic_vector(1 downto 0);
     SAXIHP2AWCACHE : in std_logic_vector(3 downto 0);
     SAXIHP2AWID : in std_logic_vector(5 downto 0);
     SAXIHP2AWLEN : in std_logic_vector(3 downto 0);
     SAXIHP2AWLOCK : in std_logic_vector(1 downto 0);
     SAXIHP2AWPROT : in std_logic_vector(2 downto 0);
     SAXIHP2AWQOS : in std_logic_vector(3 downto 0);
     SAXIHP2AWSIZE : in std_logic_vector(1 downto 0);
     SAXIHP2AWVALID : in std_ulogic;
     SAXIHP2BREADY : in std_ulogic;
     SAXIHP2RDISSUECAP1EN : in std_ulogic;
     SAXIHP2RREADY : in std_ulogic;
     SAXIHP2WDATA : in std_logic_vector(63 downto 0);
     SAXIHP2WID : in std_logic_vector(5 downto 0);
     SAXIHP2WLAST : in std_ulogic;
     SAXIHP2WRISSUECAP1EN : in std_ulogic;
     SAXIHP2WSTRB : in std_logic_vector(7 downto 0);
     SAXIHP2WVALID : in std_ulogic;
     SAXIHP3ACLK : in std_ulogic;
     SAXIHP3ARADDR : in std_logic_vector(31 downto 0);
     SAXIHP3ARBURST : in std_logic_vector(1 downto 0);
     SAXIHP3ARCACHE : in std_logic_vector(3 downto 0);
     SAXIHP3ARID : in std_logic_vector(5 downto 0);
     SAXIHP3ARLEN : in std_logic_vector(3 downto 0);
     SAXIHP3ARLOCK : in std_logic_vector(1 downto 0);
     SAXIHP3ARPROT : in std_logic_vector(2 downto 0);
     SAXIHP3ARQOS : in std_logic_vector(3 downto 0);
     SAXIHP3ARSIZE : in std_logic_vector(1 downto 0);
     SAXIHP3ARVALID : in std_ulogic;
     SAXIHP3AWADDR : in std_logic_vector(31 downto 0);
     SAXIHP3AWBURST : in std_logic_vector(1 downto 0);
     SAXIHP3AWCACHE : in std_logic_vector(3 downto 0);
     SAXIHP3AWID : in std_logic_vector(5 downto 0);
     SAXIHP3AWLEN : in std_logic_vector(3 downto 0);
     SAXIHP3AWLOCK : in std_logic_vector(1 downto 0);
     SAXIHP3AWPROT : in std_logic_vector(2 downto 0);
     SAXIHP3AWQOS : in std_logic_vector(3 downto 0);
     SAXIHP3AWSIZE : in std_logic_vector(1 downto 0);
     SAXIHP3AWVALID : in std_ulogic;
     SAXIHP3BREADY : in std_ulogic;
     SAXIHP3RDISSUECAP1EN : in std_ulogic;
     SAXIHP3RREADY : in std_ulogic;
     SAXIHP3WDATA : in std_logic_vector(63 downto 0);
     SAXIHP3WID : in std_logic_vector(5 downto 0);
     SAXIHP3WLAST : in std_ulogic;
     SAXIHP3WRISSUECAP1EN : in std_ulogic;
     SAXIHP3WSTRB : in std_logic_vector(7 downto 0);
     SAXIHP3WVALID : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  PS7 : component is "PRIMITIVE";

----- component PULLDOWN -----
component PULLDOWN
  port (
     O : out std_ulogic := 'L'
  );
end component;
attribute BOX_TYPE of
  PULLDOWN : component is "PRIMITIVE";

----- component PULLUP -----
component PULLUP
  port (
     O : out std_ulogic := 'H'
  );
end component;
attribute BOX_TYPE of
  PULLUP : component is "PRIMITIVE";

----- component RAM128X1D -----
component RAM128X1D
  generic (
     INIT : bit_vector(127 downto 0) := X"00000000000000000000000000000000";
     IS_WCLK_INVERTED : std_ulogic := '0'
  );
  port (
     DPO : out std_ulogic;
     SPO : out std_ulogic;
     A : in std_logic_vector(6 downto 0);
     D : in std_ulogic;
     DPRA : in std_logic_vector(6 downto 0);
     WCLK : in std_ulogic;
     WE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAM128X1D : component is "PRIMITIVE";

----- component RAM128X1S -----
component RAM128X1S
  generic (
     INIT : bit_vector(127 downto 0) := X"00000000000000000000000000000000";
     IS_WCLK_INVERTED : std_ulogic := '0'
  );
  port (
     O : out std_ulogic;
     A0 : in std_ulogic;
     A1 : in std_ulogic;
     A2 : in std_ulogic;
     A3 : in std_ulogic;
     A4 : in std_ulogic;
     A5 : in std_ulogic;
     A6 : in std_ulogic;
     D : in std_ulogic;
     WCLK : in std_ulogic;
     WE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAM128X1S : component is "PRIMITIVE";

----- component RAM256X1D -----
component RAM256X1D
  generic (
     INIT : std_logic_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     IS_WCLK_INVERTED : std_ulogic := '0'
  );
  port (
     DPO : out std_ulogic;
     SPO : out std_ulogic;
     A : in std_logic_vector(7 downto 0);
     D : in std_ulogic;
     DPRA : in std_logic_vector(7 downto 0);
     WCLK : in std_ulogic;
     WE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAM256X1D : component is "PRIMITIVE";

----- component RAM256X1S -----
component RAM256X1S
  generic (
     INIT : bit_vector(255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     IS_WCLK_INVERTED : std_ulogic := '0'
  );
  port (
     O : out std_ulogic;
     A : in std_logic_vector(7 downto 0);
     D : in std_ulogic;
     WCLK : in std_ulogic;
     WE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAM256X1S : component is "PRIMITIVE";

----- component RAM32M -----
component RAM32M
  generic (
     INIT_A : bit_vector(63 downto 0) := X"0000000000000000";
     INIT_B : bit_vector(63 downto 0) := X"0000000000000000";
     INIT_C : bit_vector(63 downto 0) := X"0000000000000000";
     INIT_D : bit_vector(63 downto 0) := X"0000000000000000";
     IS_WCLK_INVERTED : std_ulogic := '0'
  );
  port (
     DOA : out std_logic_vector (1 downto 0);
     DOB : out std_logic_vector (1 downto 0);
     DOC : out std_logic_vector (1 downto 0);
     DOD : out std_logic_vector (1 downto 0);
     ADDRA : in std_logic_vector(4 downto 0);
     ADDRB : in std_logic_vector(4 downto 0);
     ADDRC : in std_logic_vector(4 downto 0);
     ADDRD : in std_logic_vector(4 downto 0);
     DIA : in std_logic_vector (1 downto 0);
     DIB : in std_logic_vector (1 downto 0);
     DIC : in std_logic_vector (1 downto 0);
     DID : in std_logic_vector (1 downto 0);
     WCLK : in std_ulogic;
     WE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAM32M : component is "PRIMITIVE";

----- component RAM32M16 -----
component RAM32M16
  generic (
     INIT_A : std_logic_vector(63 downto 0) := X"0000000000000000";
     INIT_B : std_logic_vector(63 downto 0) := X"0000000000000000";
     INIT_C : std_logic_vector(63 downto 0) := X"0000000000000000";
     INIT_D : std_logic_vector(63 downto 0) := X"0000000000000000";
     INIT_E : std_logic_vector(63 downto 0) := X"0000000000000000";
     INIT_F : std_logic_vector(63 downto 0) := X"0000000000000000";
     INIT_G : std_logic_vector(63 downto 0) := X"0000000000000000";
     INIT_H : std_logic_vector(63 downto 0) := X"0000000000000000";
     IS_WCLK_INVERTED : std_ulogic := '0'
  );
  port (
     DOA : out std_logic_vector (1 downto 0);
     DOB : out std_logic_vector (1 downto 0);
     DOC : out std_logic_vector (1 downto 0);
     DOD : out std_logic_vector (1 downto 0);
     DOE : out std_logic_vector (1 downto 0);
     DOF : out std_logic_vector (1 downto 0);
     DOG : out std_logic_vector (1 downto 0);
     DOH : out std_logic_vector (1 downto 0);
     ADDRA : in std_logic_vector(4 downto 0);
     ADDRB : in std_logic_vector(4 downto 0);
     ADDRC : in std_logic_vector(4 downto 0);
     ADDRD : in std_logic_vector(4 downto 0);
     ADDRE : in std_logic_vector(4 downto 0);
     ADDRF : in std_logic_vector(4 downto 0);
     ADDRG : in std_logic_vector(4 downto 0);
     ADDRH : in std_logic_vector(4 downto 0);
     DIA : in std_logic_vector (1 downto 0);
     DIB : in std_logic_vector (1 downto 0);
     DIC : in std_logic_vector (1 downto 0);
     DID : in std_logic_vector (1 downto 0);
     DIE : in std_logic_vector (1 downto 0);
     DIF : in std_logic_vector (1 downto 0);
     DIG : in std_logic_vector (1 downto 0);
     DIH : in std_logic_vector (1 downto 0);
     WCLK : in std_ulogic;
     WE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAM32M16 : component is "PRIMITIVE";

----- component RAM32X1D -----
component RAM32X1D
  generic (
     INIT : bit_vector(31 downto 0) := X"00000000";
     IS_WCLK_INVERTED : std_ulogic := '0'
  );
  port (
     DPO : out std_ulogic;
     SPO : out std_ulogic;
     A0 : in std_ulogic;
     A1 : in std_ulogic;
     A2 : in std_ulogic;
     A3 : in std_ulogic;
     A4 : in std_ulogic;
     D : in std_ulogic;
     DPRA0 : in std_ulogic;
     DPRA1 : in std_ulogic;
     DPRA2 : in std_ulogic;
     DPRA3 : in std_ulogic;
     DPRA4 : in std_ulogic;
     WCLK : in std_ulogic;
     WE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAM32X1D : component is "PRIMITIVE";

----- component RAM32X1S -----
component RAM32X1S
  generic (
     INIT : bit_vector(31 downto 0) := X"00000000";
     IS_WCLK_INVERTED : std_ulogic := '0'
  );
  port (
     O : out std_ulogic;
     A0 : in std_ulogic;
     A1 : in std_ulogic;
     A2 : in std_ulogic;
     A3 : in std_ulogic;
     A4 : in std_ulogic;
     D : in std_ulogic;
     WCLK : in std_ulogic;
     WE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAM32X1S : component is "PRIMITIVE";

----- component RAM512X1S -----
component RAM512X1S
  generic (
     INIT : std_logic_vector(511 downto 0) := X"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
     IS_WCLK_INVERTED : std_ulogic := '0'
  );
  port (
     O : out std_ulogic;
     A : in std_logic_vector(8 downto 0);
     D : in std_ulogic;
     WCLK : in std_ulogic;
     WE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAM512X1S : component is "PRIMITIVE";

----- component RAM64M -----
component RAM64M
  generic (
     INIT_A : bit_vector(63 downto 0) := X"0000000000000000";
     INIT_B : bit_vector(63 downto 0) := X"0000000000000000";
     INIT_C : bit_vector(63 downto 0) := X"0000000000000000";
     INIT_D : bit_vector(63 downto 0) := X"0000000000000000";
     IS_WCLK_INVERTED : std_ulogic := '0'
  );
  port (
     DOA : out std_ulogic;
     DOB : out std_ulogic;
     DOC : out std_ulogic;
     DOD : out std_ulogic;
     ADDRA : in std_logic_vector(5 downto 0);
     ADDRB : in std_logic_vector(5 downto 0);
     ADDRC : in std_logic_vector(5 downto 0);
     ADDRD : in std_logic_vector(5 downto 0);
     DIA : in std_ulogic;
     DIB : in std_ulogic;
     DIC : in std_ulogic;
     DID : in std_ulogic;
     WCLK : in std_ulogic;
     WE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAM64M : component is "PRIMITIVE";

----- component RAM64M8 -----
component RAM64M8
  generic (
     INIT_A : std_logic_vector(63 downto 0) := X"0000000000000000";
     INIT_B : std_logic_vector(63 downto 0) := X"0000000000000000";
     INIT_C : std_logic_vector(63 downto 0) := X"0000000000000000";
     INIT_D : std_logic_vector(63 downto 0) := X"0000000000000000";
     INIT_E : std_logic_vector(63 downto 0) := X"0000000000000000";
     INIT_F : std_logic_vector(63 downto 0) := X"0000000000000000";
     INIT_G : std_logic_vector(63 downto 0) := X"0000000000000000";
     INIT_H : std_logic_vector(63 downto 0) := X"0000000000000000";
     IS_WCLK_INVERTED : std_ulogic := '0'
  );
  port (
     DOA : out std_ulogic;
     DOB : out std_ulogic;
     DOC : out std_ulogic;
     DOD : out std_ulogic;
     DOE : out std_ulogic;
     DOF : out std_ulogic;
     DOG : out std_ulogic;
     DOH : out std_ulogic;
     ADDRA : in std_logic_vector(5 downto 0);
     ADDRB : in std_logic_vector(5 downto 0);
     ADDRC : in std_logic_vector(5 downto 0);
     ADDRD : in std_logic_vector(5 downto 0);
     ADDRE : in std_logic_vector(5 downto 0);
     ADDRF : in std_logic_vector(5 downto 0);
     ADDRG : in std_logic_vector(5 downto 0);
     ADDRH : in std_logic_vector(5 downto 0);
     DIA : in std_ulogic;
     DIB : in std_ulogic;
     DIC : in std_ulogic;
     DID : in std_ulogic;
     DIE : in std_ulogic;
     DIF : in std_ulogic;
     DIG : in std_ulogic;
     DIH : in std_ulogic;
     WCLK : in std_ulogic;
     WE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAM64M8 : component is "PRIMITIVE";

----- component RAM64X1D -----
component RAM64X1D
  generic (
     INIT : bit_vector(63 downto 0) := X"0000000000000000";
     IS_WCLK_INVERTED : std_ulogic := '0'
  );
  port (
     DPO : out std_ulogic;
     SPO : out std_ulogic;
     A0 : in std_ulogic;
     A1 : in std_ulogic;
     A2 : in std_ulogic;
     A3 : in std_ulogic;
     A4 : in std_ulogic;
     A5 : in std_ulogic;
     D : in std_ulogic;
     DPRA0 : in std_ulogic;
     DPRA1 : in std_ulogic;
     DPRA2 : in std_ulogic;
     DPRA3 : in std_ulogic;
     DPRA4 : in std_ulogic;
     DPRA5 : in std_ulogic;
     WCLK : in std_ulogic;
     WE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAM64X1D : component is "PRIMITIVE";

----- component RAM64X1S -----
component RAM64X1S
  generic (
     INIT : bit_vector(63 downto 0) := X"0000000000000000";
     IS_WCLK_INVERTED : std_ulogic := '0'
  );
  port (
     O : out std_ulogic;
     A0 : in std_ulogic;
     A1 : in std_ulogic;
     A2 : in std_ulogic;
     A3 : in std_ulogic;
     A4 : in std_ulogic;
     A5 : in std_ulogic;
     D : in std_ulogic;
     WCLK : in std_ulogic;
     WE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAM64X1S : component is "PRIMITIVE";

----- component RAMB18E1 -----
component RAMB18E1
  generic (
     DOA_REG : integer := 0;
     DOB_REG : integer := 0;
     INITP_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_10 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_11 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_12 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_13 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_14 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_15 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_16 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_17 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_18 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_19 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_20 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_21 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_22 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_23 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_24 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_25 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_26 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_27 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_28 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_29 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_30 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_31 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_32 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_33 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_34 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_35 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_36 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_37 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_38 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_39 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_A : bit_vector := X"00000";
     INIT_B : bit_vector := X"00000";
     INIT_FILE : string := "NONE";
     IS_CLKARDCLK_INVERTED : std_ulogic := '0';
     IS_CLKBWRCLK_INVERTED : std_ulogic := '0';
     IS_ENARDEN_INVERTED : std_ulogic := '0';
     IS_ENBWREN_INVERTED : std_ulogic := '0';
     IS_RSTRAMARSTRAM_INVERTED : std_ulogic := '0';
     IS_RSTRAMB_INVERTED : std_ulogic := '0';
     IS_RSTREGARSTREG_INVERTED : std_ulogic := '0';
     IS_RSTREGB_INVERTED : std_ulogic := '0';
     RAM_MODE : string := "TDP";
     RDADDR_COLLISION_HWCONFIG : string := "DELAYED_WRITE";
     READ_WIDTH_A : integer := 0;
     READ_WIDTH_B : integer := 0;
     RSTREG_PRIORITY_A : string := "RSTREG";
     RSTREG_PRIORITY_B : string := "RSTREG";
     SIM_COLLISION_CHECK : string := "ALL";
     SIM_DEVICE : string := "VIRTEX6";
     SRVAL_A : bit_vector := X"00000";
     SRVAL_B : bit_vector := X"00000";
     WRITE_MODE_A : string := "WRITE_FIRST";
     WRITE_MODE_B : string := "WRITE_FIRST";
     WRITE_WIDTH_A : integer := 0;
     WRITE_WIDTH_B : integer := 0
  );
  port (
     DOADO : out std_logic_vector(15 downto 0);
     DOBDO : out std_logic_vector(15 downto 0);
     DOPADOP : out std_logic_vector(1 downto 0);
     DOPBDOP : out std_logic_vector(1 downto 0);
     ADDRARDADDR : in std_logic_vector(13 downto 0);
     ADDRBWRADDR : in std_logic_vector(13 downto 0);
     CLKARDCLK : in std_ulogic;
     CLKBWRCLK : in std_ulogic;
     DIADI : in std_logic_vector(15 downto 0);
     DIBDI : in std_logic_vector(15 downto 0);
     DIPADIP : in std_logic_vector(1 downto 0);
     DIPBDIP : in std_logic_vector(1 downto 0);
     ENARDEN : in std_ulogic;
     ENBWREN : in std_ulogic;
     REGCEAREGCE : in std_ulogic;
     REGCEB : in std_ulogic;
     RSTRAMARSTRAM : in std_ulogic;
     RSTRAMB : in std_ulogic;
     RSTREGARSTREG : in std_ulogic;
     RSTREGB : in std_ulogic;
     WEA : in std_logic_vector(1 downto 0);
     WEBWE : in std_logic_vector(3 downto 0)
  );
end component;
attribute BOX_TYPE of
  RAMB18E1 : component is "PRIMITIVE";

----- component RAMB18E2 -----
component RAMB18E2
  generic (
     CASCADE_ORDER_A : string := "NONE";
     CASCADE_ORDER_B : string := "NONE";
     CLOCK_DOMAINS : string := "INDEPENDENT";
     DOA_REG : integer := 1;
     DOB_REG : integer := 1;
     ENADDRENA : string := "FALSE";
     ENADDRENB : string := "FALSE";
     INITP_00 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_01 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_02 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_03 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_04 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_05 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_06 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_07 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_00 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_01 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_02 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_03 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_04 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_05 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_06 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_07 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_08 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_09 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_10 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_11 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_12 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_13 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_14 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_15 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_16 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_17 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_18 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_19 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_20 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_21 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_22 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_23 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_24 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_25 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_26 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_27 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_28 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_29 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_30 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_31 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_32 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_33 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_34 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_35 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_36 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_37 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_38 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_39 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_A : std_logic_vector (17 downto 0) := "00" & X"0000";
     INIT_B : std_logic_vector (17 downto 0) := "00" & X"0000";
     INIT_FILE : string := "NONE";
     IS_CLKARDCLK_INVERTED : std_ulogic := '0';
     IS_CLKBWRCLK_INVERTED : std_ulogic := '0';
     IS_ENARDEN_INVERTED : std_ulogic := '0';
     IS_ENBWREN_INVERTED : std_ulogic := '0';
     IS_RSTRAMARSTRAM_INVERTED : std_ulogic := '0';
     IS_RSTRAMB_INVERTED : std_ulogic := '0';
     IS_RSTREGARSTREG_INVERTED : std_ulogic := '0';
     IS_RSTREGB_INVERTED : std_ulogic := '0';
     RDADDRCHANGEA : string := "FALSE";
     RDADDRCHANGEB : string := "FALSE";
     READ_WIDTH_A : integer := 0;
     READ_WIDTH_B : integer := 0;
     RSTREG_PRIORITY_A : string := "RSTREG";
     RSTREG_PRIORITY_B : string := "RSTREG";
     SIM_COLLISION_CHECK : string := "ALL";
     SLEEP_ASYNC : string := "FALSE";
     SRVAL_A : std_logic_vector (17 downto 0) := "00" & X"0000";
     SRVAL_B : std_logic_vector (17 downto 0) := "00" & X"0000";
     WRITE_MODE_A : string := "NO_CHANGE";
     WRITE_MODE_B : string := "NO_CHANGE";
     WRITE_WIDTH_A : integer := 0;
     WRITE_WIDTH_B : integer := 0
  );
  port (
     CASDOUTA : out std_logic_vector(15 downto 0);
     CASDOUTB : out std_logic_vector(15 downto 0);
     CASDOUTPA : out std_logic_vector(1 downto 0);
     CASDOUTPB : out std_logic_vector(1 downto 0);
     DOUTADOUT : out std_logic_vector(15 downto 0);
     DOUTBDOUT : out std_logic_vector(15 downto 0);
     DOUTPADOUTP : out std_logic_vector(1 downto 0);
     DOUTPBDOUTP : out std_logic_vector(1 downto 0);
     ADDRARDADDR : in std_logic_vector(13 downto 0);
     ADDRBWRADDR : in std_logic_vector(13 downto 0);
     ADDRENA : in std_ulogic;
     ADDRENB : in std_ulogic;
     CASDIMUXA : in std_ulogic;
     CASDIMUXB : in std_ulogic;
     CASDINA : in std_logic_vector(15 downto 0);
     CASDINB : in std_logic_vector(15 downto 0);
     CASDINPA : in std_logic_vector(1 downto 0);
     CASDINPB : in std_logic_vector(1 downto 0);
     CASDOMUXA : in std_ulogic;
     CASDOMUXB : in std_ulogic;
     CASDOMUXEN_A : in std_ulogic;
     CASDOMUXEN_B : in std_ulogic;
     CASOREGIMUXA : in std_ulogic;
     CASOREGIMUXB : in std_ulogic;
     CASOREGIMUXEN_A : in std_ulogic;
     CASOREGIMUXEN_B : in std_ulogic;
     CLKARDCLK : in std_ulogic;
     CLKBWRCLK : in std_ulogic;
     DINADIN : in std_logic_vector(15 downto 0);
     DINBDIN : in std_logic_vector(15 downto 0);
     DINPADINP : in std_logic_vector(1 downto 0);
     DINPBDINP : in std_logic_vector(1 downto 0);
     ENARDEN : in std_ulogic;
     ENBWREN : in std_ulogic;
     REGCEAREGCE : in std_ulogic;
     REGCEB : in std_ulogic;
     RSTRAMARSTRAM : in std_ulogic;
     RSTRAMB : in std_ulogic;
     RSTREGARSTREG : in std_ulogic;
     RSTREGB : in std_ulogic;
     SLEEP : in std_ulogic;
     WEA : in std_logic_vector(1 downto 0);
     WEBWE : in std_logic_vector(3 downto 0)
  );
end component;
attribute BOX_TYPE of
  RAMB18E2 : component is "PRIMITIVE";

----- component RAMB36E1 -----
component RAMB36E1
  generic (
     DOA_REG : integer := 0;
     DOB_REG : integer := 0;
     EN_ECC_READ : boolean := FALSE;
     EN_ECC_WRITE : boolean := FALSE;
     INITP_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_10 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_11 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_12 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_13 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_14 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_15 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_16 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_17 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_18 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_19 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_20 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_21 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_22 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_23 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_24 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_25 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_26 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_27 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_28 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_29 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_30 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_31 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_32 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_33 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_34 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_35 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_36 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_37 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_38 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_39 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_40 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_41 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_42 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_43 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_44 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_45 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_46 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_47 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_48 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_49 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_4A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_4B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_4C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_4D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_4E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_4F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_50 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_51 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_52 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_53 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_54 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_55 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_56 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_57 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_58 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_59 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_5A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_5B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_5C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_5D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_5E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_5F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_60 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_61 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_62 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_63 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_64 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_65 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_66 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_67 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_68 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_69 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_6A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_6B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_6C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_6D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_6E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_6F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_70 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_71 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_72 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_73 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_74 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_75 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_76 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_77 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_78 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_79 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_7A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_7B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_7C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_7D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_7E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_7F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_A : bit_vector := X"000000000";
     INIT_B : bit_vector := X"000000000";
     INIT_FILE : string := "NONE";
     IS_CLKARDCLK_INVERTED : std_ulogic := '0';
     IS_CLKBWRCLK_INVERTED : std_ulogic := '0';
     IS_ENARDEN_INVERTED : std_ulogic := '0';
     IS_ENBWREN_INVERTED : std_ulogic := '0';
     IS_RSTRAMARSTRAM_INVERTED : std_ulogic := '0';
     IS_RSTRAMB_INVERTED : std_ulogic := '0';
     IS_RSTREGARSTREG_INVERTED : std_ulogic := '0';
     IS_RSTREGB_INVERTED : std_ulogic := '0';
     RAM_EXTENSION_A : string := "NONE";
     RAM_EXTENSION_B : string := "NONE";
     RAM_MODE : string := "TDP";
     RDADDR_COLLISION_HWCONFIG : string := "DELAYED_WRITE";
     READ_WIDTH_A : integer := 0;
     READ_WIDTH_B : integer := 0;
     RSTREG_PRIORITY_A : string := "RSTREG";
     RSTREG_PRIORITY_B : string := "RSTREG";
     SIM_COLLISION_CHECK : string := "ALL";
     SIM_DEVICE : string := "VIRTEX6";
     SRVAL_A : bit_vector := X"000000000";
     SRVAL_B : bit_vector := X"000000000";
     WRITE_MODE_A : string := "WRITE_FIRST";
     WRITE_MODE_B : string := "WRITE_FIRST";
     WRITE_WIDTH_A : integer := 0;
     WRITE_WIDTH_B : integer := 0
  );
  port (
     CASCADEOUTA : out std_ulogic;
     CASCADEOUTB : out std_ulogic;
     DBITERR : out std_ulogic;
     DOADO : out std_logic_vector(31 downto 0);
     DOBDO : out std_logic_vector(31 downto 0);
     DOPADOP : out std_logic_vector(3 downto 0);
     DOPBDOP : out std_logic_vector(3 downto 0);
     ECCPARITY : out std_logic_vector(7 downto 0);
     RDADDRECC : out std_logic_vector(8 downto 0);
     SBITERR : out std_ulogic;
     ADDRARDADDR : in std_logic_vector(15 downto 0);
     ADDRBWRADDR : in std_logic_vector(15 downto 0);
     CASCADEINA : in std_ulogic;
     CASCADEINB : in std_ulogic;
     CLKARDCLK : in std_ulogic;
     CLKBWRCLK : in std_ulogic;
     DIADI : in std_logic_vector(31 downto 0);
     DIBDI : in std_logic_vector(31 downto 0);
     DIPADIP : in std_logic_vector(3 downto 0);
     DIPBDIP : in std_logic_vector(3 downto 0);
     ENARDEN : in std_ulogic;
     ENBWREN : in std_ulogic;
     INJECTDBITERR : in std_ulogic;
     INJECTSBITERR : in std_ulogic;
     REGCEAREGCE : in std_ulogic;
     REGCEB : in std_ulogic;
     RSTRAMARSTRAM : in std_ulogic;
     RSTRAMB : in std_ulogic;
     RSTREGARSTREG : in std_ulogic;
     RSTREGB : in std_ulogic;
     WEA : in std_logic_vector(3 downto 0);
     WEBWE : in std_logic_vector(7 downto 0)
  );
end component;
attribute BOX_TYPE of
  RAMB36E1 : component is "PRIMITIVE";

----- component RAMB36E2 -----
component RAMB36E2
  generic (
     CASCADE_ORDER_A : string := "NONE";
     CASCADE_ORDER_B : string := "NONE";
     CLOCK_DOMAINS : string := "INDEPENDENT";
     DOA_REG : integer := 1;
     DOB_REG : integer := 1;
     ENADDRENA : string := "FALSE";
     ENADDRENB : string := "FALSE";
     EN_ECC_PIPE : string := "FALSE";
     EN_ECC_READ : string := "FALSE";
     EN_ECC_WRITE : string := "FALSE";
     INITP_00 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_01 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_02 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_03 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_04 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_05 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_06 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_07 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_08 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_09 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_0A : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_0B : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_0C : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_0D : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_0E : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INITP_0F : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_00 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_01 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_02 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_03 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_04 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_05 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_06 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_07 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_08 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_09 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0A : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0B : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0C : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0D : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0E : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_0F : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_10 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_11 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_12 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_13 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_14 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_15 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_16 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_17 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_18 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_19 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1A : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1B : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1C : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1D : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1E : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_1F : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_20 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_21 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_22 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_23 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_24 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_25 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_26 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_27 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_28 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_29 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2A : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2B : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2C : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2D : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2E : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_2F : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_30 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_31 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_32 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_33 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_34 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_35 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_36 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_37 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_38 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_39 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3A : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3B : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3C : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3D : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3E : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_3F : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_40 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_41 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_42 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_43 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_44 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_45 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_46 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_47 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_48 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_49 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_4A : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_4B : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_4C : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_4D : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_4E : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_4F : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_50 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_51 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_52 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_53 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_54 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_55 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_56 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_57 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_58 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_59 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_5A : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_5B : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_5C : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_5D : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_5E : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_5F : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_60 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_61 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_62 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_63 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_64 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_65 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_66 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_67 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_68 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_69 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_6A : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_6B : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_6C : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_6D : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_6E : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_6F : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_70 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_71 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_72 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_73 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_74 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_75 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_76 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_77 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_78 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_79 : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_7A : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_7B : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_7C : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_7D : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_7E : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_7F : std_logic_vector (255 downto 0) := X"0000000000000000000000000000000000000000000000000000000000000000";
     INIT_A : std_logic_vector (35 downto 0) := X"000000000";
     INIT_B : std_logic_vector (35 downto 0) := X"000000000";
     INIT_FILE : string := "NONE";
     IS_CLKARDCLK_INVERTED : std_ulogic := '0';
     IS_CLKBWRCLK_INVERTED : std_ulogic := '0';
     IS_ENARDEN_INVERTED : std_ulogic := '0';
     IS_ENBWREN_INVERTED : std_ulogic := '0';
     IS_RSTRAMARSTRAM_INVERTED : std_ulogic := '0';
     IS_RSTRAMB_INVERTED : std_ulogic := '0';
     IS_RSTREGARSTREG_INVERTED : std_ulogic := '0';
     IS_RSTREGB_INVERTED : std_ulogic := '0';
     RDADDRCHANGEA : string := "FALSE";
     RDADDRCHANGEB : string := "FALSE";
     READ_WIDTH_A : integer := 0;
     READ_WIDTH_B : integer := 0;
     RSTREG_PRIORITY_A : string := "RSTREG";
     RSTREG_PRIORITY_B : string := "RSTREG";
     SIM_COLLISION_CHECK : string := "ALL";
     SLEEP_ASYNC : string := "FALSE";
     SRVAL_A : std_logic_vector (35 downto 0) := X"000000000";
     SRVAL_B : std_logic_vector (35 downto 0) := X"000000000";
     WRITE_MODE_A : string := "NO_CHANGE";
     WRITE_MODE_B : string := "NO_CHANGE";
     WRITE_WIDTH_A : integer := 0;
     WRITE_WIDTH_B : integer := 0
  );
  port (
     CASDOUTA : out std_logic_vector(31 downto 0);
     CASDOUTB : out std_logic_vector(31 downto 0);
     CASDOUTPA : out std_logic_vector(3 downto 0);
     CASDOUTPB : out std_logic_vector(3 downto 0);
     CASOUTDBITERR : out std_ulogic;
     CASOUTSBITERR : out std_ulogic;
     DBITERR : out std_ulogic;
     DOUTADOUT : out std_logic_vector(31 downto 0);
     DOUTBDOUT : out std_logic_vector(31 downto 0);
     DOUTPADOUTP : out std_logic_vector(3 downto 0);
     DOUTPBDOUTP : out std_logic_vector(3 downto 0);
     ECCPARITY : out std_logic_vector(7 downto 0);
     RDADDRECC : out std_logic_vector(8 downto 0);
     SBITERR : out std_ulogic;
     ADDRARDADDR : in std_logic_vector(14 downto 0);
     ADDRBWRADDR : in std_logic_vector(14 downto 0);
     ADDRENA : in std_ulogic;
     ADDRENB : in std_ulogic;
     CASDIMUXA : in std_ulogic;
     CASDIMUXB : in std_ulogic;
     CASDINA : in std_logic_vector(31 downto 0);
     CASDINB : in std_logic_vector(31 downto 0);
     CASDINPA : in std_logic_vector(3 downto 0);
     CASDINPB : in std_logic_vector(3 downto 0);
     CASDOMUXA : in std_ulogic;
     CASDOMUXB : in std_ulogic;
     CASDOMUXEN_A : in std_ulogic;
     CASDOMUXEN_B : in std_ulogic;
     CASINDBITERR : in std_ulogic;
     CASINSBITERR : in std_ulogic;
     CASOREGIMUXA : in std_ulogic;
     CASOREGIMUXB : in std_ulogic;
     CASOREGIMUXEN_A : in std_ulogic;
     CASOREGIMUXEN_B : in std_ulogic;
     CLKARDCLK : in std_ulogic;
     CLKBWRCLK : in std_ulogic;
     DINADIN : in std_logic_vector(31 downto 0);
     DINBDIN : in std_logic_vector(31 downto 0);
     DINPADINP : in std_logic_vector(3 downto 0);
     DINPBDINP : in std_logic_vector(3 downto 0);
     ECCPIPECE : in std_ulogic;
     ENARDEN : in std_ulogic;
     ENBWREN : in std_ulogic;
     INJECTDBITERR : in std_ulogic;
     INJECTSBITERR : in std_ulogic;
     REGCEAREGCE : in std_ulogic;
     REGCEB : in std_ulogic;
     RSTRAMARSTRAM : in std_ulogic;
     RSTRAMB : in std_ulogic;
     RSTREGARSTREG : in std_ulogic;
     RSTREGB : in std_ulogic;
     SLEEP : in std_ulogic;
     WEA : in std_logic_vector(3 downto 0);
     WEBWE : in std_logic_vector(7 downto 0)
  );
end component;
attribute BOX_TYPE of
  RAMB36E2 : component is "PRIMITIVE";

----- component RAMD32 -----
component RAMD32
  generic (
     INIT : bit_vector(31 downto 0) := X"00000000";
     IS_CLK_INVERTED : std_ulogic := '0'
  );
  port (
     O : out std_ulogic;
     CLK : in std_ulogic;
     I : in std_ulogic;
     RADR0 : in std_ulogic;
     RADR1 : in std_ulogic;
     RADR2 : in std_ulogic;
     RADR3 : in std_ulogic;
     RADR4 : in std_ulogic;
     WADR0 : in std_ulogic;
     WADR1 : in std_ulogic;
     WADR2 : in std_ulogic;
     WADR3 : in std_ulogic;
     WADR4 : in std_ulogic;
     WE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAMD32 : component is "PRIMITIVE";

----- component RAMD64E -----
component RAMD64E
  generic (
     INIT : bit_vector(63 downto 0) := X"0000000000000000";
     IS_CLK_INVERTED : std_ulogic := '0';
     RAM_ADDRESS_MASK : std_logic_vector (1 downto 0) := "00";
     RAM_ADDRESS_SPACE : std_logic_vector (1 downto 0) := "00"
  );
  port (
     O : out std_ulogic;
     CLK : in std_ulogic;
     I : in std_ulogic;
     RADR0 : in std_ulogic;
     RADR1 : in std_ulogic;
     RADR2 : in std_ulogic;
     RADR3 : in std_ulogic;
     RADR4 : in std_ulogic;
     RADR5 : in std_ulogic;
     WADR0 : in std_ulogic;
     WADR1 : in std_ulogic;
     WADR2 : in std_ulogic;
     WADR3 : in std_ulogic;
     WADR4 : in std_ulogic;
     WADR5 : in std_ulogic;
     WADR6 : in std_ulogic;
     WADR7 : in std_ulogic;
     WE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAMD64E : component is "PRIMITIVE";

----- component RAMS32 -----
component RAMS32
  generic (
     INIT : bit_vector(31 downto 0) := X"00000000";
     IS_CLK_INVERTED : std_ulogic := '0'
  );
  port (
     O : out std_ulogic;
     ADR0 : in std_ulogic;
     ADR1 : in std_ulogic;
     ADR2 : in std_ulogic;
     ADR3 : in std_ulogic;
     ADR4 : in std_ulogic;
     CLK : in std_ulogic;
     I : in std_ulogic;
     WE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAMS32 : component is "PRIMITIVE";

----- component RAMS64E -----
component RAMS64E
  generic (
     INIT : bit_vector(63 downto 0) := X"0000000000000000";
     IS_CLK_INVERTED : std_ulogic := '0';
     RAM_ADDRESS_MASK : std_logic_vector (1 downto 0) := "00";
     RAM_ADDRESS_SPACE : std_logic_vector (1 downto 0) := "00"
  );
  port (
     O : out std_ulogic;
     ADR0 : in std_ulogic;
     ADR1 : in std_ulogic;
     ADR2 : in std_ulogic;
     ADR3 : in std_ulogic;
     ADR4 : in std_ulogic;
     ADR5 : in std_ulogic;
     CLK : in std_ulogic;
     I : in std_ulogic;
     WADR6 : in std_ulogic;
     WADR7 : in std_ulogic;
     WE : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RAMS64E : component is "PRIMITIVE";

----- component RIU_OR -----
component RIU_OR
  port (
     RIU_RD_DATA : out std_logic_vector(15 downto 0);
     RIU_RD_VALID : out std_ulogic;
     RIU_RD_DATA_LOW : in std_logic_vector(15 downto 0);
     RIU_RD_DATA_UPP : in std_logic_vector(15 downto 0);
     RIU_RD_VALID_LOW : in std_ulogic;
     RIU_RD_VALID_UPP : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RIU_OR : component is "PRIMITIVE";

----- component RXTX_BITSLICE -----
component RXTX_BITSLICE
  generic (
     FIFO_SYNC_MODE : string := "FALSE";
     INIT : std_ulogic := '1';
     IS_RX_CLK_INVERTED : std_ulogic := '0';
     IS_RX_RST_DLY_INVERTED : std_ulogic := '0';
     IS_RX_RST_INVERTED : std_ulogic := '0';
     IS_TX_CLK_INVERTED : std_ulogic := '0';
     IS_TX_RST_DLY_INVERTED : std_ulogic := '0';
     IS_TX_RST_INVERTED : std_ulogic := '0';
     PRE_EMPHASIS : string := "OFF";
     RX_DATA_TYPE : string := "NONE";
     RX_DATA_WIDTH : integer := 8;
     RX_DELAY_FORMAT : string := "TIME";
     RX_DELAY_TYPE : string := "FIXED";
     RX_DELAY_VALUE : integer := 0;
     RX_REFCLK_FREQUENCY : real := 300.0;
     RX_UPDATE_MODE : string := "ASYNC";
     TBYTE_CTL : string := "TBYTE_IN";
     TX_DATA_WIDTH : integer := 8;
     TX_DELAY_FORMAT : string := "TIME";
     TX_DELAY_TYPE : string := "FIXED";
     TX_DELAY_VALUE : integer := 0;
     TX_OUTPUT_PHASE_90 : string := "FALSE";
     TX_REFCLK_FREQUENCY : real := 300.0;
     TX_UPDATE_MODE : string := "ASYNC"
  );
  port (
     FIFO_EMPTY : out std_ulogic;
     FIFO_WRCLK_OUT : out std_ulogic;
     O : out std_ulogic;
     Q : out std_logic_vector(7 downto 0);
     RX_BIT_CTRL_OUT : out std_logic_vector(34 downto 0);
     RX_CNTVALUEOUT : out std_logic_vector(8 downto 0);
     TX_BIT_CTRL_OUT : out std_logic_vector(29 downto 0);
     TX_CNTVALUEOUT : out std_logic_vector(8 downto 0);
     T_OUT : out std_ulogic;
     D : in std_logic_vector(7 downto 0);
     DATAIN : in std_ulogic;
     FIFO_RD_CLK : in std_ulogic;
     FIFO_RD_EN : in std_ulogic;
     RX_BIT_CTRL_IN : in std_logic_vector(23 downto 0);
     RX_CE : in std_ulogic;
     RX_CLK : in std_ulogic;
     RX_CNTVALUEIN : in std_logic_vector(8 downto 0);
     RX_EN_VTC : in std_ulogic;
     RX_INC : in std_ulogic;
     RX_LOAD : in std_ulogic;
     RX_RST : in std_ulogic;
     RX_RST_DLY : in std_ulogic;
     T : in std_ulogic;
     TBYTE_IN : in std_ulogic;
     TX_BIT_CTRL_IN : in std_logic_vector(26 downto 0);
     TX_CE : in std_ulogic;
     TX_CLK : in std_ulogic;
     TX_CNTVALUEIN : in std_logic_vector(8 downto 0);
     TX_EN_VTC : in std_ulogic;
     TX_INC : in std_ulogic;
     TX_LOAD : in std_ulogic;
     TX_RST : in std_ulogic;
     TX_RST_DLY : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RXTX_BITSLICE : component is "PRIMITIVE";

----- component RX_BITSLICE -----
component RX_BITSLICE
  generic (
     CASCADE : string := "FALSE";
     DATA_TYPE : string := "NONE";
     DATA_WIDTH : integer := 8;
     DELAY_FORMAT : string := "TIME";
     DELAY_TYPE : string := "FIXED";
     DELAY_VALUE : integer := 0;
     DELAY_VALUE_EXT : integer := 0;
     FIFO_SYNC_MODE : string := "FALSE";
     IS_CLK_EXT_INVERTED : std_ulogic := '0';
     IS_CLK_INVERTED : std_ulogic := '0';
     IS_RST_DLY_EXT_INVERTED : std_ulogic := '0';
     IS_RST_DLY_INVERTED : std_ulogic := '0';
     IS_RST_INVERTED : std_ulogic := '0';
     REFCLK_FREQUENCY : real := 300.0;
     UPDATE_MODE : string := "ASYNC";
     UPDATE_MODE_EXT : string := "ASYNC"
  );
  port (
     BIT_CTRL_OUT : out std_logic_vector(34 downto 0);
     BIT_CTRL_OUT_EXT : out std_logic_vector(28 downto 0);
     CNTVALUEOUT : out std_logic_vector(8 downto 0);
     CNTVALUEOUT_EXT : out std_logic_vector(8 downto 0);
     FIFO_EMPTY : out std_ulogic;
     FIFO_WRCLK_OUT : out std_ulogic;
     Q : out std_logic_vector(7 downto 0);
     BIT_CTRL_IN : in std_logic_vector(23 downto 0);
     BIT_CTRL_IN_EXT : in std_logic_vector(14 downto 0);
     CE : in std_ulogic;
     CE_EXT : in std_ulogic;
     CLK : in std_ulogic;
     CLK_EXT : in std_ulogic;
     CNTVALUEIN : in std_logic_vector(8 downto 0);
     CNTVALUEIN_EXT : in std_logic_vector(8 downto 0);
     DATAIN : in std_ulogic;
     EN_VTC : in std_ulogic;
     EN_VTC_EXT : in std_ulogic;
     FIFO_RD_CLK : in std_ulogic;
     FIFO_RD_EN : in std_ulogic;
     INC : in std_ulogic;
     INC_EXT : in std_ulogic;
     LOAD : in std_ulogic;
     LOAD_EXT : in std_ulogic;
     RST : in std_ulogic;
     RST_DLY : in std_ulogic;
     RST_DLY_EXT : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  RX_BITSLICE : component is "PRIMITIVE";

----- component SIM_CONFIGE2 -----
component SIM_CONFIGE2
  generic (
     DEVICE_ID : bit_vector := X"00000000";
     ICAP_SUPPORT : boolean := false;
     ICAP_WIDTH : string := "X8"
  );
  port (
     CSOB : out std_ulogic := '1';
     D : inout std_logic_vector(31 downto 0);
     DONE : inout std_ulogic := '0';
     INITB : inout std_ulogic := 'H';
     CCLK : in std_ulogic := '0';
     CSB : in std_ulogic := '0';
     M : in std_logic_vector(2 downto 0) := "000";
     PROGB : in std_ulogic := '0';
     RDWRB : in std_ulogic := '0'
  );
end component;
attribute BOX_TYPE of
  SIM_CONFIGE2 : component is "PRIMITIVE";

----- component SIM_CONFIGE3 -----
component SIM_CONFIGE3
  generic (
     DEVICE_ID : bit_vector := X"00000000";
     ICAP_SUPPORT : boolean := false;
     ICAP_WIDTH : string := "X8"
  );
  port (
     AVAIL : out std_ulogic := '0';
     CSOB : out std_ulogic := '1';
     PRDONE : out std_ulogic := '0';
     PRERROR : out std_ulogic := '0';
     D : inout std_logic_vector(31 downto 0);
     DONE : inout std_ulogic := '0';
     INITB : inout std_ulogic := 'H';
     CCLK : in std_ulogic := '0';
     CSB : in std_ulogic := '0';
     M : in std_logic_vector(2 downto 0) := "000";
     PROGB : in std_ulogic := '0';
     RDWRB : in std_ulogic := '0'
  );
end component;
attribute BOX_TYPE of
  SIM_CONFIGE3 : component is "PRIMITIVE";

----- component SRL16E -----
component SRL16E
  generic (
     INIT : bit_vector := X"0000";
     IS_CLK_INVERTED : std_ulogic := '0'
  );
  port (
     Q : out STD_ULOGIC;
     A0 : in STD_ULOGIC;
     A1 : in STD_ULOGIC;
     A2 : in STD_ULOGIC;
     A3 : in STD_ULOGIC;
     CE : in STD_ULOGIC;
     CLK : in STD_ULOGIC;
     D : in STD_ULOGIC
  );
end component;
attribute BOX_TYPE of
  SRL16E : component is "PRIMITIVE";

----- component SRLC16E -----
component SRLC16E
  generic (
     INIT : bit_vector := X"0000";
     IS_CLK_INVERTED : std_ulogic := '0'
  );
  port (
     Q : out STD_ULOGIC;
     Q15 : out STD_ULOGIC;
     A0 : in STD_ULOGIC;
     A1 : in STD_ULOGIC;
     A2 : in STD_ULOGIC;
     A3 : in STD_ULOGIC;
     CE : in STD_ULOGIC;
     CLK : in STD_ULOGIC;
     D : in STD_ULOGIC
  );
end component;
attribute BOX_TYPE of
  SRLC16E : component is "PRIMITIVE";

----- component SRLC32E -----
component SRLC32E
  generic (
     INIT : bit_vector := X"00000000";
     IS_CLK_INVERTED : std_ulogic := '0'
  );
  port (
     Q : out STD_ULOGIC;
     Q31 : out STD_ULOGIC;
     A : in STD_LOGIC_VECTOR (4 downto 0) := "00000";
     CE : in STD_ULOGIC;
     CLK : in STD_ULOGIC;
     D : in STD_ULOGIC
  );
end component;
attribute BOX_TYPE of
  SRLC32E : component is "PRIMITIVE";

----- component STARTUPE2 -----
component STARTUPE2
  generic (
     PROG_USR : string := "FALSE";
     SIM_CCLK_FREQ : real := 0.0
  );
  port (
     CFGCLK : out std_ulogic;
     CFGMCLK : out std_ulogic;
     EOS : out std_ulogic;
     PREQ : out std_ulogic;
     CLK : in std_ulogic;
     GSR : in std_ulogic;
     GTS : in std_ulogic;
     KEYCLEARB : in std_ulogic;
     PACK : in std_ulogic;
     USRCCLKO : in std_ulogic;
     USRCCLKTS : in std_ulogic;
     USRDONEO : in std_ulogic;
     USRDONETS : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  STARTUPE2 : component is "PRIMITIVE";

----- component STARTUPE3 -----
component STARTUPE3
  generic (
     PROG_USR : string := "FALSE";
     SIM_CCLK_FREQ : real := 0.0
  );
  port (
     CFGCLK : out std_ulogic;
     CFGMCLK : out std_ulogic;
     DI : out std_logic_vector(3 downto 0);
     EOS : out std_ulogic;
     PREQ : out std_ulogic;
     DO : in std_logic_vector(3 downto 0);
     DTS : in std_logic_vector(3 downto 0);
     FCSBO : in std_ulogic;
     FCSBTS : in std_ulogic;
     GSR : in std_ulogic;
     GTS : in std_ulogic;
     KEYCLEARB : in std_ulogic;
     PACK : in std_ulogic;
     USRCCLKO : in std_ulogic;
     USRCCLKTS : in std_ulogic;
     USRDONEO : in std_ulogic;
     USRDONETS : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  STARTUPE3 : component is "PRIMITIVE";

----- component SYSMONE1 -----
component SYSMONE1
  generic (
     INIT_40 : bit_vector := X"0000";
     INIT_41 : bit_vector := X"0000";
     INIT_42 : bit_vector := X"0000";
     INIT_43 : bit_vector := X"0000";
     INIT_44 : bit_vector := X"0000";
     INIT_45 : bit_vector := X"0000";
     INIT_46 : bit_vector := X"0000";
     INIT_47 : bit_vector := X"0000";
     INIT_48 : bit_vector := X"0000";
     INIT_49 : bit_vector := X"0000";
     INIT_4A : bit_vector := X"0000";
     INIT_4B : bit_vector := X"0000";
     INIT_4C : bit_vector := X"0000";
     INIT_4D : bit_vector := X"0000";
     INIT_4E : bit_vector := X"0000";
     INIT_4F : bit_vector := X"0000";
     INIT_50 : bit_vector := X"0000";
     INIT_51 : bit_vector := X"0000";
     INIT_52 : bit_vector := X"0000";
     INIT_53 : bit_vector := X"0000";
     INIT_54 : bit_vector := X"0000";
     INIT_55 : bit_vector := X"0000";
     INIT_56 : bit_vector := X"0000";
     INIT_57 : bit_vector := X"0000";
     INIT_58 : bit_vector := X"0000";
     INIT_59 : bit_vector := X"0000";
     INIT_5A : bit_vector := X"0000";
     INIT_5B : bit_vector := X"0000";
     INIT_5C : bit_vector := X"0000";
     INIT_5D : bit_vector := X"0000";
     INIT_5E : bit_vector := X"0000";
     INIT_5F : bit_vector := X"0000";
     INIT_60 : bit_vector := X"0000";
     INIT_61 : bit_vector := X"0000";
     INIT_62 : bit_vector := X"0000";
     INIT_63 : bit_vector := X"0000";
     INIT_64 : bit_vector := X"0000";
     INIT_65 : bit_vector := X"0000";
     INIT_66 : bit_vector := X"0000";
     INIT_67 : bit_vector := X"0000";
     INIT_68 : bit_vector := X"0000";
     INIT_69 : bit_vector := X"0000";
     INIT_6A : bit_vector := X"0000";
     INIT_6B : bit_vector := X"0000";
     INIT_6C : bit_vector := X"0000";
     INIT_6D : bit_vector := X"0000";
     INIT_6E : bit_vector := X"0000";
     INIT_6F : bit_vector := X"0000";
     INIT_70 : bit_vector := X"0000";
     INIT_71 : bit_vector := X"0000";
     INIT_72 : bit_vector := X"0000";
     INIT_73 : bit_vector := X"0000";
     INIT_74 : bit_vector := X"0000";
     INIT_75 : bit_vector := X"0000";
     INIT_76 : bit_vector := X"0000";
     INIT_77 : bit_vector := X"0000";
     INIT_78 : bit_vector := X"0000";
     INIT_79 : bit_vector := X"0000";
     INIT_7A : bit_vector := X"0000";
     INIT_7B : bit_vector := X"0000";
     INIT_7C : bit_vector := X"0000";
     INIT_7D : bit_vector := X"0000";
     INIT_7E : bit_vector := X"0000";
     INIT_7F : bit_vector := X"0000";
     IS_CONVSTCLK_INVERTED : std_ulogic := '0';
     IS_DCLK_INVERTED : std_ulogic := '0';
     SIM_MONITOR_FILE : string := "design.txt";
     SYSMON_VUSER0_BANK : integer := 0;
     SYSMON_VUSER0_MONITOR : string := "NONE";
     SYSMON_VUSER1_BANK : integer := 0;
     SYSMON_VUSER1_MONITOR : string := "NONE";
     SYSMON_VUSER2_BANK : integer := 0;
     SYSMON_VUSER2_MONITOR : string := "NONE";
     SYSMON_VUSER3_BANK : integer := 0;
     SYSMON_VUSER3_MONITOR : string := "NONE"
  );
  port (
     ALM : out std_logic_vector(15 downto 0);
     BUSY : out std_ulogic;
     CHANNEL : out std_logic_vector(5 downto 0);
     DO : out std_logic_vector(15 downto 0);
     DRDY : out std_ulogic;
     EOC : out std_ulogic;
     EOS : out std_ulogic;
     I2C_SCLK_TS : out std_ulogic;
     I2C_SDA_TS : out std_ulogic;
     JTAGBUSY : out std_ulogic;
     JTAGLOCKED : out std_ulogic;
     JTAGMODIFIED : out std_ulogic;
     MUXADDR : out std_logic_vector(4 downto 0);
     OT : out std_ulogic;
     CONVST : in std_ulogic;
     CONVSTCLK : in std_ulogic;
     DADDR : in std_logic_vector(7 downto 0);
     DCLK : in std_ulogic;
     DEN : in std_ulogic;
     DI : in std_logic_vector(15 downto 0);
     DWE : in std_ulogic;
     I2C_SCLK : in std_ulogic;
     I2C_SDA : in std_ulogic;
     RESET : in std_ulogic;
     VAUXN : in std_logic_vector(15 downto 0);
     VAUXP : in std_logic_vector(15 downto 0);
     VN : in std_ulogic;
     VP : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  SYSMONE1 : component is "PRIMITIVE";

----- component TX_BITSLICE -----
component TX_BITSLICE
  generic (
     DATA_WIDTH : integer := 8;
     DELAY_FORMAT : string := "TIME";
     DELAY_TYPE : string := "FIXED";
     DELAY_VALUE : integer := 0;
     INIT : std_ulogic := '1';
     IS_CLK_INVERTED : std_ulogic := '0';
     IS_RST_DLY_INVERTED : std_ulogic := '0';
     IS_RST_INVERTED : std_ulogic := '0';
     OUTPUT_PHASE_90 : string := "FALSE";
     PRE_EMPHASIS : string := "OFF";
     REFCLK_FREQUENCY : real := 300.0;
     TBYTE_CTL : string := "TBYTE_IN";
     UPDATE_MODE : string := "ASYNC"
  );
  port (
     BIT_CTRL_OUT : out std_logic_vector(29 downto 0);
     CNTVALUEOUT : out std_logic_vector(8 downto 0);
     O : out std_ulogic;
     T_OUT : out std_ulogic;
     BIT_CTRL_IN : in std_logic_vector(26 downto 0);
     CE : in std_ulogic;
     CLK : in std_ulogic;
     CNTVALUEIN : in std_logic_vector(8 downto 0);
     D : in std_logic_vector(7 downto 0);
     EN_VTC : in std_ulogic;
     INC : in std_ulogic;
     LOAD : in std_ulogic;
     RST : in std_ulogic;
     RST_DLY : in std_ulogic;
     T : in std_ulogic;
     TBYTE_IN : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  TX_BITSLICE : component is "PRIMITIVE";

----- component TX_BITSLICE_TRI -----
component TX_BITSLICE_TRI
  generic (
     DATA_WIDTH : integer := 8;
     DELAY_FORMAT : string := "TIME";
     DELAY_TYPE : string := "FIXED";
     DELAY_VALUE : integer := 0;
     INIT : std_ulogic := '1';
     IS_CLK_INVERTED : std_ulogic := '0';
     IS_RST_DLY_INVERTED : std_ulogic := '0';
     IS_RST_INVERTED : std_ulogic := '0';
     OUTPUT_PHASE_90 : string := "FALSE";
     REFCLK_FREQUENCY : real := 300.0;
     UPDATE_MODE : string := "ASYNC"
  );
  port (
     BIT_CTRL_OUT : out std_logic_vector(10 downto 0);
     CNTVALUEOUT : out std_logic_vector(8 downto 0);
     TRI_OUT : out std_ulogic;
     BIT_CTRL_IN : in std_logic_vector(34 downto 0);
     CE : in std_ulogic;
     CLK : in std_ulogic;
     CNTVALUEIN : in std_logic_vector(8 downto 0);
     EN_VTC : in std_ulogic;
     INC : in std_ulogic;
     LOAD : in std_ulogic;
     RST : in std_ulogic;
     RST_DLY : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  TX_BITSLICE_TRI : component is "PRIMITIVE";

----- component USR_ACCESSE2 -----
component USR_ACCESSE2
  port (
     CFGCLK : out std_ulogic;
     DATA : out std_logic_vector(31 downto 0);
     DATAVALID : out std_ulogic
  );
end component;
attribute BOX_TYPE of
  USR_ACCESSE2 : component is "PRIMITIVE";

----- component VCC -----
component VCC
  port (
     P : out std_ulogic := '1'
  );
end component;
attribute BOX_TYPE of
  VCC : component is "PRIMITIVE";

----- component XADC -----
component XADC
  generic (
     INIT_40 : bit_vector := X"0000";
     INIT_41 : bit_vector := X"0000";
     INIT_42 : bit_vector := X"0800";
     INIT_43 : bit_vector := X"0000";
     INIT_44 : bit_vector := X"0000";
     INIT_45 : bit_vector := X"0000";
     INIT_46 : bit_vector := X"0000";
     INIT_47 : bit_vector := X"0000";
     INIT_48 : bit_vector := X"0000";
     INIT_49 : bit_vector := X"0000";
     INIT_4A : bit_vector := X"0000";
     INIT_4B : bit_vector := X"0000";
     INIT_4C : bit_vector := X"0000";
     INIT_4D : bit_vector := X"0000";
     INIT_4E : bit_vector := X"0000";
     INIT_4F : bit_vector := X"0000";
     INIT_50 : bit_vector := X"0000";
     INIT_51 : bit_vector := X"0000";
     INIT_52 : bit_vector := X"0000";
     INIT_53 : bit_vector := X"0000";
     INIT_54 : bit_vector := X"0000";
     INIT_55 : bit_vector := X"0000";
     INIT_56 : bit_vector := X"0000";
     INIT_57 : bit_vector := X"0000";
     INIT_58 : bit_vector := X"0000";
     INIT_59 : bit_vector := X"0000";
     INIT_5A : bit_vector := X"0000";
     INIT_5B : bit_vector := X"0000";
     INIT_5C : bit_vector := X"0000";
     INIT_5D : bit_vector := X"0000";
     INIT_5E : bit_vector := X"0000";
     INIT_5F : bit_vector := X"0000";
     IS_CONVSTCLK_INVERTED : std_ulogic := '0';
     IS_DCLK_INVERTED : std_ulogic := '0';
     SIM_DEVICE : string := "7SERIES";
     SIM_MONITOR_FILE : string := "design.txt"
  );
  port (
     ALM : out std_logic_vector(7 downto 0);
     BUSY : out std_ulogic;
     CHANNEL : out std_logic_vector(4 downto 0);
     DO : out std_logic_vector(15 downto 0);
     DRDY : out std_ulogic;
     EOC : out std_ulogic;
     EOS : out std_ulogic;
     JTAGBUSY : out std_ulogic;
     JTAGLOCKED : out std_ulogic;
     JTAGMODIFIED : out std_ulogic;
     MUXADDR : out std_logic_vector(4 downto 0);
     OT : out std_ulogic;
     CONVST : in std_ulogic;
     CONVSTCLK : in std_ulogic;
     DADDR : in std_logic_vector(6 downto 0);
     DCLK : in std_ulogic;
     DEN : in std_ulogic;
     DI : in std_logic_vector(15 downto 0);
     DWE : in std_ulogic;
     RESET : in std_ulogic;
     VAUXN : in std_logic_vector(15 downto 0);
     VAUXP : in std_logic_vector(15 downto 0);
     VN : in std_ulogic;
     VP : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  XADC : component is "PRIMITIVE";

----- component XORCY -----
component XORCY
  port (
     O : out std_ulogic;
     CI : in std_ulogic;
     LI : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  XORCY : component is "PRIMITIVE";

----- component ZHOLD_DELAY -----
component ZHOLD_DELAY
  generic (
     IS_DLYIN_INVERTED : std_ulogic := '0';
     ZHOLD_FABRIC : string := "DEFAULT";
     ZHOLD_IFF : string := "DEFAULT"
  );
  port (
     DLYFABRIC : out std_ulogic;
     DLYIFF : out std_ulogic;
     DLYIN : in std_ulogic
  );
end component;
attribute BOX_TYPE of
  ZHOLD_DELAY : component is "PRIMITIVE";

-- END COMPONENT

end VCOMPONENTS;
